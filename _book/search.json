[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spatial Data Science",
    "section": "",
    "text": "This is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "00-part-1.html",
    "href": "00-part-1.html",
    "title": "Spatial Data",
    "section": "",
    "text": "Part one of this book …"
  },
  {
    "objectID": "01-hello.html",
    "href": "01-hello.html",
    "title": "1  Getting Started",
    "section": "",
    "text": "This chapter introduces a number of concepts associated with handling spatial data, and points forward to later sections where they are discussed in more detail."
  },
  {
    "objectID": "01-hello.html#a-first-map",
    "href": "01-hello.html#a-first-map",
    "title": "1  Getting Started",
    "section": "1.1 A first map",
    "text": "1.1 A first map\nThe typical way to graph spatial data is by creating a map. Let us consider a simple map, shown in Figure 1.1 .\n\n\nCode\nlibrary(tidyverse)\nlibrary(sf)\nsystem.file(\"gpkg/nc.gpkg\", package=\"sf\") |>\n    read_sf() -> nc\nnc.32119 <- st_transform(nc, 'EPSG:32119')\nnc.32119 |>\n    select(BIR74) |>\n    plot(graticule = TRUE, axes = TRUE)\n\n\n\n\n\nFigure 1.1: a first map\n\n\n\n\nA number of graphical elements are present here, in this case:\n\npolygons are drawn with a black outline and filled with colors chosen according to a variable BIR74, whose name is in the title\na legend key explains the meaning of the colors, and has a certain color palette and color breaks, values at which color changes\nthe background of the map shows curved lines with constant latitude or longitude (graticule)\nthe axis ticks show the latitude and longitude values\n\nPolygons are a particular form of geometry; spatial geometries (points, lines, polygons, pixels) are discussed in detail in Chapter 3. Polygons consist of sequences of points, connected by straight lines. How point locations of spatial data are expressed, or measured, is discussed in Chapter 2. As can be seen from Figure 1.1 , lines of equal latitude and longitude do not form straight lines, indicating that some form of projection took place before plotting; projections are also discussed in Chapter 2 and section Section 9.1.\nThe color values in Figure 1.1 are derived from numeric values of a variable, BIR74, which has a single value associated with each geometry or feature. Chapter 5 discusses such feature attributes, and the way they can relate to feature geometries. In this case, BIR74 refers to birth counts, meaning counts over the region. This implies that the count does not refer to a value associated with every point inside the polygon, which the continuous color might suggest, but rather measures an integral (sum) over the polygon.\nBefore plotting Figure 1.1 we had to read the data, in this case from a file (Section 7.1). Printing a data summary for the first three records of three attribute variables shows:\n\n\nCode\nnc |> select(AREA, BIR74, SID74) |> print(n = 3)\n# Simple feature collection with 100 features and 3 fields\n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -84.3 ymin: 33.9 xmax: -75.5 ymax: 36.6\n# Geodetic CRS:  NAD27\n# # A tibble: 100 × 4\n#    AREA BIR74 SID74                                           geom\n#   <dbl> <dbl> <dbl>                             <MULTIPOLYGON [°]>\n# 1 0.114  1091     1 (((-81.5 36.2, -81.5 36.3, -81.6 36.3, -81.6 …\n# 2 0.061   487     0 (((-81.2 36.4, -81.2 36.4, -81.3 36.4, -81.3 …\n# 3 0.143  3188     5 (((-80.5 36.2, -80.5 36.3, -80.5 36.3, -80.5 …\n# # … with 97 more rows\n\n\nThe printed output shows:\n\nthe (selected) dataset has 100 features (records) and 3 fields (attributes)\nthe geometry type is MULTIPOLYGON (Chapter 3)\nit has dimension XY, indicating that each point will consist of 2 coordinate values\nthe range of x and y values of the geometry\nthe coordinate reference system (CRS) is geodetic, with coordinates in degrees longitude and latitude associated to the NAD27 datum (Chapter 2)\nthe three selected attribute variables are followed by a variable geom of type MULTIPOLYGON with unit degrees that contains the polygon information\n\nMore complicated plots can involve facet plots with a map in each facet, as shown in Figure 1.2 .\n\n\nCode\nyear_labels <- c(\"SID74\" = \"1974 - 1978\", \"SID79\" = \"1979 - 1984\")\nnc.32119 |> select(SID74, SID79) |>\n    pivot_longer(starts_with(\"SID\")) -> nc_longer\nggplot() + geom_sf(data = nc_longer, aes(fill = value)) + \n  facet_wrap(~ name, ncol = 1, labeller = labeller(name = year_labels)) +\n  scale_y_continuous(breaks = 34:36) +\n  scale_fill_gradientn(colors = sf.colors(20)) +\n  theme(panel.grid.major = element_line(color = \"white\"))\n\n\n\n\n\nFigure 1.2: ggplot with facet maps\n\n\n\n\nAn interactive, leaflet-based map is obtained in Figure 1.3 .\n\n\nCode\nsuppressPackageStartupMessages(library(mapview))\nmapviewOptions(fgb = FALSE)\nnc.32119 |> mapview(zcol = \"BIR74\", legend = TRUE, col.regions = sf.colors)\n\n\n\n\n\n\nFigure 1.3: Interactive map created with mapview."
  },
  {
    "objectID": "01-hello.html#coordinate-reference-systems",
    "href": "01-hello.html#coordinate-reference-systems",
    "title": "1  Getting Started",
    "section": "1.2 Coordinate reference systems",
    "text": "1.2 Coordinate reference systems\nIn Figure 1.1 , the grey lines denote the graticule, a grid with lines along constant latitude or longitude. Clearly, these lines are not straight, which indicates that a projection of the data was used for which the x and y axis do not align with longitude and latitude. In Figure 1.3 we see that the north boundary of North Carolina is plotted as a straight line again, indicating that another projection was used.\nThe ellipsoidal coordinates of the graticule of Figure 1.1 are associated with a particular datum (here: NAD27), which implicates a set of rules what the shape of the Earth is and how it is attached to the Earth (to which point of the Earth is the origin associated, and how is it directed). If one would measure coordinates with a GPS device (e.g. a mobile phone) it would typically report coordinates associated with the WGS84 datum, which can be around 30 m different from the identical coordinate values when associated with NAD27.\nProjections describe how we go back and forth between\n\nellipsoidal coordinates which are expressed as degrees latitude and longitude, pointing to locations on a shape approximating the Earth’s shape (an ellipsoid or spheroid), and\nprojected coordinates which are coordinates on a flat, two-dimensional coordinate system, used when plotting maps.\n\nDatums transformations are associated with moving from one datum to another. Both topics are covered by spatial reference systems are described in more detail in Chapter 2."
  },
  {
    "objectID": "01-hello.html#sec-rasterize",
    "href": "01-hello.html#sec-rasterize",
    "title": "1  Getting Started",
    "section": "1.3 Raster and vector data",
    "text": "1.3 Raster and vector data\nPolygon, point and line geometries are examples of vector data: point coordinates describe the “exact” locations that can be anywhere. Raster data on the other hand describe data where values are aligned on a raster, meaning on a regularly laid out lattice of usually square pixels. An example is shown in Figure 1.4 .\n\n\nCode\nlibrary(stars)\npar(mfrow = c(2, 2))\npar(mar = rep(1, 4))\ntif <- system.file(\"tif/L7_ETMs.tif\", package = \"stars\")\nx <- read_stars(tif)[,,,1]\nimage(x, main = \"(a)\")\nimage(x[,1:10,1:10], text_values = TRUE, border = 'grey', main = \"(b)\")\nimage(x, main = \"(c)\")\nset.seed(131)\npts <- st_sample(st_as_sfc(st_bbox(x)), 3)\nplot(pts, add = TRUE, pch = 3, col = 'blue')\nimage(x, main = \"(d)\")\nplot(st_buffer(pts, 500), add = TRUE, pch = 3, border = 'blue', col = NA, lwd = 2)\n\n\n\n\n\nFigure 1.4: raster maps: Landsat-7 blue band, with color values derived from data values (a), the top-left 10x10 sub-image from (a) with numeric values shown (b), and overlayed by two different types of vector data: three sample points (c), and a 500m radius around the points represented as polygons (d)\n\n\n\n\nVector and raster data can be combined in different ways; for instance we can query the raster at the three points of Figure 1.4(c)\n\n\nCode\nst_extract(x, pts)\n# Simple feature collection with 3 features and 1 field\n# Geometry type: POINT\n# Dimension:     XY\n# Bounding box:  xmin: 290000 ymin: 9110000 xmax: 292000 ymax: 9120000\n# Projected CRS: SIRGAS 2000 / UTM zone 25S\n#   L7_ETMs.tif               geometry\n# 1          80 POINT (290830 9114499)\n# 2          58 POINT (290019 9119219)\n# 3          63 POINT (291693 9116038)\n\n\nor compute an aggregate, such as the average, over arbitrary regions such as the circles shown in Figure 1.4(d):\n\n\nCode\naggregate(x, st_buffer(pts, 500), FUN = mean) |> st_as_sf()\n# Simple feature collection with 3 features and 1 field\n# Geometry type: POLYGON\n# Dimension:     XY\n# Bounding box:  xmin: 290000 ymin: 9110000 xmax: 292000 ymax: 9120000\n# Projected CRS: SIRGAS 2000 / UTM zone 25S\n#     V1                       geometry\n# 1 77.2 POLYGON ((291330 9114499, 2...\n# 2 60.1 POLYGON ((290519 9119219, 2...\n# 3 71.6 POLYGON ((292193 9116038, 2...\n\n\nOther raster-to-vector conversions are discussed in Section 7.5 and include:\n\nconverting raster pixels into point values\nconverting raster pixels into small polygons, possibly merging polygons with identical values (“polygonize”)\ngenerating lines or polygons that delineate continuous pixel areas with a certain value range (“contour”)\n\n\n\nCode\nplot(st_rasterize(nc[\"BIR74\"], dx = 0.1), col = sf.colors(), breaks = \"equal\")\n\n\n\n\n\nFigure 1.5: map obtained by rasterizing county total number of births for the period 1974-1979 shown in figure 1.1\n\n\n\n\nVector-to-raster conversions can be as simple as rasterizing polygons, as shown in Figure 1.5 . Other, more general vector-to-raster conversions that may involve statistical modelling include:\n\ninterpolation of point values to points on a regular grid (Chapter 12)\nestimating densities of points over a regular grid (Chapter 11)\narea-weighted interpolation of polygon values to grid cells (Section 5.3)\ndirect rasterization of points, lines or polygons (Section 7.5)"
  },
  {
    "objectID": "01-hello.html#raster-types",
    "href": "01-hello.html#raster-types",
    "title": "1  Getting Started",
    "section": "1.4 Raster types",
    "text": "1.4 Raster types\nRaster dimensions describe how the rows and columns relate to spatial coordinates. Figure 1.6 shows a number of different possibilities.\n\n\nCode\nx <- 1:5\ny <- 1:4\nd <- st_dimensions(x = x, y = y, .raster = c(\"x\", \"y\"))\nm <- matrix(runif(20),5,4)\nr1 <- st_as_stars(r = m, dimensions = d)\n\nr <- attr(d, \"raster\")\nr$affine <- c(0.2, -0.2)\nattr(d, \"raster\") = r\nr2 <- st_as_stars(r = m, dimensions = d)\n\nr <- attr(d, \"raster\")\nr$affine <- c(0.1, -0.3)\nattr(d, \"raster\") = r\nr3 = st_as_stars(r = m, dimensions = d)\n\nx <- c(1, 2, 3.5, 5, 6)\ny <- c(1, 1.5, 3, 3.5)\nd <- st_dimensions(x = x, y = y, .raster = c(\"x\", \"y\"))\nr4 <- st_as_stars(r = m, dimensions = d)\n\ngrd <- st_make_grid(cellsize = c(10,10), offset = c(-130,10), n = c(8,5), crs = st_crs('OGC:CRS84'))\nr5 <- st_transform(grd, \"+proj=laea +lon_0=-70 +lat_0=35\")\n\npar(mfrow = c(2,3), mar = c(0.1, 1, 1.1, 1))\nr1 <- st_make_grid(cellsize = c(1,1), n = c(5,4), offset = c(0,0))\nplot(r1, main = \"regular\")\nplot(st_geometry(st_as_sf(r2)), main = \"rotated\")\nplot(st_geometry(st_as_sf(r3)), main = \"sheared\")\nplot(st_geometry(st_as_sf(r4, as_points = FALSE)), main = \"rectilinear\")\nplot(st_geometry((r5)), main = \"curvilinear\")\n\n\n\n\n\nFigure 1.6: various raster types\n\n\n\n\nRegular rasters like shown in Figure 1.6 have a constant, not necessarily square cell size and axes aligned with the x and y (Easting and Northing) axes. Other raster types include those where the axes are no longer aligned with x and y (rotated), where axes are no longer perpendicular (sheared), or where cell size varies along a dimension (rectilinear). Finally, curvilinear rasters have cell size and/or direction properties that are no longer independent from the other raster dimension.\nWhen a raster that is regular in a given coordinate reference system is projected to another raster while keeping each raster cell in tact, it changes shape and may become rectilinear (e.g. when going from ellipsoidal coordinates to Mercator, as in Figure 1.3) or curvilinear (e.g. when going from ellipsoidal coordinates to Lambert Conic Conformal, as in Figure 1.1). When reverting this procedure, one can recover the exact original raster.\nCreating a new, regular grid in the new projection is called raster (or image) reprojection or warping (Section 7.7). This process is lossy, irreversible, and may need to be informed whether raster cells should be interpolated, averaged or summed, whether they denote categorical variables, or whether resampling using nearest neighbours should be used; see also Section 1.6."
  },
  {
    "objectID": "01-hello.html#time-series-arrays-data-cubes",
    "href": "01-hello.html#time-series-arrays-data-cubes",
    "title": "1  Getting Started",
    "section": "1.5 Time series, arrays, data cubes",
    "text": "1.5 Time series, arrays, data cubes\nA lot of spatial data is not just spatial, but in addition temporal. Just like any observation is associated with an observation location, it is associated with an observation time or period. The dataset on the North Carolina counties shown above contains disease cases counted over two time periods, shown in Figure 1.2). Although the original dataset has these variables in two different columns, for plotting them these columns had to be stacked first, while repeating the associated geometries - a form called tidy by (Wickham 2014). When we have longer time series associated with geometries, neither option - distributing time over multiple columns, or stacking columns while repeating geometries - works well, and a more effective way of storing such data would be a matrix or array, where one dimension refers to time, and the other(s) to space. The natural way for image or raster data is already to store them in matrices; time series of rasters then lead to a three-dimensional array. The general term for such data is a (spatiotemporal) data cube, where cube refers to arrays with any number of dimensions. Data cubes can refer to both raster and vector data, examples are given in Chapter 6."
  },
  {
    "objectID": "01-hello.html#sec-support",
    "href": "01-hello.html#sec-support",
    "title": "1  Getting Started",
    "section": "1.6 Support",
    "text": "1.6 Support\nWhen we have spatial data with geometries that are not points but collections of points (multi-points, lines, polygons, pixels), then the attributes associated with these geometries has one of several different relationships to them. Attributes can have:\n\na constant value for every point of the geometry\na value that is unique to only this geometry, describing its identity\na single value that is an aggregate over all points of the geometry\n\nAn example of a constant is land use or bedrock type of a polygon. An example of an identity is a county name. An example of an aggregate is the number of births over a given period of time, of a county.\nThe area with to which an attribute value refers to is called its support: aggregate properties have “block” (or polygon, or line) support, constant properties have “point” support (they apply to every point). Support matters when we manipulate the data. For instance, Figure 1.5 was derived from a variable that has polygon support: the number of births per county. Rasterizing these values gives pixels with values that are associated to counties. The result of the rasterization is a meaningless map: the numeric values (“birth totals”) are not associated with the raster cells, and the county boundaries are no longer present. Totals of birth for the whole state can no longer be recovered from the pixel values. Ignoring support can easily lead to meaningless results. Chapter 5 discusses this further.\nRaster cell values may have point support, e.g. when the cell records the elevation of the point at the cell centre in a digital elevation model, or cell support, e.g. when a satellite image pixel gives the color value averaged over (an area similar to the) pixel. Most file formats do not provide this information, yet it may be important to know when aggregating, regridding or warping rasters (Section 7.7)."
  },
  {
    "objectID": "01-hello.html#spatial-data-science-software",
    "href": "01-hello.html#spatial-data-science-software",
    "title": "1  Getting Started",
    "section": "1.7 Spatial data science software",
    "text": "1.7 Spatial data science software\nAlthough this book largely uses R and R packages for spatial data science, a number of these packages use software libraries that were not developed for R specifically. As an example, the dependency of R package sf on other R packages and system libraries is shown in Figure 1.7 .\n\n\n\n\n\nFigure 1.7: sf and its dependencies; arrows indicate strong dependency, dashed arrows weak dependency\n\n\n\n\nThe C or C++ libraries used (GDAL, GEOS, PROJ, liblwgeom, s2geometry, NetCDF, udunits2) are all developed, maintained and used by (spatial) data science communities that are large and mostly different from the R community. By using these libraries, R users share how we understand what we are doing with these other communities. Because R, Python and Julia provide interactive interfaces to this software, many users get closer to these libraries than do users of other software based on these libraries. The first part of this book describes many of the concepts implemented in these libraries, which is relevant to spatial data science in general.\n\nGDAL\nGDAL (“Geospatial Data Abstraction Library”) can be seen as the Swiss army knife of spatial data; besides for R it is being used in Python, QGIS, PostGIS, and more than 100 other software projects.\nGDAL is a “library of libraries” – in order to read all these data sources it needs a large number of other libraries. It typically links to over 100 other libraries, each of which provides access to e.g. a particular data file format, database access, or web service.\nBinary R packages distributed by CRAN contain only statically linked code: CRAN does not want to make any assumptions about presence of third-party libraries on the host system. As a consequence, when the sf package is installed in binary form from CRAN, it includes a copy of all the required external libraries as well as their dependencies, which may amount to 100 Mb.\n\n\nPROJ\nPROJ (or PR\\(\\phi\\)J) is a library for cartographic projections and datum transformations: it converts spatial coordinates from one coordinate reference system to another. It comes with a large database of known projections and access to datum grids (high-precision pre-calculated values for datum transformations). It aligns with an international standard for coordinate reference systems (Lott 2015). Chapter 2 deals with coordinate systems, and PROJ.\n\n\nGEOS and s2geometry\nGEOS (“Geometry Engine Open Source”) and s2geometry are two libraries for geometric operations. They are used to find measures (length, area, distance), and calculate predicates (do two geometries have any points in common?) or new geometries (which points do these two geometries have in common?). GEOS does this for flat, two-dimensional space (indicated by \\(R^2\\)), s2geometry does this for geometries on the sphere (indicated by \\(S^2\\)). Chapter 2 introduces coordinate reference systems, and Chapter 4 discusses more about the differences between working with these two spaces.\n\n\nNetCDF, udunits2, liblwgeom\nNetCDF (UCAR 2020) refers to a file format as well as a C library for reading and writing NetCDF files. It allows the definition of arrays of any dimensionality, and is widely used for spatial and spatiotemporal information, especially in the (climate) modelling communities. Udunits2 (UCAR 2014; Pebesma et al. 2022) is a database and software library for units of measurement that allows the conversion of units, handles derived units, and supports user-defined units. The liblwgeom “library” is a software component of PostGIS (Obe and Hsu 2015) that contains several routines missing from GDAL or GEOS, including convenient access to GeographicLib routines (Karney 2013) that ship with PROJ."
  },
  {
    "objectID": "01-hello.html#exercises",
    "href": "01-hello.html#exercises",
    "title": "1  Getting Started",
    "section": "1.8 Exercises",
    "text": "1.8 Exercises\n\nList five differences between raster and vector data. \nIn addition to those listed below Figure 1.1 , list five further graphical components that are often found on a map. \nIn your own words, why is the numeric information shown in Figure 1.5) misleading (or meaningless ? \nUnder which conditions would you expect strong differences when doing geometrical operations on \\(S^2\\), compared to doing them on \\(R^2\\)? \n\n\n\n\n\nKarney, Charles FF. 2013. “Algorithms for Geodesics.” Journal of Geodesy 87 (1): 43–55. https://link.springer.com/content/pdf/10.1007/s00190-012-0578-z.pdf.\n\n\nLott, Roger. 2015. “Geographic Information-Well-Known Text Representation of Coordinate Reference Systems.” Open Geospatial Consortium.http://docs.opengeospatial.org/is/12-063r5/12-063r5.html .\n\n\nObe, Regina O, and Leo S Hsu. 2015. PostGIS in Action. Manning Publications Co.\n\n\nPebesma, Edzer, Thomas Mailund, Tomasz Kalinowski, and Iñaki Ucar. 2022. Units: Measurement Units for r Vectors. https://github.com/r-quantities/units/.\n\n\nUCAR. 2014. UDUNITS 2.2.26 Manual. https://www.unidata.ucar.edu/software/udunits/udunits-current/doc/udunits/udunits2.html.\n\n\n———. 2020. The NetCDF User’s Guide. https://www.unidata.ucar.edu/software/netcdf/docs/user_guide.html.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (1).https://www.jstatsoft.org/article/view/v059i10 .\n\n\nWickham, Hadley, and Garret Grolemund. 2017. R for Data Science. O’Reilly. http://r4ds.had.co.nz/."
  },
  {
    "objectID": "02-Spaces.html",
    "href": "02-Spaces.html",
    "title": "2  Coordinates",
    "section": "",
    "text": "“Data are not just numbers, they are numbers with a context”; “In data analysis, context provides meaning” (Cobb and Moore 1997)\nBefore we can try to understand geometries like points, lines, polygons, coverage and grids, it is useful to review coordinate systems so that we have an idea what exactly coordinates of a point reflect. For spatial data, the location of observations are characterized by coordinates, and coordinates are defined in a coordinate system. Different coordinate systems can be used for this, and the most important difference is whether coordinates are defined over a 2-dimensional or 3-dimensional space referenced to orthogonal axes (Cartesian coordinates), or using distance and directions (polar coordinates, spherical and ellipsoidal coordinates). Besides a location of observation, all observations are associated with time of observation, and so time coordinate systems are also briefly discussed. First we will briefly review quantities, to learn what units and datum are."
  },
  {
    "objectID": "02-Spaces.html#sec-units",
    "href": "02-Spaces.html#sec-units",
    "title": "2  Coordinates",
    "section": "2.1 Quantities, units, datum",
    "text": "2.1 Quantities, units, datum\nThe VIM (“International Vocabulary of Metrology”, BIPM et al. (2012)) defines a quantity as a “property of a phenomenon, body, or substance, where the property has a magnitude that can be expressed as a number and a reference”, where “[a] reference can be a measurement unit, a measurement procedure, a reference material, or a combination of such.”\nAlthough one could argue whether all data is constituted of quantities, there is no need to argue that proper data handling requires that numbers (or symbols) are accompanied by information on what they mean, in particular what they refer to.\nA measurement system consist of base units for base quantities, and derived units for derived quantities. For instance, the SI system of units (Bureau International des Poids et Mesures 2006) consist of the seven base units length (metre, m), mass (kilogram, kg), time (second, s), electric current (ampere, A), thermodynamic temperature (Kelvin, K), amount of substance (mole, mol), and luminous intensity (candela, cd). Derived units are composed of products of integer powers of base units; examples are speed (\\(\\mbox{m}~\\mbox{s}^{-1}\\)), density (\\(\\mbox{kg}~\\mbox{m}^{-3}\\)) and area (\\(\\mbox{m}^2\\)).\nThe special case of unitless measures can refer to either cases where units cancel out (e.g. mass fraction: kg/kg, or angle measured in rad: m/m) or to cases where objects or events were counted (e.g. 5 apples). Adding an angle to a count of apples would not make sense; adding 5 apples to 3 oranges may make sense if the result is reinterpreted as a superclass, e.g. as pieces of fruit. Many data variables have units that are not expressible as SI base units or derived units. Hand (2004) discusses many such measurement scales, e.g. those used to measure intelligence in social sciences, in the context of measurement units.\nFor many quantities, the natural origin of values is zero. This works for amounts, where differences between amounts result in meaningful negative values. For locations and times, differences have a natural zero interpretation: distance and duration. Absolute location (position) and time need a fixed origin, from which we can meaningfully measure other absolute space-time points: we call this a datum. For space, a datum involves more than one dimension. The combination of a datum and a measurement unit (scale) is a reference system.\nWe will now elaborate how spatial locations can be expressed as either ellipsoidal or Cartesian coordinates. The next sections will deal with temporal and spatial reference systems, and how they are handled in R."
  },
  {
    "objectID": "02-Spaces.html#ellipsoidal-coordinates",
    "href": "02-Spaces.html#ellipsoidal-coordinates",
    "title": "2  Coordinates",
    "section": "2.2 Ellipsoidal coordinates",
    "text": "2.2 Ellipsoidal coordinates\n\n\nCode\npar(mar = rep(0,4))\nplot(3, 4, xlim = c(-6,6), ylim = c(-6,6), asp = 1)\naxis(1, pos = 0, at = 0:6)\naxis(2, pos = 0, at = -6:6)\nxd <- seq(-5, 5, by = .1)\nlines(xd, sqrt(25 - xd^2), col = 'grey')\nlines(xd, -sqrt(25 - xd^2), col = 'grey')\narrows(0, 0, 3, 4, col = 'red', length = .15, angle = 20)\ntext(1.5, 2.7, label = \"r\", col = 'red')\nxd <- seq(3/5, 1, by = .1)\nlines(xd, sqrt(1 - xd^2), col = 'red')\ntext(1.2, 0.5, label = parse(text = \"phi\"), col = 'red')\nlines(c(3,3), c(0,4), lty = 2, col = 'blue')\nlines(c(0,3), c(4,4), lty = 2, col = 'blue')\ntext(3.3, 0.3, label = \"x\", col = 'blue')\ntext(0.3, 4.3, label = \"y\", col = 'blue')\n\n\n\n\n\nFigure 2.1: Two-dimensional polar (red) and Cartesian (blue) coordinates\n\n\n\n\nFigure 2.1 shows both polar and Cartesian coordinates for a two-dimensional situation. In Cartesian coordinates, the point shown is \\((x,y) = (3,4)\\), for polar coordinates it is \\((r,\\phi) = (5, \\mbox{arctan}(4/3))\\), where \\(\\mbox{arctan}(4/3)\\) is approximately \\(0.93\\) radians, or \\(53^{\\circ}\\). Note that \\(x\\), \\(y\\) and \\(r\\) all have length units, where \\(\\phi\\) is an angle (a unitless length/length ratio). Converting back and forth between Cartesian and polar coordinates is trivial, as\n\\[x = r~\\mbox{cos} \\phi,\\]\n\\[y = r~\\mbox{sin} \\phi,\\]\n\\[r = \\sqrt{x^2 + y^2}, \\ \\mbox{and}\\]\n\\[\\phi = \\mbox{atan2}(y, x)\\]\nwhere \\(\\mbox{atan2}\\) is used in favor of \\(\\mbox{atan}(y/x)\\) to take care of the right quadrant.\n\nEllipsoidal coordinates\nIn three dimensions, where Cartesian coordinates are expressed as \\((x,y,z)\\), spherical coordinates are the three-dimensional equivalent of polar coordinates and can be expressed as \\((r,\\lambda,\\phi)\\), where:\n\n\\(r\\) is the radius of the sphere,\n\\(\\lambda\\) is the longitude, measured in the \\((x,y)\\) plane counter-clockwise from positive \\(x\\), and\n\\(\\phi\\) is the latitude, the angle between the vector and the \\((x,y)\\) plane.\n\nFigure 2.2 illustrates Cartesian geocentric and ellipsoidal coordinates.\n\n\nCode\nsuppressPackageStartupMessages(library(sf))\ne <- cbind(-90:90,0) # equator\nf1 <- rbind(cbind(0, -90:90)) # 0/antimerid.\nf2 <- rbind(cbind(90, -90:90), cbind(270, 90:-90))# +/- 90\neq <- st_sfc(st_linestring(e), st_linestring(f1), st_linestring(f2), crs='OGC:CRS84')\n\ngeoc <- st_transform(eq, \"+proj=geocent\")\ncc <- rbind(geoc[[1]], NA, geoc[[2]], NA, geoc[[3]])\nfrom3d <- function(x, offset, maxz, minz) {\n    x = x[,c(2,3,1)] + offset # move to y right, x up, z backw\n    x[,2] = x[,2] - maxz      # shift y to left\n    d = maxz\n    z = x[,3] - minz + offset\n    x[,1] = x[,1] * (d/z)\n    x[,2] = x[,2] * (d/z)\n    x[,1:2]\n}\nmaxz <- max(cc[,3], na.rm = TRUE)\nminz <- min(cc[,3], na.rm = TRUE)\noffset <- 3e7\ncirc <- from3d(cc, offset, maxz, minz)\nmx <- max(cc, na.rm = TRUE) * 1.1\nx <- rbind(c(0, 0, 0), c(mx, 0, 0))\ny <- rbind(c(0, 0, 0), c(0, mx, 0))\nz <- rbind(c(0, 0, 0), c(0, 0, mx))\nll <- rbind(x, NA, y, NA, z)\nl0 <-  from3d(ll, offset, maxz, minz)\nmx <- max(cc, na.rm = TRUE) * 1.2\nx <- rbind(c(0, 0, 0), c(mx, 0, 0))\ny <- rbind(c(0, 0, 0), c(0, mx, 0))\nz <- rbind(c(0, 0, 0), c(0, 0, mx))\nll <- rbind(x, NA, y, NA, z)\nl <-  from3d(ll, offset, maxz, minz)\n\npar(mfrow = c(1, 2))\npar(mar = rep(0,4))\nplot.new()\nplot.window(xlim = c(min(circ[,1],na.rm = TRUE), 3607103*1.02), \n                        ylim = c(min(circ[,2],na.rm = TRUE), 2873898*1.1), asp = 1)\nlines(circ)\nlines(l0)\ntext(l[c(2,5,8),], labels = c(\"x\", \"y\", \"z\"), col = 'red')\n# add POINT(60 47)\np <- st_as_sfc(\"POINT(60 47)\", crs = 'OGC:CRS84') |> st_transform(\"+proj=geocent\")\np <- p[[1]]\npts <- rbind(c(0,0,0), c(p[1],0,0), c(p[1],p[2],0), c(p[1],p[2],p[2]))\nptsl <- from3d(pts, offset, maxz, minz)\nlines(ptsl, col = 'blue', lty = 2, lwd = 2)\npoints(ptsl[4,1], ptsl[4,2], col = 'blue', cex = 1, pch = 16)\n\nplot.new()\nplot.window(xlim = c(min(circ[,1],na.rm = TRUE), 3607103*1.02), \n                        ylim = c(min(circ[,2],na.rm = TRUE), 2873898*1.1), asp = 1)\nlines(circ)\n\np <- st_as_sfc(\"POINT(60 47)\", crs = 'OGC:CRS84') |> st_transform(\"+proj=geocent\")\np <- p[[1]]\npts <- rbind(c(0,0,0), c(p[1],p[2],p[3]))\npt <-  from3d(pts, offset, maxz, minz)\nlines(pt)\npoints(pt[2,1], pt[2,2], col = 'blue', cex = 1, pch = 16)\n\np0 <- st_as_sfc(\"POINT(60 0)\", crs = 'OGC:CRS84') |> st_transform(\"+proj=geocent\")\np0 <- p0[[1]]\npts <- rbind(c(0,0,0), c(p0[1],p0[2],p0[3]))\npt <-  from3d(pts, offset, maxz, minz)\nlines(pt)\n\np0 <- st_as_sfc(\"POINT(0 0)\", crs = 'OGC:CRS84') |> st_transform(\"+proj=geocent\")\np0 <- p0[[1]]\npts <- rbind(c(0,0,0), c(p0[1],p0[2],p0[3]))\npt <-  from3d(pts, offset, maxz, minz)\nlines(pt)\n\np0 <- st_as_sfc(\"POINT(0 90)\", crs = 'OGC:CRS84') |> st_transform(\"+proj=geocent\")\np0 <- p0[[1]]\npts <- rbind(c(0,0,0), c(p0[1],p0[2],p0[3]))\npt <-  from3d(pts, offset, maxz, minz)\nlines(pt, lty = 2)\n\np0 <- st_as_sfc(\"POINT(90 0)\", crs = 'OGC:CRS84') |> st_transform(\"+proj=geocent\")\np0 <- p0[[1]]\npts <- rbind(c(0,0,0), c(p0[1],p0[2],p0[3]))\npt <-  from3d(pts, offset, maxz, minz)\nlines(pt, lty = 2)\n\nf1 <- rbind(cbind(0:60, 0))\narc <- st_sfc(st_linestring(f1), crs='OGC:CRS84')\ngeoc <- st_transform(arc, \"+proj=geocent\")\ncc <- rbind(geoc[[1]])\ncirc <- from3d(cc, offset, maxz, minz)\nlines(circ, col = 'red', lwd = 2, lty = 2)\n\nf1 <- rbind(cbind(60, 0:47))\narc <- st_sfc(st_linestring(f1), crs='OGC:CRS84')\ngeoc <- st_transform(arc, \"+proj=geocent\")\ncc <- rbind(geoc[[1]])\ncirc <- from3d(cc, offset, maxz, minz)\nlines(circ, col = 'blue', lwd = 2, lty = 2)\n\ntext(pt[1,1]+100000, pt[1,2]+50000, labels = expression(phi), col = 'blue') # lat\ntext(pt[1,1]+20000, pt[1,2]-50000, labels = expression(lambda), col = 'red') # lng\n\n\n\n\n\nFigure 2.2: Cartesian geocentric coordinates (left) measure three distances, ellipsoidal coordinates (right) measure two angles, and possibly an ellipsoidal height\n\n\n\n\n\\(\\lambda\\) typically varies between \\(-180^{\\circ}\\) and \\(180^{\\circ}\\) (or alternatively from \\(0^{\\circ}\\) to \\(360^{\\circ}\\)), \\(\\phi\\) from \\(-90^{\\circ}\\) to \\(90^{\\circ}\\). When we are only interested in points on a sphere with given radius, we can drop \\(r\\): \\((\\lambda,\\phi)\\) now suffice to identify any point.\nIt should be noted that this is just a definition, one could for instance also choose to measure polar angle, the angle between the vector and \\(z\\), instead of latitude. There is also a long tradition of specifying points as \\((\\phi,\\lambda)\\) but throughout this book we will stick to longitude-latitude, \\((\\lambda,\\phi)\\). The point denoted in Figure 2.2\nhas \\((\\lambda,\\phi)\\) or ellipsoidal coordinates with values\n\n\nCode\np <- st_as_sfc(\"POINT(60 47)\", crs = 'OGC:CRS84')\np[[1]]\n# POINT (60 47)\n\n\nwith angles measured in degrees, and geocentric coordinates\n\n\nCode\np <- st_as_sfc(\"POINT(60 47)\", crs = 'OGC:CRS84') |> st_transform(\"+proj=geocent\")\np[[1]]\n# POINT Z (2178844 3773868 4641765)\n\n\nwith unit metres.\nFor points on an ellipse, there are two ways in which angle can be expressed (Figure 2.3) : measured from the center of the ellipse (\\(\\psi\\)), or measured perpendicular to the tangent on the ellipse at the target point (\\(\\phi\\)).\n\n\nCode\npar(mar = rep(0,4))\nx <- 4\ny <- 5/8 * sqrt(48)\nplot(x, y, xlim = c(-6,6), ylim = c(-8,8), asp = 1)\naxis(1, pos = 0, at = 0:9)\naxis(2, pos = 0, at = -5:5)\nxd <- seq(-8, 8, by = .1)\nlines(xd, 5/8 * sqrt(64 - xd^2), col = 'grey')\nlines(xd, 5/8 * -sqrt(64 - xd^2), col = 'grey')\narrows(0, 0, x, y, col = 'red', length = .15, angle = 20)\nb <- (x * 25) / (-y * 64)\na <- y - x * b\nabline(a, b, col = 'grey')\nb <- -1/b\nx0 <- x - y / b\narrows(x0, 0, x, y, col = 'blue', length = .15, angle = 20)\ntext(1.2, 0.5, label = parse(text = \"psi\"), col = 'red')\ntext(3, 0.5, label = parse(text = \"phi\"), col = 'blue')\n\n\n\n\n\nFigure 2.3: Angles on an ellipse: geodetic (blue) and geocentric (red) latitude\n\n\n\n\nThe most commonly used parametric model for the Earth is an ellipsoid of revolution, an ellipsoid with two equal semi-axes (Iliffe and Lott 2008). In effect, this is a flattened sphere (or spheroid): the distance between the poles is (slightly: about 0.33%) smaller than the distance between two opposite points on the equator. Under this model, longitude is always measured along a circle (as in Figure 2.2) , and latitude along an ellipse (as in Figure 2.3) . If we think of Figure 2.3 as a cross section of the Earth passing through the poles, the geodetic latitude measure \\(\\phi\\) is the one used when no further specification is given. The latitude measure \\(\\psi\\) is called the geocentric latitude.\nIn addition to longitude and latitude we can add altitude or elevation to define points that are not on the ellipsoid, and obtain a three dimensional space again. When defining altitude, we need to choose:\n\nwhere zero altitude is: on the ellipsoid, or relative to the surface approximating mean sea level (the geoid)?\nwhich direction is positive, and\nwhich direction is “straight up”: perpendicular to the ellipsoid surface, or in the direction perpendicular to the surface of the geoid?\n\nAll these choices may matter, depending on the application area and required measurement accuracies.\nThe shape of the Earth is not a perfect ellipsoid. As a consequence, several ellipsoids with different shape parameters and bound to the Earth in different ways are being used. Such ellipsoids are called datums, and are briefly discussed in Section 2.3, along with coordinate reference systems.\n\n\nProjected coordinates, distances\nBecause paper maps and computer screens are much more abundant and practical than globes, most of the time we look at spatial data we see it projected: drawn on a flat, two-dimensional surface. Computing the locations in a two-dimensional space means that we work with projected coordinates. Projecting ellipsoidal coordinates means that shapes, directions, areas, or even all three, are distorted (Iliffe and Lott 2008).\nDistances between two points \\(p_i\\) and \\(p_j\\) in Cartesian coordinates are computed as Euclidean distances, in two dimensions by\n\\[d_{ij} = \\sqrt{(x_i-x_j)^2+(y_i-y_j)^2}\\]\nwith \\(p_i = (x_i,y_i)\\) and in three dimensions by\n\\[d_{ij} = \\sqrt{(x_i-x_j)^2+(y_i-y_j)^2+(z_i-z_j)^2}\\]\nwith \\(p_i = (x_i,y_i,z_i).\\) These distances represent the length of a straight line between two points \\(i\\) and \\(j\\).\nFor two points on a circle, the length of the arc of two points \\(c_1 = (r,{\\phi}_i)\\) and \\(c_2 = (r, \\phi_2)\\) is\n\\[s_{ij}=r~|\\phi_1-\\phi_2| = r ~\\theta\\]\nwith \\(\\theta\\) the angle between \\(\\phi_1\\) and \\(\\phi_2\\) in radians. For very small values of \\(\\theta\\), we will have \\(s_{ij} \\approx d_{ij}\\), because a small arc segment is nearly straight.\nFor two points \\(p_1 = (\\lambda_1,\\phi_1)\\) and \\(p_2 = (\\lambda_2,\\phi_2)\\) on a sphere with radius \\(r'\\), the great circle distance is the arc length between \\(p_1\\) and \\(p_2\\) on the circle that passes through \\(p_1\\) and \\(p_2\\) and has the center of the sphere as its center, and is given by \\(s_{12} = r ~ \\theta_{12}\\) with\n\\[\\theta_{12} = \\arccos(\\sin \\phi_1 \\cdot \\sin \\phi_2 + \\cos \\phi_1 \\cdot \\cos \\phi_2 \\cdot \\cos(|\\lambda_1-\\lambda_2|))\\]\nthe angle between \\(p_1\\) and \\(p_2\\), in radians.\nArc distances between two points on a spheroid are more complicated to compute; a good discussion on the topic and an explanation of the method implemented in GeographicLib (part of PROJ) is given in Karney (2013).\nTo show that these distance measures actually give different values, we computed them for the distance Berlin - Paris. Here, gc_ refers to ellipsoidal and spherical great circle distances, straight_ refers to straight line, Euclidean distances between Cartesian geocentric coordinates associated on the WGS84 ellipse and sphere:\n\n\nCode\npts <- st_sfc(st_point(c(13.4050, 52.5200)), st_point(c(2.3522, 48.8566)), crs = 'OGC:CRS84')\ns2_orig <- sf_use_s2(FALSE)\nd1 <- c(gc_ellipse = st_distance(pts)[1,2])\nsf_use_s2(TRUE)\n# or, without using s2, use st_distance(st_transform(pts, \"+proj=longlat +ellps=sphere\"))\nd2 <- c(gc_sphere = st_distance(pts)[1,2])\np <- st_transform(pts, \"+proj=geocent\")\nd3 <- c(straight_ellipse = units::set_units(sqrt(sum(apply(do.call(cbind, p), 1, diff)^2)), m))\np2 <- st_transform(pts, \"+proj=longlat +ellps=sphere\") |> st_transform(\"+proj=geocent\")\nd4 <- c(straight_sphere = units::set_units(sqrt(sum(apply(do.call(cbind, p2), 1, diff)^2)), m))\nres <- c(d1,d3,d2,d4)\n# print as km, re-add names:\nsf_use_s2(s2_orig) # back to what it was before changing\nres |> units::set_units(km) |> setNames(names(res)) |> print(digits = 5)\n# Units: [km]\n#       gc_ellipse straight_ellipse        gc_sphere \n#           879.70           879.00           877.46 \n#  straight_sphere \n#           876.77\n\n\n\n\nBounded and unbounded spaces\nTwo-dimensional and three-dimensional Euclidean spaces (\\(R^2\\) and \\(R^3\\)) are unbounded: every line in this space has infinite length, distances, areas or volumes are unbounded. In contrast, spaces defined on a circle (\\(S^1\\)) or sphere (\\(S^2\\)) define a bounded set: there may be infinitely many points but the length and area of the circle and the radius, area and volume of a sphere are bound.\nThis may sound trivial, but leads to some interesting findings when handling spatial data. A polygon on \\(R^2\\) has unambiguously an inside and an outside. On a sphere, \\(S^2\\), any polygon divides the sphere in two parts, and which of these two is to be considered inside and which outside is ambiguous and needs to be defined e.g. by the traversal direction. Chapter 4 will further discuss consequences when working with geometries on \\(S^2\\)."
  },
  {
    "objectID": "02-Spaces.html#sec-crs",
    "href": "02-Spaces.html#sec-crs",
    "title": "2  Coordinates",
    "section": "2.3 Coordinate Reference Systems",
    "text": "2.3 Coordinate Reference Systems\nWe follow Lott (2015) when defining the following concepts (italics indicate literal quoting):\n\na coordinate system is a set of mathematical rules for specifying how coordinates are to be assigned to points,\na datum is a parameter or set of parameters that define the position of the origin, the scale, and the orientation of a coordinate system,\na geodetic datum is a datum describing the relationship of a two- or three-dimensional coordinate system to the Earth, and\na coordinate reference system is a coordinate system that is related to an object by a datum; for geodetic and vertical datums, the object will be the Earth.\n\nA readable text that further explains these concepts is Iliffe and Lott (2008).\nThe Earth does not follow a regular shape. The topography of the Earth is of course known to vary strongly, but also the surface formed by constant gravity at mean sea level, the geoid, is irregular. A commonly used model that is fit to the geoid is an ellipsoid of revolution, which is an ellipse with two identical minor axes. Fitting such an ellipsoid to the Earth gives a datum. However, fitting it to different areas, or based on different sets of reference points gives different fits, and hence different datums: a datum can for instance be fixed to a particular tectonic plate (like ETRS89), others can be globally fit (like WGS84). More local fits lead to smaller approximation errors.\nThe definitions above imply that coordinates in degrees longitude and latitude only have a meaning, i.e. can only be interpreted unambiguously as Earth coordinates, when the datum they are associated with is given.\nNote that for projected data, the data that were projected are associated with a reference ellipsoid (datum). Going from one projection to another without changing datum is called coordinate conversion, and passes through the ellipsoidal coordinates associated with the datum involved. This process is lossless and invertible: the parameters and equations associated with a conversion are not empirical. Recomputing coordinates in a new datum is called coordinate transformation, and is approximate: because datums are a result of model fitting, transformations between datums are models too that have been fit; the equations involved are empirical, and multiple transformation paths, based on different model fits and associated with different accuracies, are possible.\nPlate tectonics imply that within a global datum, fixed objects may have coordinates that change over time, and that transformations from one datum to another may be time-dependent. Earthquakes are a cause of more local and sudden changes in coordinates."
  },
  {
    "objectID": "02-Spaces.html#sec-projlib",
    "href": "02-Spaces.html#sec-projlib",
    "title": "2  Coordinates",
    "section": "2.4 PROJ and mapping accuracy",
    "text": "2.4 PROJ and mapping accuracy\nVery few living people active in open source geospatial software can remember the time before PROJ. PROJ (Evenden 1990) started in the 1970s as a Fortran project, and was released in 1985 as a C library for cartographic projections. It came with command line tools for direct and inverse projections, and could be linked to software to let it support (re)projection directly. Originally, datums were considered implicit, and no datum transformations were allowed.\nIn the early 2000s, PROJ was known as PROJ.4, after its never changing major version number. Amongst others motivated by the rise of GPS, the need for datum transformations increased and PROJ.4 was extended with rudimentary datum support. PROJ definitions for coordinate reference systems would look like this:\n+proj=utm +zone=33 +datum=WGS84 +units=m +no_defs\nwhere key=value pairs are preceded by a + and separated by a space. This form came to be known as “PROJ.4 string”, since the PROJ project stayed at version 4.x for several decades. Other datums would come with fields like:\n+ellps=bessel +towgs84=565.4,50.3,465.6,-0.399,0.344,-1.877,4.072\nindicating another ellipse, as well as the seven (or three) parameters for transforming from this ellipse to WGS84 (the “World Geodetic System 1984” global datum once popularized by GPS), effectively defining the datum in terms of a transformation to WGS84.\nAlong with PROJ.4 came a set of databases with known (registered) projections, from which the best known is the EPSG registry. National mapping agencies would provide (and update over time) their best guesses of +towgs84= parameters for national coordinate reference systems, and distribute it through the EPSG registry, which was part of PROJ distributions. For some transformations, datum grids were available and distributed as part of PROJ.4: such grids are raster maps that provide for every location pre-computed values for the shift in longitude and latitude, or elevation, for a particular datum transformation.\n\n\nCode\nlibrary(stars)\nlibrary(rnaturalearth)\ncountries110 <- st_as_sf(countries110)\nuk <- countries110[countries110$admin %in% c(\"United Kingdom\"),] |>\n        st_geometry()\nr <- read_stars(\"data/uk_os_OSTN15_NTv2_OSGBtoETRS.tif\")\n# r <- read_stars(\"/vsicurl/https://cdn.proj.org/uk_os_OSTN15_NTv2_OSGBtoETRS.tif\")\nhook <- function() {\n        plot(uk, border = \"orange\", col = NA, add = TRUE)\n}\nplot(r[,,,1:2], axes = TRUE, hook = hook, key.pos = 4)\n\n\n\n\n\nFigure 2.4: UK horizontal datum grid, from datum OSGB 1936 (EPSG:4277) to datum ETRS89 (EPSG:4258); units arc-seconds\n\n\n\n\n\n\nCode\nh <- read_stars(\"data/uk_os_OSGM15_GB.tif\")\n# h <- read_stars(\"/vsicurl/https://cdn.proj.org/uk_os_OSGM15_GB.tif\")\nplot(h, axes = TRUE, reset = FALSE)\nplot(uk, border = \"orange\", col = NA, add = TRUE)\n\n\n\n\n\nFigure 2.5: UK vertical datum grid, from ETRS89 (EPSG:4937) to ODN height (EPSG:5701), units m\n\n\n\n\nIn PROJ.4, every coordinate transformation had to go through a conversion to and from WGS84; even reprojecting data associated with a datum different from WGS84 had to go through a transformation to and from WGS84. The associated errors of up to 100 m were acceptable for mapping purposes for not too small areas, but applications that need high accuracy transformations, e.g. precision agriculture, planning flights of UAV’s, or object tracking are often more demanding in terms of accuracy.\nIn 2018, after a successful “GDAL Coordinate System Barn Raising” initiative, a number of companies profiting from the open source geospatial software stack supported the development of a more modern, mature coordinate transformation system in PROJ. Over a few years, PROJ.4 evolved through versions 5, 6, 7 and 8 and was hence renamed into PROJ (or PR\\(\\phi\\)J).\nThe most notable changes include:\n\nalthough PROJ.4 strings can still be used to initialize certain coordinate reference systems, they are no longer sufficient to represent all of them; a new format, WKT2 (described in next section) replaces it\nWGS84 as a hub datum is dropped: coordinate transformation no longer need to go through a particular datum\nmultiple conversion or transformation paths (so-called pipelines) to go from CRS A to CRS B are possible, and can be reported along with the associated accuracy; PROJ will by default use the most accurate one but user control is possible\ntransformation pipelines can chain an arbitrary number of elementary transformation operations, including swapping of axes and unit transformations\ndatum grids, of which there are now many more, are no longer distributed with the library but are accessible from a content delivery network (CDN); PROJ allows to enabling and disabling network access to access these grids, and only downloads the section of the grid actually needed, storing it in a cache on the user’s machine for future use\ncoordinate transformations receive support for epochs, time-dependent transformations (and hence: four-dimensional coordinates, including the source and target time)\nthe set of files with registered coordinate reference systems is handled in an SQLite database\ninstead of always handling axis order (longitude, latitude), when the authority defines differently this is now obeyed (with the most notable example: EPSG:4326 defines axis order to be latitude, longitude.)\n\nAll these points sound like massive improvements, and accuracies of transformation can be below 1 metre. An interesting point is the last: Where we could safely assume for many decades that spatial data with ellipsoidal coordinates would have axis order (longitude, latitude), this is no longer the case. We will see in Section 7.6.6 how to deal with this.\nExamples of a horizontal datum grids, downloaded from cdn.proj.org, are shown in Figure 2.4 and for a vertical datum grid in Figure 2.5 . Datum grids may carry per-pixel accuracy values."
  },
  {
    "objectID": "02-Spaces.html#sec-wkt2",
    "href": "02-Spaces.html#sec-wkt2",
    "title": "2  Coordinates",
    "section": "2.5 WKT-2",
    "text": "2.5 WKT-2\nLott (2015) describes a standard for encoding coordinate reference systems, as well as transformations between them using well known text; the standard (and format) is referred to informally as WKT-2. As mentioned above, GDAL and PROJ fully support this encoding. An example of WKT2 for CRS EPSG:4326 is:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\nThis shows a coordinate system with the axis order latitude, longitude , although in most practical cases the axis order used is longitude, latitude. The ensemble of WGS84 ellipsoids listed represents its various updates over time. Ambiguity about which of these ensemble members a particular dataset should use leads to an uncerainty of several meters. The coordinate reference system OGC:CRS84 disambiguates the axis order and explicitly states it to be longitude, latitude, and is a recommended alternative to disambiguate axis order. It is still associated with datum WGS84, so does not disambiguate the datum ensemble problem.\nA longer introduction on the history and recent changes in PROJ is given in Bivand (2020), building upon the work of Knudsen and Evers (2017) and Evers and Knudsen (2017)."
  },
  {
    "objectID": "02-Spaces.html#exercises",
    "href": "02-Spaces.html#exercises",
    "title": "2  Coordinates",
    "section": "2.6 Exercises",
    "text": "2.6 Exercises\nTry to solve the following exercises with R (without loading packages); try to use functions where appropriate:\n\nlist three geographic measures that do not have a natural zero origin \nconvert the \\((x,y)\\) points \\((10,2)\\), \\((-10,-2)\\), \\((10,-2)\\) and \\((0,10)\\) to polar coordinates\nconvert the polar \\((r,\\phi)\\) points \\((10,45^{\\circ})\\), \\((0,100^{\\circ})\\) and \\((5,359^{\\circ})\\) to Cartesian coordinates\nassuming the Earth is a sphere with a radius of 6371 km, compute for \\((\\lambda,\\phi)\\) points the great circle distance between \\((10,10)\\) and \\((11,10)\\), between \\((10,80)\\) and \\((11,80)\\), between \\((10,10)\\) and \\((10,11)\\) and between \\((10,80)\\) and \\((10,81)\\) (units: degree). What are the distance units?\n\n\n\n\n\nBIPM, IEC, ILAC IFCC, IUPAP IUPAC, and OIML ISO. 2012. “The International Vocabulary of Metrology–Basic and General Concepts and Associated Terms (VIM), 3rd Edn. JCGM 200: 2012.” JCGM (Joint Committee for Guides in Metrology). https://www.bipm.org/en/publications/guides/.\n\n\nBivand, Roger. 2020. Why Have CRS, Projections and Transformations Changed?https://rgdal.r-forge.r-project.org/articles/CRS_projections_transformations.html .\n\n\nBureau International des Poids et Mesures. 2006. The International System of Units (SI), 8th Edition. Organisation Intergouvernementale de la Convention du Mètre. https://www.bipm.org/en/publications/si-brochure/download.html.\n\n\nCobb, George W., and David S. Moore. 1997. “Mathematics, Statistics and Teaching.” The American Mathematical Monthly 104: 801–23.http://www.jstor.org/stable/2975286 .\n\n\nEvenden, Gerald I. 1990. Cartographic Projection Procedures for the UNIX Environment — a User’s Manual. http://download.osgeo.org/proj/OF90-284.pdf.\n\n\nEvers, Kristian, and Thomas Knudsen. 2017. Transformation Pipelines for PROJ.4. https://www.fig.net/resources/proceedings/fig_proceedings/fig2017/papers/iss6b/ISS6B_evers_knudsen_9156.pdf.\n\n\nHand, David J. 2004. Measurement: Theory and Practice. A Hodder Arnold Publication.\n\n\nIliffe, Jonathan, and Roger Lott. 2008. Datums and Map Projections for Remote Sensing, GIS, and Surveying. Whittles Pub. CRC Press, Scotland, UK.\n\n\nKarney, Charles FF. 2013. “Algorithms for Geodesics.” Journal of Geodesy 87 (1): 43–55. https://link.springer.com/content/pdf/10.1007/s00190-012-0578-z.pdf.\n\n\nKnudsen, Thomas, and Kristian Evers. 2017. Transformation Pipelines for PROJ.4. https://meetingorganizer.copernicus.org/EGU2017/EGU2017-8050.pdf.\n\n\nLott, Roger. 2015. “Geographic Information-Well-Known Text Representation of Coordinate Reference Systems.” Open Geospatial Consortium.http://docs.opengeospatial.org/is/12-063r5/12-063r5.html ."
  },
  {
    "objectID": "03-Geometries.html",
    "href": "03-Geometries.html",
    "title": "3  Geometries",
    "section": "",
    "text": "Having learned how we represent coordinates systems, we can define how geometries can be described using these coordinate systems. This chapter will explain:\nGeometries on the sphere are discussed in Chapter 4, rasters and other rectangular subdivisions of space are discussed in Chapter 6."
  },
  {
    "objectID": "03-Geometries.html#sec-simplefeatures",
    "href": "03-Geometries.html#sec-simplefeatures",
    "title": "3  Geometries",
    "section": "3.1 Simple feature geometries",
    "text": "3.1 Simple feature geometries\nSimple feature geometries are a way to describe the geometries of features. By features we mean things that have a geometry, potentially some time properties, and other attributes that could include a label describing the thing and quantitative measures of it. The main application of simple feature geometries is to describe geometries in two-dimensional space by points, lines, or polygons. The “simple” adjective refers to the fact that the line or polygon geometries are represented by sequences of points connected with straight lines that do not self-intersect.\nSimple features access is a standard (Herring 2011, 2010; ISO 2004) for describing simple feature geometries that includes:\n\na class hierarchy\na set of operations\nbinary and text encodings\n\nWe will first discuss the seven most common simple feature geometry types.\n\nThe big seven\nThe most commonly used simple features geometries, used to represent a single feature are:\n\n\n\n\n\n\n\ntype\ndescription\n\n\n\n\nPOINT\nsingle point geometry\n\n\nMULTIPOINT\nset of points\n\n\nLINESTRING\nsingle linestring (two or more points connected by straight lines)\n\n\nMULTILINESTRING\nset of linestrings\n\n\nPOLYGON\nexterior ring with zero or more inner rings, denoting holes\n\n\nMULTIPOLYGON\nset of polygons\n\n\nGEOMETRYCOLLECTION\nset of the geometries above\n\n\n\n\n\nCode\nlibrary(sf)\n# Linking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.0; sf_use_s2() is TRUE\npar(mfrow = c(2,4))\npar(mar = c(1,1,1.2,1))\n\n# 1\np <- st_point(0:1)\nplot(p, pch = 16)\ntitle(\"point\")\nbox(col = 'grey')\n\n# 2\nmp <- st_multipoint(rbind(c(1,1), c(2, 2), c(4, 1), c(2, 3), c(1,4)))\nplot(mp, pch = 16)\ntitle(\"multipoint\")\nbox(col = 'grey')\n\n# 3\nls <- st_linestring(rbind(c(1,1), c(5,5), c(5, 6), c(4, 6), c(3, 4), c(2, 3)))\nplot(ls, lwd = 2)\ntitle(\"linestring\")\nbox(col = 'grey')\n\n# 4\nmls <- st_multilinestring(list(\n  rbind(c(1,1), c(5,5), c(5, 6), c(4, 6), c(3, 4), c(2, 3)),\n  rbind(c(3,0), c(4,1), c(2,1))))\nplot(mls, lwd = 2)\ntitle(\"multilinestring\")\nbox(col = 'grey')\n\n# 5 polygon\npo <- st_polygon(list(rbind(c(2,1), c(3,1), c(5,2), c(6,3), c(5,3), c(4,4), c(3,4), c(1,3), c(2,1)),\n    rbind(c(2,2), c(3,3), c(4,3), c(4,2), c(2,2))))\nplot(po, border = 'black', col = '#ff8888', lwd = 2)\ntitle(\"polygon\")\nbox(col = 'grey')\n\n# 6 multipolygon\nmpo <- st_multipolygon(list(\n    list(rbind(c(2,1), c(3,1), c(5,2), c(6,3), c(5,3), c(4,4), c(3,4), c(1,3), c(2,1)),\n        rbind(c(2,2), c(3,3), c(4,3), c(4,2), c(2,2))),\n    list(rbind(c(3,7), c(4,7), c(5,8), c(3,9), c(2,8), c(3,7)))))\nplot(mpo, border = 'black', col = '#ff8888', lwd = 2)\ntitle(\"multipolygon\")\nbox(col = 'grey')\n\n# 7 geometrycollection\ngc <- st_geometrycollection(list(po, ls + c(0,5), st_point(c(2,5)), st_point(c(5,4))))\nplot(gc, border = 'black', col = '#ff6666', pch = 16, lwd = 2)\ntitle(\"geometrycollection\")\nbox(col = 'grey')\n\n\n\n\n\nFigure 3.1: sketches of the main simple feature geometry types\n\n\n\n\nFigure 3.1 shows examples of these basic geometry types. The human-readable, “well-known-text” (WKT) representation of the geometries plotted are:\n\n\nCode\np\nmp\nls\nmls\npo\nmpo\ngc\n\n\nPOINT (0 1)\nMULTIPOINT ((1 1), (2 2), (4 1), (2 3), (1 4))\nLINESTRING (1 1, 5 5, 5 6, 4 6, 3 4, 2 3)\nMULTILINESTRING ((1 1, 5 5, 5 6, 4 6, 3 4, 2 3), (3 0, 4 1, 2 1))\nPOLYGON ((2 1, 3 1, 5 2, 6 3, 5 3, 4 4, 3 4, 1 3, 2 1),\n    (2 2, 3 3, 4 3, 4 2, 2 2))\nMULTIPOLYGON (((2 1, 3 1, 5 2, 6 3, 5 3, 4 4, 3 4, 1 3, 2 1),\n    (2 2, 3 3, 4 3, 4 2, 2 2)), ((3 7, 4 7, 5 8, 3 9, 2 8, 3 7)))\nGEOMETRYCOLLECTION (\n    POLYGON ((2 1, 3 1, 5 2, 6 3, 5 3, 4 4, 3 4, 1 3, 2 1),\n      (2 2 , 3 3, 4 3, 4 2, 2 2)),\n    LINESTRING (1 6, 5 10, 5 11, 4 11, 3 9, 2 8),\n    POINT (2 5),\n    POINT (5 4)\n)\nIn this representation, coordinates are separated by space, and points by commas. Sets are grouped by parentheses, and separated by commas.\nIndividual points in a geometry contain at least two coordinates: x and y, in that order. If these coordinates refer to ellipsoidal coordinates, x and y usually refer to longitude and latitude, respectively, although sometimes to latitude and longitude (see Section 2.4 and Section 7.6.6).\n\n\nSimple and valid geometries, ring direction\nLinestrings are called simple when they do not self-intersect:\n\n\nCode\n(ls <- st_linestring(rbind(c(0,0), c(1,1), c(2,2), c(0,2), c(1,1), c(2,0))))\n# LINESTRING (0 0, 1 1, 2 2, 0 2, 1 1, 2 0)\nc(is_simple = st_is_simple(ls))\n# is_simple \n#     FALSE\n\n\nValid polygons and multipolygons obey all of the following properties:\n\npolygon rings are closed (the last point equals the first)\npolygon holes (inner rings) are inside their exterior ring\npolygon inner rings maximally touch the exterior ring in single points, not over a line\na polygon ring does not repeat its own path\nin a multipolygon, an external ring maximally touches another exterior ring in single points, not over a line\n\nIf this is not the case, the geometry concerned is not valid. Invalid geometries typically cause errors when they are processed, but can usually be repaired to make them valid.\nA further convention is that the outer ring of a polygon is winded counter-clockwise, while the holes are winded clockwise, but polygons for which this is not the case are still considered valid. For polygons on the sphere, the “clockwise” is not very useful: if for instance we take the equator as polygon, is the Northern hemisphere or the Southern hemisphere “inside”? The convention taken here is to consider the area on the left while traversing the polygon is considered the polygon’s inside.\n\n\nZ and M coordinates\nIn addition to X and Y coordinates, Single points (vertices) of simple feature geometries may have:\n\na Z coordinate, denoting altitude, and/or\nan M value, denoting some “measure”\n\nThe M attribute shall be a property of the vertex. It sounds attractive to encode a time stamp in it, e.g. to pack movement data (trajectories) in LINESTRINGs. These become however invalid (or “non-simple”) once the trajectory self-intersects, which easily happens when only X and Y are considered for self-intersections.\nBoth Z and M are not found often, and software support to do something useful with them is (still) rare. Their WKT representation are fairly easily understood:\n\n\nCode\nst_point(c(1,3,2))\n# POINT Z (1 3 2)\nst_point(c(1,3,2), dim = \"XYM\")\n# POINT M (1 3 2)\nst_linestring(rbind(c(3,1,2,4), c(4,4,2,2)))\n# LINESTRING ZM (3 1 2 4, 4 4 2 2)\n\n\n\n\nEmpty geometries\nA very important concept in the feature geometry framework is that of the empty geometry. Empty geometries arise naturally when we do geometrical operations (Section 3.2), for instance when we want to know the intersection of POINT (0 0) and POINT (1 1):\n\n\nCode\n(e <- st_intersection(st_point(c(0,0)), st_point(c(1,1))))\n# GEOMETRYCOLLECTION EMPTY\n\n\nand it represents essentially the empty set: when combining (unioning) an empty point it with other non-empty geometries, it vanishes.\nAll geometry types have a special value representing the empty (typed) geometry:\n\n\nCode\nst_point()\n# POINT EMPTY\nst_linestring(matrix(1,1,3)[0,], dim = \"XYM\")\n# LINESTRING M EMPTY\n\n\nand so on, but they all point to the empty set, differing only in their dimension (Section 3.2.2).\n\n\nTen further geometry types\nThere are 10 more geometry types which are more rare, but increasingly find implementation:\n\n\n\n\n\n\n\ntype\ndescription\n\n\n\n\nCIRCULARSTRING\nThe CIRCULARSTRING is the basic curve type, similar to a LINESTRING in the linear world. A single segment requires three points, the start and end points (first and third) and any other point on the arc. The exception to this is for a closed circle, where the start and end points are the same. In this case the second point MUST be the center of the arc, i.e. the opposite side of the circle. To chain arcs together, the last point of the previous arc becomes the first point of the next arc, just like in LINESTRING. This means that a valid circular string must have an odd number of points greater than 1.\n\n\nCOMPOUNDCURVE\nA compound curve is a single, continuous curve that has both curved (circular) segments and linear segments. That means that in addition to having well-formed components, the end point of every component (except the last) must be coincident with the start point of the following component.\n\n\nCURVEPOLYGON\nExample compound curve in a curve polygon: CURVEPOLYGON(COMPOUNDCURVE(CIRCULARSTRING(0 0,2 0, 2 1, 2 3, 4 3),(4 3, 4 5, 1 4, 0 0)), CIRCULARSTRING(1.7 1, 1.4 0.4, 1.6 0.4, 1.6 0.5, 1.7 1) )\n\n\nMULTICURVE\nA MultiCurve is a 1-dimensional GeometryCollection whose elements are Curves, it can include linear strings, circular strings or compound strings.\n\n\nMULTISURFACE\nA MultiSurface is a 2-dimensional GeometryCollection whose elements are Surfaces, all using coordinates from the same coordinate reference system.\n\n\nCURVE\nA Curve is a 1-dimensional geometric object usually stored as a sequence of Points, with the subtype of Curve specifying the form of the interpolation between Points\n\n\nSURFACE\nA Surface is a 2-dimensional geometric object\n\n\nPOLYHEDRALSURFACE\nA PolyhedralSurface is a contiguous collection of polygons, which share common boundary segments\n\n\nTIN\nA TIN (triangulated irregular network) is a PolyhedralSurface consisting only of Triangle patches.\n\n\nTRIANGLE\nA Triangle is a polygon with 3 distinct, non-collinear vertices and no interior boundary\n\n\n\nCIRCULARSTRING, COMPOUNDCURVE and CURVEPOLYGON are not described in the SFA standard, but in the SQL-MM part 3 standard. The descriptions above were copied from the PostGIS manual.\n\n\nText and binary encodings\nPart of the simple feature standard are two encodings: a text and a binary encoding. The well-known text encoding, used above, is human-readable, the well-known binary encoding is machine-readable. Binary encodings are lossless and typically faster to work with than text encoding (and decoding), and are used for instance in all communications between R package sf and the GDAL, GEOS, liblwgeom and s2geometry libraries (Figure 1.7) ."
  },
  {
    "objectID": "03-Geometries.html#sec-opgeom",
    "href": "03-Geometries.html#sec-opgeom",
    "title": "3  Geometries",
    "section": "3.2 Operations on geometries",
    "text": "3.2 Operations on geometries\nSimple feature geometries can be queried for properties, transformed into new geometries, and combinations of geometries can be queried for properties. This section gives an overview of the operations entirely focusing on geometrical properties.\nChapter 5 focuses on the analysis of non-geometrical feature properties, in relationship to their geometries. Some of the material in this section appeared in Pebesma (2018).\nWe can categorize operations on geometries in terms of what they take as input, and what they return as output. In terms of output we have operations that return:\n\npredicates: a logical asserting a certain property is TRUE\nmeasures: a quantity (e.g. a numeric value with measurement unit)\ntransformations: newly generated geometries\n\nand in terms of what they operate on, we distinguish operations that are:\n\nunary when they work on a single geometry\nbinary when they work on pairs of geometries\nn-ary when they work on sets of geometries\n\n\nUnary predicates\nUnary predicates describe a certain property of a geometry. The predicates is_simple, is_valid, and is_empty return respectively whether a geometry is simple, valid or empty. Given a coordinate reference system, is_longlat returns whether the coordinates are geographic or projected. is(geometry, class) checks whether a geometry belongs to a particular class.\n\n\nBinary predicates and DE-9IM\nThe Dimensionally Extended Nine-Intersection Model (DE-9IM, Clementini, Di Felice, and Oosterom (1993); Egenhofer and Franzosa (1991)) is a model that helps describing the qualitative relation between any two geometries in two-dimensional space (\\(R^2\\)). Any geometry has a dimension value that is:\n\n0 for points,\n1 for linear geometries,\n2 for polygonal geometries, and\nF (false) for empty geometries\n\nAny geometry also has an inside (I), a boundary (B) and an exterior (E); these roles are obvious for polygons but, e.g. for:\n\nlines the boundary is formed by the end points, and the interior by all non-end points on the line\npoints have a zero-dimensional inside but no boundary\n\n\n\nCode\nlibrary(sf)\npolygon <- po <- st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))\np0 <- st_polygon(list(rbind(c(-1,-1), c(2,-1), c(2,2), c(-1,2), c(-1,-1))))\nline <- li <- st_linestring(rbind(c(.5, -.5), c(.5, 0.5)))\ns <- st_sfc(po, li)\n\npar(mfrow = c(3,3))\npar(mar = c(1,1,1,1))\n\n# \"1020F1102\"\n# 1: 1\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste(\"I(pol)\",intersect(),\"I(line) = 1\")))\nlines(rbind(c(.5,0), c(.5,.495)), col = 'red', lwd = 2)\npoints(0.5, 0.5, pch = 1)\n\n# 2: 0\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste(\"I(pol)\",intersect(),\"B(line) = 0\")))\npoints(0.5, 0.5, col = 'red', pch = 16)\n\n# 3: 2\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste(\"I(pol)\",intersect(),\"E(line) = 2\")))\nplot(po, col = '#ff8888', add = TRUE)\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', add = TRUE)\n\n# 4: 0\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste(\"B(pol)\",intersect(),\"I(line) = 0\")))\npoints(.5, 0, col = 'red', pch = 16)\n\n# 5: F\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste(\"B(pol)\",intersect(),\"B(line) = F\")))\n\n# 6: 1\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste(\"B(pol)\",intersect(),\"E(line) = 1\")))\nplot(po, border = 'red', col = NA, add = TRUE, lwd = 2)\n\n# 7: 1\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste(\"E(pol)\",intersect(),\"I(line) = 1\")))\nlines(rbind(c(.5, -.5), c(.5, 0)), col = 'red', lwd = 2)\n\n# 8: 0\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste(\"E(pol)\",intersect(),\"B(line) = 0\")))\npoints(.5, -.5, col = 'red', pch = 16)\n\n# 9: 2\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', main = expression(paste(\"E(pol)\",intersect(),\"E(line) = 2\")))\nplot(p0 / po, col = '#ff8888', add = TRUE)\nplot(s, col = c(NA, 'darkgreen'), border = 'blue', add = TRUE)\n\n\n\n\n\nFigure 3.2: DE-9IM: intersections between the interior, boundary and exterior of a polygon (rows) and of a linestring (columns) indicated by red\n\n\n\n\nFigure 3.2 shows the intersections between the I, B and E components of a polygon and a linestring indicated by red; the sub-plot title gives the dimension of these intersections (0, 1, 2 or F). The relationship between the polygon and the line geometry is the concatenation of these dimensions:\n\n\nCode\nst_relate(polygon, line)\n#      [,1]       \n# [1,] \"1020F1102\"\n\n\nwhere the first three characters are associated with the inside of the first geometry (the polygon): Figure 3.2 is summarised row-wise. Using this ability to express relationships, we can also query pairs of geometries about particular conditions expressed in a mask string; e.g. the string \"*0*******\" would evaluate TRUE when the second geometry has one or more boundary points in common with the interior of the first geometry; the symbol * standing for “any dimensionality” (0, 1, 2 or F). The mask string \"T********\" matches pairs of geometry with intersecting interiors, where the symbol T stands for any non-empty intersection of dimensionality 0, 1 or 2.\nBinary predicates are further described using normal-language verbs, using DE-9IM definitions. For instance, the predicate equals corresponds to the relationship \"T*F**FFF*\". If any two geometries obey this relationship, they are (topologically) equal, but may have a different ordering of nodes.\nA list of binary predicates is:\n\n\n\n\n\n\n\n\npredicate\nmeaning\ninverse of\n\n\n\n\ncontains\nNone of the points of A are outside B\nwithin\n\n\ncontains_properly\nA contains B and B has no points in common with the boundary of A\n\n\n\ncovers\nNo points of B lie in the exterior of A\ncovered_by\n\n\ncovered_by\nInverse of covers\n\n\n\ncrosses\nA and B have some but not all interior points in common\n\n\n\ndisjoint\nA and B have no points in common\nintersects\n\n\nequals\nA and B are topologically equal: node order or number of nodes may differ; identical to A contains B AND A within B\n\n\n\nequals_exact\nA and B are geometrically equal, and have identical node order\n\n\n\nintersects\nA and B are not disjoint\ndisjoint\n\n\nis_within_distance\nA is closer to B than a given distance\n\n\n\nwithin\nNone of the points of B are outside A\ncontains\n\n\ntouches\nA and B have at least one boundary point in common, but no interior points\n\n\n\noverlaps\nA and B have some points in common; the dimension of these is identical to that of A and B\n\n\n\nrelate\ngiven a mask pattern, return whether A and B adhere to this pattern\n\n\n\n\nThe Wikipedia DE-9IM page provides the relate patterns for each of these verbs. They are important to check out; for instance covers and contains (and their inverses) are often not completely intuitive:\n\nif A contains B, B has no points in common with the exterior or boundary of A\nif A covers B, B has no points in common with the exterior of A\n\n\n\nUnary Measures\nUnary measures return a measure or quantity that describes a property of the geometry:\n\n\n\n\n\n\n\nmeasure\nreturns\n\n\n\n\ndimension\n0 for points, 1 for linear, 2 for polygons, possibly NA for empty geometries\n\n\narea\nthe area of a geometry\n\n\nlength\nthe length of a linear geometry\n\n\n\n\n\nBinary Measures\ndistance returns the distance between pairs of geometries. The qualitative measure relate (without mask) gives the relation pattern, a description of the geometrical relationship between two geometries explained in Section 3.2.2.\n\n\nUnary Transformers\nUnary transformations work on a per-geometry basis, and for each geometry return a new geometry.\n\n\n\n\n\n\n\ntransformer\nreturns a geometry …\n\n\n\n\ncentroid\nof type POINT with the geometry’s centroid\n\n\nbuffer\nthat is this larger (or smaller) than the input geometry, depending on the buffer size\n\n\njitter\nthat was moved in space a certain amount, using a bivariate uniform distribution\n\n\nwrap_dateline\ncut into pieces that do no longer cover the dateline\n\n\nboundary\nwith the boundary of the input geometry\n\n\nconvex_hull\nthat forms the convex hull of the input geometry (Figure 3.3)\n\n\nline_merge\nafter merging connecting LINESTRING elements of a MULTILINESTRING into longer LINESTRINGs.\n\n\nmake_valid\nthat is valid\n\n\nnode\nwith added nodes to linear geometries at intersections without a node; only works on individual linear geometries\n\n\npoint_on_surface\nwith a (arbitrary) point on a surface\n\n\npolygonize\nof type polygon, created from lines that form a closed ring\n\n\nsegmentize\na (linear) geometry with nodes at a given density or minimal distance\n\n\nsimplify\nsimplified by removing vertices/nodes (lines or polygons)\n\n\nsplit\nthat has been split with a splitting linestring\n\n\ntransform\ntransformed or convert to a new coordinate reference system (Chapter 2)\n\n\ntriangulate\nwith Delauney triangulated polygon(s) (Figure 3.3)\n\n\nvoronoi\nwith the Voronoi tessellation of an input geometry (Figure 3.3)\n\n\nzm\nwith removed or added Z and/or M coordinates\n\n\ncollection_extract\nwith subgeometries from a GEOMETRYCOLLECTION of a particular type\n\n\ncast\nthat is converted to another type\n\n\n+\nthat is shifted over a given vector\n\n\n*\nthat is multiplied by a scalar or matrix\n\n\n\n\n\nCode\npar(mar = rep(0,4), mfrow = c(1, 3))\nset.seed(133331)\nmp <- st_multipoint(matrix(runif(20), 10))\nplot(mp, cex = 2)\nplot(st_convex_hull(mp), add = TRUE, col = NA, border = 'red')\nbox()\nplot(mp, cex = 2)\nplot(st_voronoi(mp), add = TRUE, col = NA, border = 'red')\nbox()\nplot(mp, cex = 2)\nplot(st_triangulate(mp), add = TRUE, col = NA, border = 'darkgreen')\nbox()\n\n\n\n\n\nFigure 3.3: for a set of points, left: convex hull (red); middle: Voronoi polygons; right: Delauney triangulation\n\n\n\n\n\n\nBinary Transformers\nBinary transformers are functions that return a geometry based on operating on a pair of geometries. They include:\n\n\n\n\n\n\n\n\nfunction\nreturns\ninfix operator\n\n\n\n\nintersection\nthe overlapping geometries for pair of geometries\n&\n\n\nunion\nthe combination of the geometries; removes internal boundaries and duplicate points, nodes or line pieces\n|\n\n\ndifference\nthe geometries of the first after removing the overlap with the second geometry\n/\n\n\nsym_difference\nthe combinations of the geometries after removing where they intersect; the negation (opposite) of intersection\n%/%\n\n\n\n\n\nN-ary Transformers\nN-ary transformers operate on sets of geometries. union can be applied to a set of geometries to return its geometrical union. Otherwise, any set of geometries can be combined into a MULTI-type geometry when they have equal dimension, or else into a GEOMETRYCOLLECTION. Without unioning, this may lead to a geometry that is not valid, e.g. because two polygon rings have a boundary line in common.\nN-ary intersection and difference take a single argument, but operate (sequentially) on all pairs, triples, quadruples, etc. Consider the plot in Figure 3.4 : how do we identify the area where all three boxes overlap? Using binary intersections gives us intersections for all pairs: 1-1, 1-2, 1-3, 2-1, 2-2, 2-3, 3-1, 3-2, 3-3, but does not let us identify areas where more than two geometries intersect. Figure 3.4) (right shows the n-ary intersection: the 7 unique, non-overlapping geometries originating from intersection of one, two, or more geometries.\n\n\nCode\npar(mar = rep(.1, 4), mfrow = c(1, 2))\nsq <- function(pt, sz = 1) st_polygon(list(rbind(c(pt - sz), \n  c(pt[1] + sz, pt[2] - sz), c(pt + sz), c(pt[1] - sz, pt[2] + sz), c(pt - sz))))\nx <- st_sf(box = 1:3, st_sfc(sq(c(0,0)), sq(c(1.7, -0.5)), sq(c(0.5, 1))))\nplot(st_geometry(x), col = NA, border = sf.colors(3, categorical = TRUE), lwd = 3)\nplot(st_intersection(st_geometry(x)), col = sf.colors(7, categorical=TRUE, alpha = .5))\n\n\n\n\n\nFigure 3.4: left: three overlapping boxes – how do we identify the small box where all three overlap? right: unique, non-overlapping n-ary intersections\n\n\n\n\nSimilarly, one can compute an n-ary difference from a set \\(\\{s_1, s_2, s_3, ...\\}\\) by creating differences \\(\\{s_1, s_2-s_1, s_3-s_2-s_1, ...\\}\\). This is shown in Figure 3.5 , left for the original set, right for the set after reversing its order to make clear that the result here depends on the ordering of the input geometries. Again, resulting geometries do not overlap.\n\n\nCode\npar(mar = rep(.1, 4), mfrow = c(1, 2)) \nxg <- st_geometry(x)\nplot(st_difference(xg), col = sf.colors(3, alpha = .5, categorical=TRUE))\nplot(st_difference(xg[3:1]), col = sf.colors(3, alpha = .5, categorical=TRUE))\n\n\n\n\n\nFigure 3.5: difference between subsequent boxes, left: in original order; right: in reverse order"
  },
  {
    "objectID": "03-Geometries.html#sec-precision",
    "href": "03-Geometries.html#sec-precision",
    "title": "3  Geometries",
    "section": "3.3 Precision",
    "text": "3.3 Precision\nGeometrical operations, such as finding out whether a certain point is on a line, may fail when coordinates are represented by double precision floating point numbers, such as 8-byte doubles used in R. An often chosen remedy is to limit the precision of the coordinates before the operation. For this, a precision model is adopted; the most common is to choose a factor \\(p\\) and compute rounded coordinates \\(c'\\) from original coordinates \\(c\\) by\n\\[c' = \\mbox{round}(p \\cdot c) / p\\]\nRounding of this kind brings the coordinates to points on a regular grid with spacing \\(1/p\\), which is beneficial for geometric computations. Of course, it also affects all computations like areas and distances, and may turn valid geometries into invalid ones. Which precision values are best for which application is often a matter of common sense combined with trial and error."
  },
  {
    "objectID": "03-Geometries.html#sec-coverages",
    "href": "03-Geometries.html#sec-coverages",
    "title": "3  Geometries",
    "section": "3.4 Coverages: tessellations and rasters",
    "text": "3.4 Coverages: tessellations and rasters\nThe Open Geospatial Consortium defines a coverage as a “feature that acts as a function to return values from its range for any direct position within its spatiotemporal domain” (Baumann, Hirschorn, and Masó 2017). Having a function implies that for every “point”, i.e. every combination of spatial point and a moment in time of the spatiotemporal domain, we have single value for the range. This is a very common situation for spatiotemporal phenomena, a few examples can be given:\n\nboundary disputes aside, every point in a region (domain) belongs to a single administrative unit (range)\nat any given moment in time, every point in a region (domain) has a certain land cover type (range)\nevery point in an area (domain) has a single elevation (range), e.g. measured with respect to a given mean sea level surface\nevery spatiotemporal point in a three-dimensional body of air (domain) has single value for temperature (range)\n\nA caveat here is that because observation or measurement always takes time and requires space, measured values are always an average over a spatiotemporal volume, and hence range variables can rarely be measured for true, zero-volume “points”; for many practical cases however the measured volume is small enough to be considered a “point”; for a variable like land cover type the volume needs to be chosen such that the types distinguished make sense with respect to the measured units.\nIn the first two of the given examples the range variable is categorical, in the last two the range variable is continuous. For categorical range variables, if large connected areas have a constant range value, an efficient way to represent these data is by storing the boundaries of the areas with constant value, such as country boundaries. Although this can be done (and is often done) by a set of simple feature geometries (polygons or multipolygons), but this brings along some challenges:\n\nit is hard to guarantee for such a set of simple feature polygons that they do not overlap, or that there are no gaps between them\nsimple features have no way of assigning points on the boundary of two adjacent polygons uniquely to a single polygon, which introduces ambiguity in terms the interpretation as coverage\n\n\nTopological models\nA data model that guarantees no inadvertent gaps or overlaps of polygonal coverages is the topological model, examples of which are found in geographic information systems (GIS) like GRASS GIS or ArcGIS. Topological models store boundaries between polygons only once, and register which polygonal area is on either side of a boundary.\nDeriving the set of (multi)polygons for each area with a constant range value from a topological model is straightforward; the other way around: reconstructing topology from a set of polygons typically involves setting thresholds on errors and handling gaps or overlaps.\n\n\nRaster tessellations\nA tessellation is a subdivision of a space (area, volume) into smaller elements by ways of polygons. A regular tessellation does this with regular polygons: triangles, squares or hexagons. Tessellations using squares are very commonly used for spatial data, and are called raster data. Raster data tessellate each spatial dimension \\(d\\) into regular cells, formed e.g. by left-closed and right-open intervals \\(d_i\\): \\[\\begin{equation}\nd_i = d_0 + [i \\times \\delta, (i+1) \\times \\delta)\n\\end{equation}\\] with \\(d_0\\) an offset, \\(\\delta\\) the interval (cell or pixel) size, and where the cell index \\(i\\) is an arbitrary but consecutive set of integers. The \\(\\delta\\) value is often taken negative for the \\(y\\)-axis (Northing), indicating that raster row numbers increasing Southwards correspond to \\(y\\)-coordinates increasing Northwards.\nWhere in arbitrary polygon tessellations the assignment of points to polygons is ambiguous for points falling on a boundary shared by two polygons, using left-closed “[” and right-open “)” intervals in regular tessellations removes this ambiguity. This means that for rasters with negative \\(\\delta\\) values for the \\(y\\)-coordinate and positive for the \\(x\\)-coordinate, only the top-left corner point is part of each raster cell. An artifact resulting from this is shown in Figure 3.6 .\n\n\nCode\nlibrary(stars)\n# Loading required package: abind\nls <- st_sf(a = 2, st_sfc(st_linestring(rbind(c(0.1, 0), c(1, .9)))))\ngrd <- st_as_stars(st_bbox(ls), nx = 10, ny = 10, xlim = c(0, 1.0), ylim = c(0, 1),\n   values = -1)\nr <- st_rasterize(ls, grd, options = \"ALL_TOUCHED=TRUE\")\nr[r == -1] <- NA\nplot(st_geometry(st_as_sf(grd)), border = 'orange', col = NA, \n     reset = FALSE, key.pos = NULL)\nplot(r, axes = TRUE, add = TRUE, breaks = \"equal\", main = NA) # ALL_TOUCHED=FALSE;\nplot(ls, add = TRUE, col = \"red\", lwd = 2)\n\n\n\n\n\nFigure 3.6: rasterization artifact: as only top-left corners are part of the raster cell, only cells below the diagonal line are rasterized\n\n\n\n\nTessellating the time dimension with left-closed, right-open intervals is very common, and reflects the implicit assumption underlying time series software such as the xts package in R, where time stamps indicate the start of time intervals. Different models can be combined: one could use simple feature polygons to tessellate space, and combine this with a regular tessellation of time in order to cover a space-time vector data cube. Raster and vector data cubes are discussed in Chapter 6.\nAs mentioned above, besides square cells the other two shapes that can lead to regular tessellations of \\(R^2\\) are triangles and hexagons. On the sphere, there are few more, including cube, octahedron, icosahedron and dodecahedron. A spatial index that builds on the cube is s2geometry, the H3 library uses the icosahedron and densifies that with (mostly) hexagons. Mosaics that cover the entire Earth are also called discrete global grids."
  },
  {
    "objectID": "03-Geometries.html#networks",
    "href": "03-Geometries.html#networks",
    "title": "3  Geometries",
    "section": "3.5 Networks",
    "text": "3.5 Networks\nSpatial networks are typically composed of linear (LINESTRING) elements, but possess further topological properties describing the network coherence:\n\nstart and endpoints of a linestring may be connected to other linestring start or end points, forming a set of nodes and edges\nedges may be directed, to only allow for connection (flow, transport) in one way\n\nR packages including osmar (Schlesinger and Eugster 2013), stplanr (Lovelace, Ellison, and Morgan 2022) and sfnetworks (van der Meer et al. 2022) provide functionality for constructing network objects, and working with them, e.g. computing shortest or fastest routes through a network. Package spatstat (Baddeley, Turner, and Rubak 2022; Baddeley, Rubak, and Turner 2015) has infrastructure for analysing point patterns on linear networks (Chapter 11)."
  },
  {
    "objectID": "03-Geometries.html#exercises",
    "href": "03-Geometries.html#exercises",
    "title": "3  Geometries",
    "section": "3.6 Exercises",
    "text": "3.6 Exercises\nFor the following exercises, use R where possible.\n\nGive two examples of geometries in 2-D (flat) space that cannot be represented as simple feature geometries, and create a plot of them.\nRecompute the coordinates 10.542, 0.01, 45321.6789 using precision values 1, 1e3, 1e6, and 1e-2.\nDescribe a practical problem for which an n-ary intersection would be needed.\nHow can you create a Voronoi diagram (Figure 3.3) that has one closed polygons for every single point?\nGive the unary measure dimension for geometries POINT Z (0 1 1), LINESTRING Z (0 0 1,1 1 2), and POLYGON Z ((0 0 0,1 0 0,1 1 0,0 0 0))\nGive the DE-9IM relation between LINESTRING(0 0,1 0) and LINESTRING(0.5 0,0.5 1); explain the individual characters.\nCan a set of simple feature polygons form a coverage? If so, under which constraints?\nFor the nc counties in the dataset that comes with R package sf, find the points touched by four counties.\nHow would Figure 3.6 look like if \\(\\delta\\) for the \\(y\\)-coordinate was positive?\n\n\n\n\n\nBaddeley, Adrian, Ege Rubak, and Rolf Turner. 2015. Spatial Point Patterns: Methodology and Applications with r. Chapman; Hall/CRC.\n\n\nBaddeley, Adrian, Rolf Turner, and Ege Rubak. 2022. Spatstat: Spatial Point Pattern Analysis, Model- Fitting, Simulation, Tests. http://spatstat.org/.\n\n\nBaumann, Peter, Eric Hirschorn, and Joan Masó. 2017. “OGC Coverage Implementation Schema.” OGC Implementation Standard. https://docs.opengeospatial.org/is/09-146r6/09-146r6.html.\n\n\nClementini, Eliseo, Paolino Di Felice, and Peter van Oosterom. 1993. “A Small Set of Formal Topological Relationships Suitable for End-User Interaction.” In Advances in Spatial Databases, edited by David Abel and Beng Chin Ooi, 277–95. Berlin, Heidelberg: Springer Berlin Heidelberg.\n\n\nEgenhofer, Max J., and Robert D. Franzosa. 1991. “Point-Set Topological Spatial Relations.” International Journal of Geographical Information Systems 5 (2): 161–74. https://doi.org/10.1080/02693799108927841.\n\n\nHerring, John R. 2010. “OpenGIS Implementation Standard for Geographic Information-Simple Feature Access-Part 2: SQL Option.” Open Geospatial Consortium Inc. http://portal.opengeospatial.org/files/?artifact_id=25354.\n\n\n———. 2011. “OpenGIS Implementation Standard for Geographic Information-Simple Feature Access-Part 1: Common Architecture.” Open Geospatial Consortium Inc, 111. http://portal.opengeospatial.org/files/?artifact_id=25355.\n\n\nISO. 2004. Geographic Information – Simple Feature Access – Part 1: Common Architecture.https://www.iso.org/standard/40114.html .\n\n\nLovelace, Robin, Richard Ellison, and Malcolm Morgan. 2022. Stplanr: Sustainable Transport Planning. https://CRAN.R-project.org/package=stplanr.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nSchlesinger, Thomas, and Manuel J. A. Eugster. 2013. Osmar: OpenStreetMap and r. http://osmar.r-forge.r-project.org/.\n\n\nvan der Meer, Lucas, Lorena Abad, Andrea Gilardi, and Robin Lovelace. 2022. Sfnetworks: Tidy Geospatial Networks. https://CRAN.R-project.org/package=sfnetworks."
  },
  {
    "objectID": "04-Spherical.html",
    "href": "04-Spherical.html",
    "title": "4  Spherical Geometries",
    "section": "",
    "text": "“There are too many false conclusions drawn and stupid measurements made when geographic software, built for projected Cartesian coordinates in a local setting, is applied at the global scale” (Chrisman 2012)\nThe previous chapter discussed geometries defined on the plane, \\(R^2\\). This chapter discusses what changes when we consider geometries not on the plane, but on the sphere (\\(S^2\\)).\nAlthough we learned in Chapter 2 that the shape of the Earth is usually approximated by an ellipsoid, none of the libraries shown in green in Figure 1.7 provide access to a comprehensive set of functions that compute on an ellipsoid. Only the s2geometry (Dunnington, Pebesma, and Rubak 2022; Veach et al. 2020) library does provide it using a sphere rather than an ellipsoid. However, when compared to using a flat (projected) space we did in the previous chapter, a sphere is a much better approximation to an ellipsoid."
  },
  {
    "objectID": "04-Spherical.html#straight-lines",
    "href": "04-Spherical.html#straight-lines",
    "title": "4  Spherical Geometries",
    "section": "4.1 Straight lines",
    "text": "4.1 Straight lines\nThe basic premise of simple features of Chapter 3 is that geometries are represented by sequences of points connected by straight lines. On \\(R^2\\) (or any Cartesian space), this is trivial, but on a sphere straight lines do not exist. The shortest line connecting two points is an arc of the circle through both points and the center of the sphere, also called a great circle segment. A consequence is that “the” shortest distance line connecting two points on opposing sides of the sphere does not exist, as any great circle segment connecting them has equal length."
  },
  {
    "objectID": "04-Spherical.html#ring-direction",
    "href": "04-Spherical.html#ring-direction",
    "title": "4  Spherical Geometries",
    "section": "4.2 Ring direction",
    "text": "4.2 Ring direction\nAny polygon on the sphere divides the sphere surface in two parts with finite area: the inside and the outside. Using the “counter clockwise rule” as was done for \\(R^2\\) will not work, because the direction interpretation depends on what is defined as inside. The convention here is to define the inside as the left (or right) side of the polygon boundary when traversing its points in sequence. Reversal of the node order then switches inside and outside."
  },
  {
    "objectID": "04-Spherical.html#full-polygon",
    "href": "04-Spherical.html#full-polygon",
    "title": "4  Spherical Geometries",
    "section": "4.3 Full polygon",
    "text": "4.3 Full polygon\nIn addition to empty polygons, one can define the full polygon on a sphere, which comprises its entire surface. This is useful, for instance for computing the oceans as the geometric difference between the full polygon and those of the land mass."
  },
  {
    "objectID": "04-Spherical.html#bounding-box-rectangle-and-cap",
    "href": "04-Spherical.html#bounding-box-rectangle-and-cap",
    "title": "4  Spherical Geometries",
    "section": "4.4 Bounding box, rectangle, and cap",
    "text": "4.4 Bounding box, rectangle, and cap\nWhere in \\(R^2\\) one can easily define bounding boxes as the range of the \\(x\\) and \\(y\\) coordinates, for ellipsoidal coordinates these ranges are not of much use when geometries cross the antimeridian (longitude +/- 180) or one of the poles. The assumption in \\(R^2\\) that lower \\(x\\) values are Westwards of higher ones does not hold when crossing the antimeridian. An alternative to delineating an area on a sphere that is more natural is the bounding cap, defined by its center coordinates and a radius. For Antarctica, as depicted in Figure 4.1) (a) and (c , the bounding box formed by coordinate ranges is\n\n\nCode\nsuppressPackageStartupMessages(library(sf))\nsuppressPackageStartupMessages(library(maps))\n# maps:\npar(mfrow = c(2,2))\npar(mar = c(1,1.2,1,1))\nm <- st_as_sf(map(fill=TRUE, plot=FALSE))\na <- m[m$ID == \"Antarctica\", ]\nst_bbox(a)\n#   xmin   ymin   xmax   ymax \n# -180.0  -85.2  179.6  -60.5\n\n\nwhich clearly does not contain the region (ymin being -90 and xmax 180). Two geometries that do contain the region are the bounding cap:\n\n\nCode\nlibrary(s2)\ns2_bounds_cap(a)\n#   lng lat angle\n# 1   0 -90  29.5\n\n\nand the bounding rectangle:\n\n\nCode\ns2_bounds_rect(a)\n#   lng_lo lat_lo lng_hi lat_hi\n# 1   -180    -90    180  -60.5\n\n\nFor an area spanning the antimeridian, here the Fiji island country, the bounding box:\n\n\nCode\nst_bbox(m[m$ID == \"Fiji\",])\n#   xmin   ymin   xmax   ymax \n# -179.9  -21.7  180.2  -12.5\n\n\nseems to span most of the Earth, as opposed to the bounding rectangle:\n\n\nCode\ns2_bounds_rect(m[m$ID == \"Fiji\",])\n#   lng_lo lat_lo lng_hi lat_hi\n# 1    175  -21.7   -178  -12.5\n\n\nwhere a value lng_lo larger than lng_hi indicates that the bounding rectangle spans the antimeridian. This property could not be inferred from the coordinate ranges."
  },
  {
    "objectID": "04-Spherical.html#validity-on-the-sphere",
    "href": "04-Spherical.html#validity-on-the-sphere",
    "title": "4  Spherical Geometries",
    "section": "4.5 Validity on the sphere",
    "text": "4.5 Validity on the sphere\nMany global datasets are given in ellipsoidal coordinates but are prepared in a way that they “work” when interpreted on the \\(R^2\\) space [-180,180] \\(\\times\\) [-90,90]. This means that:\n\ngeometries crossing the antimeridian (longitude +/- 180) are cut in halves, such that they no longer cross it (but nearly touch each other)\ngeometries including a pole, like Antarctica, are cut at +/- 180 and make an excursion through -180,-90 and 180,-90 (both representing the Geographic South Pole)\n\nFigure 4.1 shows two different representation of Antarctica, plotted with ellipsoidal coordinates taken as \\(R^2\\) (top) and in a Polar Stereographic projection (bottom), without (left) and with (right) an excursion through the Geographic South Pole. In the projections as plotted, polygons (b) and (c) are valid; polygon (a) is not valid as it self-intersects, polygon (d) is not valid because it traverses the same edge to the South Pole twice. On the sphere (\\(S^2\\)), polygon (a) is valid but (b) is not, for the same reason as (d) is not valid.\n\n\nCode\n# maps:\npar(mfrow = c(2,2))\npar(mar = c(1,1.2,1,1))\nm <- st_as_sf(map(fill=TRUE, plot=FALSE))\nm <- m[m$ID == \"Antarctica\", ]\nplot(st_geometry(m), asp = 2)\ntitle(\"a (not valid)\")\n# ne:\nlibrary(rnaturalearth)\nne <- ne_countries(returnclass = \"sf\")\nne <- ne[ne$region_un == \"Antarctica\", \"region_un\"]\nplot(st_geometry(ne), asp = 2)\ntitle(\"b (valid)\")\n# 3031\nm |>\n  st_geometry() |>\n  st_transform(3031) |>\n  plot()\ntitle(\"c (valid)\")\nne |>\n  st_geometry() |>\n  st_transform(3031) |>\n  plot()\ntitle(\"d (not valid)\")\n\n\n\n\n\nFigure 4.1: different representations of Antarctica, (a, c): with a polygon not passing through (-180 -90); (b, d): with a polygon passing through (-180 -90) and (180 -90)"
  },
  {
    "objectID": "04-Spherical.html#exercises",
    "href": "04-Spherical.html#exercises",
    "title": "4  Spherical Geometries",
    "section": "4.6 Exercises",
    "text": "4.6 Exercises\nFor the following exercises, use R where possible or relevant.\n\nHow does the GeoJSON format define “straight” lines between ellipsoidal coordinates (section 3.1.1)? Using this definition of straight, how would LINESTRING(0 85,180 85) look like in a polar projection? How could this geometry be modified to have it cross the North Pole?\nFor a typical polygon on \\(S^2\\), how can you find out ring direction?\nAre there advantages of using bounding caps over using bounding boxes? If so, list them.\nWhy is, for small areas, the orthographic projection centered at the area a good approximation of the geometry as handled on \\(S^2\\)?\nFor rnaturalearth::ne_countries(country = \"Fiji\",    returnclass=\"sf\"), check whether the geometry is valid on \\(R^2\\), on an orthographic projection centered on the country, and on \\(S^2\\). How can the geometry be made valid on S^2? Plot the resulting geometry back on \\(R^2\\). Compare the centroid of the country, as computed on \\(R^2\\) and on \\(S^2\\), and the distance between the two.\n\n\n\n\n\nChrisman, Nicholas. 2012. “A Deflationary Approach to Fundamental Principles in GIScience.” In Francis Harvey (Ed.) Are There Fundamental Principles in Geographic Information Science?, 42–64. CreateSpace, United States.\n\n\nDunnington, Dewey, Edzer Pebesma, and Ege Rubak. 2022. S2: Spherical Geometry Operators Using the S2 Geometry Library.\n\n\nVeach, Eric, Jesse Rosenstock, Eric Engle, Robert Snedegar, Julien Basch, and Tom Manshreck. 2020. “S2 Geometry.” Website. https://s2geometry.io/."
  },
  {
    "objectID": "05-Attributes.html",
    "href": "05-Attributes.html",
    "title": "5  Attributes and Support",
    "section": "",
    "text": "Feature attributes refer to the properties of features (“things”) that do not describe the feature’s geometry. Feature attributes can be derived from geometry (e.g. length of a LINESTRING, area of a POLYGON) but they can also refer to non-derived properties, such as:\nIn some cases, time properties can be seen as attributes of features, e.g. the date of birth of a person or the construction year of a road. When an attribute such as for instance air quality is a function of both space and time, time is best handled on equal footing with geometry (e.g. in a data cube, see Chapter 6).\nSpatial data science software implementing simple features typically organizes data in tables that contain both geometries and attributes for features; this is true for geopandas in Python, PostGIS tables in PostgreSQL, and sf objects in R. The geometric operations described in Section 3.2 operate on geometries only, and may occasionally yield new attributes (predicates, measures or transformations), but do not operate on attributes present.\nWhen, while manipulating geometries, attribute values are retained unmodified, support problems may arise. If we look into a simple case of replacing a county polygon with the centroid of that polygon on a dataset that has attributes, we see that R package sf issues a warning:\nThe reason for this is that the dataset contains variables with values that are associated with entire polygons – in this case: population counts – meaning they are not associated with a POINT geometry replacing the polygon.\nIn Section 1.6 we already described that for non-point geometries (lines, polygons), feature attribute values either have point support, meaning that the value applies to every point, or they have block support, meaning that the value summarizes all points in the geometry. (More complex options, e.g. in between these two extremes, may also occur.) This chapter will describe different ways in which an attribute may relate to the geometry, its consequences on analysing such data, and ways to derive attribute data for different geometries (up- and downscaling)."
  },
  {
    "objectID": "05-Attributes.html#sec-agr",
    "href": "05-Attributes.html#sec-agr",
    "title": "5  Attributes and Support",
    "section": "5.1 Attribute-geometry relationships and support",
    "text": "5.1 Attribute-geometry relationships and support\nChanging the feature geometry without changing the feature attributes does change the feature, since the feature is characterised by the combination of geometry and attributes. Can we, ahead of time, predict whether the resulting feature will still meaningfully relate to the attribute value when we replace all geometries for instance with their convex hull or centroid? It depends.\nTake the example of a road, represented by a LINESTRING, which has an attribute property road width equal to 10 m. What can we say about the road width of an arbitrary subsection of this road? That depends on whether the attribute road length describes, for instance the road width everywhere, meaning that road width is constant along the road, or whether it describes an aggregate property, such as minimum or average road width. In case of the minimum, for an arbitrary subsection of the road one could still argue that the minimum road width must be at least as large as the minimum road width for the whole segment, but it may no longer be the minimum for that subsection. This gives us two “types” for the attribute-geometry relationship (AGR):\n\nconstant the attribute value is valid everywhere in or over the geometry; we can think of the feature as consisting of an infinite number of points that all have this attribute value; in the geostatistical literature this is known as a variable with point support\naggregate the attribute is an aggregate, a summary value over the geometry; we can think of the feature as a single observation with a value that is associated with the entire geometry; this is also known as a variable having block support\n\nFor polygon data, typical examples of constant AGR (point support) variables are:\n\nland use for a land use polygon\nrock units or geologic strata in a geological map\nsoil type in a soil map\nelevation class in a elevation map that shows elevation as classes\nclimate zone in a climate zone map\n\nA typical property of such variables is that they have geometries that are not man-made and also not associated with a sensor device (such as remote sensing image pixel boundaries). Instead, the geometry follows from the variable observed.\nExamples for the aggregate AGR (block support) variables are:\n\npopulation, either as number of persons or as population density\nother socio-economic variables, summarised by area\naverage reflectance over a remote sensing pixel\ntotal emission of pollutants by region\nblock mean NO\\(_2\\) concentrations, as e.g. obtained by block kriging over square blocks or a dispersion model that predicts areal means\n\nA typical property of such variables is that associated geometries come for instance from legislation, observation devices or analysis choices, but not intrinsically from the observed variable.\nA third type of AGR arises when an attribute identifies a feature geometry; we call an attribute an identity variable when the associated geometry uniquely identifies the variable’s value (there are no other geometries with the same value). An example is county name: the name identifies the county, and is still the county for any sub-area (point support), but for arbitrary sub-areas, the attributes loses the identity property to become a constant attribute. An example is:\n\nan arbitrary point (or region) inside a county is still part of the county and must have the same value for county name, but it does not longer identify the (entire) geometry corresponding to that county\n\nThe challenge here is that spatial information (ignoring time for simplicity) belongs to different phenomena types (e.g. Scheider et al. 2016), including:\n\nfields: where over continuous space, every location corresponds to a single value, e.g. elevation, air quality, or land use\nobjects: found at a discrete set of locations, e.g. houses or persons\naggregates: e.g. sums, totals, averages of fields, counts or densities of objects, associated with lines or regions\n\nbut that different spatial geometry types (points, lines, polygons, raster cells) have no simple mapping to these phenomena types:\n\npoints may refer to sample locations of observations on fields (air quality) or to locations of objects\nlines may be used for objects (roads, rivers), contours of a field, or administrative borders\nraster pixels and polygons may reflect fields of a categorical variable such as land use (coverage), but also aggregates such as population density\n\nProperly specifying attribute-geometry relationships, and warning against their absence or cases when change in geometry (change of support) implies a change of information can help avoiding a large class of common spatial data analysis mistakes (Stasch et al. 2014) associated with the support of spatial data."
  },
  {
    "objectID": "05-Attributes.html#aggregating-and-summarising",
    "href": "05-Attributes.html#aggregating-and-summarising",
    "title": "5  Attributes and Support",
    "section": "5.2 Aggregating and summarising",
    "text": "5.2 Aggregating and summarising\nAggregating records in a table (or data.frame) involves two steps:\n\ngrouping records based on a grouping predicate, and\napplying an aggregation function to the attribute values of a group to summarize them into a single number.\n\nIn SQL, this looks for instance like\nSELECT GroupID, SUM(population) FROM table GROUP BY GroupID;\nindicating the aggregation function (SUM) and the grouping predicate (GroupID).\nR package dplyr for instance uses two steps to accomplish this: function group_by specifies the group membership of records, summarize computes data summaries (such as sum or mean) for each of the groups. R (base) function aggregate does both in a single function that takes the data table, the grouping predicate(s) and the aggregation function.\nAn example for the North Carolina counties is shown in Figure 5.1. Here, we grouped counties by their position (according to the quadrant in which the county centroid is with respect to ellipsoidal coordinate POINT(-79, 35.5)) and counted the number of disease cases per group. The result shows that the geometries of the resulting groups have been unioned (Section 3.2.6): this is necessary because the MULTIPOLYGON formed by just putting all the county geometries together would have many duplicate boundaries, and hence not be valid (Section 3.1.2).\n\n\nCode\nnc <- read_sf(system.file(\"gpkg/nc.gpkg\", package = \"sf\"))\n# encode quadrant by two logicals:\nnc$lng <- st_coordinates(st_centroid(st_geometry(nc)))[,1] > -79\nnc$lat <- st_coordinates(st_centroid(st_geometry(nc)))[,2] > 35.5\nnc.grp <- aggregate(nc[\"SID74\"], list(nc$lng, nc$lat), sum)\nplot(nc.grp[\"SID74\"], axes = TRUE)\n\n\n\n\n\nFigure 5.1: SID74 counts by county quadrant, with county polygons unioned by county quadrant\n\n\n\n\nPlotting collated county polygons is technically not a problem, but for this case would raise the wrong suggestion that the group sums relate to the counties, and not the group of counties.\nOne particular property of aggregation in this way is that each record is assigned to a single group; this has the advantage that the sum of the group-wise sums equals the sum of the ungrouped data: for variables that reflect amount, nothing gets lost and nothing is added. The newly formed geometry is the result of unioning the geometries of the records.\n\n\nCode\nnc <- st_transform(nc, 2264)\ngr <- st_sf(\n   label = apply(expand.grid(1:10, LETTERS[10:1])[,2:1], 1, paste0, collapse = \" \"),\n   geom = st_make_grid(nc))\nplot(st_geometry(nc), reset = FALSE, border = 'grey')\nplot(st_geometry(gr), add = TRUE)\n\n\n\n\n\nFigure 5.2: example target blocks layed out over North Carolina counties\n\n\n\n\nWhen we need an aggregate for a new area that is not a union of the geometries for a group of records, and we use a spatial predicate then single records may be matched to multiple groups. When taking the rectangles of Figure 5.2 as the target areas, and summing for each rectangle the disease cases of the counties that intersect with the rectangles of Figure 5.2 , the sum of these will be much larger:\n\n\nCode\na <- aggregate(nc[\"SID74\"], gr, sum)\nc(sid74_sum_counties = sum(nc$SID74), sid74_sum_rectangles = sum(a$SID74, na.rm = TRUE))\n#   sid74_sum_counties sid74_sum_rectangles \n#                  667                 2621\n\n\nChoosing another predicate, e.g. contains or covers would on the contrary result in much smaller values, because many counties are not contained by any the target geometries. However, there are a few cases where this approach might be good or satisfactory:\n\nwhen we want to aggregate POINT geometries by a set of polygons, and all points are contained by a single polygon. If points fall on a shared boundary than they are assigned to both polygons (this is the case for DE-9IM-based GEOS library; the s2geometry library has the option to define polygons as “semi-open”, which implies that points are assigned to single polygons when the polygons form a coverage)\nwhen aggregating many very small polygons or raster pixels over larger areas, e.g. averaging altitude from 30 m resolution raster over North Carolina counties, the error made by multiple matches may be insignificant\n\nA more comprehensive approach to aggregating spatial data associated to areas to larger, arbitrary shaped areas is by using area-weighted interpolation."
  },
  {
    "objectID": "05-Attributes.html#sec-area-weighted",
    "href": "05-Attributes.html#sec-area-weighted",
    "title": "5  Attributes and Support",
    "section": "5.3 Area-weighted interpolation",
    "text": "5.3 Area-weighted interpolation\nWhen we want to combine geometries and attributes of two datasets such that we get attribute values of a source dataset summarised for the geometries of a target, where source and target geometries are unrelated, area-weighted interpolation may be a simple approach. In effect, it considers the area of overlap of the source and target geometries, and uses that to weight the source attribute values into the target value (Goodchild and Lam 1980; Do, Thomas-Agnan, and Vanhems 2015a, 2015b; Do, Laurent, and Vanhems 2021). Here, we follow the notation of Do, Thomas-Agnan, and Vanhems (2015b).\nArea-weighted interpolation computes, for each of \\(q\\) spatial target areas \\(T_j\\), a weighted average from the values \\(Y_i\\) corresponding to the \\(p\\) spatial source areas \\(S_i\\),\n\\[\n\\hat{Y}_j(T_j) = \\sum_{i=1}^p w_{ij} Y_i(S_i)\n\\tag{5.1}\\]\nwhere the \\(w_{ij}\\) depend on the amount of overlap of \\(T_j\\) and \\(S_i\\), and the amount of overlap is \\(A_{ij} = T_j \\cap S_i\\). How \\(w_{ij}\\) depends on \\(A_{ij}\\) is discussed below.\nDifferent options exist for choosing weights, including methods using external variables (e.g. dasymetric mapping, Mennis (2003)). Two simple approaches for computing weights that do not use external variables arise, depending on whether the variable \\(Y\\) is intensive or extensive.\n\nSpatially extensive and intensive variables\nAn example of a extensive variable is population count. It is associated with an area, and if that area is cut into smaller areas, the population count is split accordingly: not necessary proportional to area, because population is rarely uniform, but split in such a way that the sum of the population count for the smaller areas equals that of the total. An example of a related variable that is intensive is population density. If an area is split into smaller areas, population density is not split similarly: the sum of the population densities for the smaller areas is a meaningless measure, as opposed to the average of the population densities which will be similar to the density of the total area.\nExtensive variables correspond to amounts, associated with a physical size (length, area, volume); for spatially extensive variables, if the area a value corresponds to is cut in parts, the values associated with the sub-area are split accordingly. In other words: the value is proportional to the support. Intensive variables are variables that do not have values proportional to support: if the area is split, values may vary but on average remain the same. The corresponding example of an intensive variable is population density: when we split an area into sub-areas, the sub-areas either have identical population densities (in case population is uniformly distributed) or, more realistically, have varying population densities that by necessity are both higher and lower than the density of the total area.\nWhen we assume that the extensive variable \\(Y\\) is uniformly distributed over space, the value \\(Y_{ij}\\), derived from \\(Y_i\\) for a sub-area of \\(S_i\\), \\(A_{ij} = T_j \\cap S_i\\) of \\(S_i\\) is\n\\[\\hat{Y}_{ij}(A_{ij}) = \\frac{|A_{ij}|}{|S_i|} Y_i(S_i)\\]\nwhere \\(|\\cdot|\\) denotes the spatial area. For estimating \\(Y_j(T_j)\\) we sum all the elements over area \\(T_j\\):\n\\[\n\\hat{Y}_j(T_j) = \\sum_{i=1}^p \\frac{|A_{ij}|}{|S_i|} Y_i(S_i)\n\\tag{5.2}\\]\nFor an intensive variable, under the assumption that the variable has a constant value over each area \\(S_i\\), the estimate for a sub-area equals that of the total,\n\\[\\hat{Y}_{ij} = Y_i(S_i)\\]\nand we can estimate the value of \\(Y\\) for a new spatial unit \\(T_j\\) by an area-weighted average of the source values:\n\\[\n\\hat{Y}_j(T_j) = \\sum_{i=1}^p \\frac{|A_{ij}|}{|T_j|} Y_i(S_i)\n\\tag{5.3}\\]\n\n\nDasymetric mapping\nDasymetric mapping distributes variables, such as population, known at a coarse spatial aggregation level over finer spatial units by using other variables that are associated with population distribution, such as land use, building density, or road density. The simplest approach to dasymetric mapping is obtained for extensive variables, where the ratio \\(|A_{ij}| / |S_i|\\) in (Equation 5.2) is replaced by the ratio of another extensive variable \\(X_{ij}(S_{ij})/X_i(S_i)\\), which has to be known for both the intersecting regions \\(S_{ij}\\) and the source regions \\(S_i\\). Do, Thomas-Agnan, and Vanhems (2015b) discuss several alternatives for intensive \\(Y\\) and/or \\(X\\), and cases where \\(X\\) is known for other areas.\n\n\nSupport in file formats\nGDAL’s vector API supports reading and writing so-called field domains, which can have a “split policy” and a “merge policy” indicating what should be done with attribute variables when geometries are split or merged. The values of these can be “duplicate” for split and “geometry weighted” for merge, in case of spatially intensive variables, or they can be “geometry ratio” for split and “sum” for merge, in case of spatially extensive variables. At the time of writing this, the file formats supporting this are GeoPackage and FileGDB."
  },
  {
    "objectID": "05-Attributes.html#sec-updownscaling",
    "href": "05-Attributes.html#sec-updownscaling",
    "title": "5  Attributes and Support",
    "section": "5.4 Up- and Downscaling",
    "text": "5.4 Up- and Downscaling\nUp- and downscaling refers in general to obtaining high-resolution information from low-resolution data (downscaling) or obtaining low-resolution information from high-resolution data (upscaling). Both are activities involve attributes’ relation to geometries and both change support. They are synonymous with aggregation (upscaling) and disaggregation (downscaling).\nThe simplest form of downscaling is sampling (or extracting) polygon, line or grid cell values at point locations. This works well for variables with point-support (“constant” AGR), but is at best approximate when the values are aggregates.\nChallenging applications for downscaling include high-resolution prediction of variables obtained by low-resolution weather prediction models or climate change models, and the high-resolution prediction of satellite image derived variables based on the fusion of sensors with different spatial and temporal resolutions.\nThe application of areal interpolation using (Equation 5.1) with its realisations for extensive (Equation 5.2) and intensive (Equation 5.3) variables allows moving information from any source area \\(S_i\\) to any target area \\(T_j\\) as long as the two areas have some overlap. This means that one can go arbitrarily to much larger units (aggregation) or to much smaller units (disaggregation). Of course this makes only sense to the extent that the assumptions hold: over the source regions extensive variables need to be uniformly distributed and intensive variables need to have constant value.\nThe ultimate disaggregation involves retrieving (extracting) point values from line or area data. For this, we cannot work with equations (Equation 5.2) or (Equation 5.3) because \\(|A_{ij}| = 0\\) for points, but under the assumption of having a constant value over the geometry, for intensive variables the value \\(Y_i(S_i)\\) can be assigned to points as long as all points can be uniquely assigned to a single source area \\(S_i\\). For polygon data, this implies that \\(Y\\) needs to be a coverage variable (Section 3.4).\nIn cases where values associated with areas are aggregate values over the area, the assumptions made by area-weighted interpolation or dasymetric mapping – uniformity or constant values over the source areas – are highly unrealistic. In such cases, these simple approaches still be reasonable approximations, for instance when:\n\nthe source and target area are nearly identical\nthe variability inside source units is very small, and the variable is nearly uniform or constant\n\nIn other cases, results obtained using these methods are merely consequences of unjustified assumptions. Statistical aggregation methods that can estimate quantities for larger regions from points or smaller regions include:\n\ndesign-based methods, which require that a probability sample is available from the target region, with known inclusion probabilities (Brus (2021), Section 10.1), and\nmodel-based methods, which assume a random field model with spatially correlated values (block kriging, Section 12.5)\n\nAlternative disaggregation methods include:\n\ndeterministic, smoothing-based approaches such as kernel- or spline-based smoothing methods (Tobler 1979; Martin 1989)\nstatistical, model-based approaches: area-to-area and area-to-point kriging (Kyriakidis 2004; Raim et al. 2021).\n## Exercises\n\nWhere relevant, try to make the following exercises with R.\n\nWhen we add a variable to the nc dataset by nc$State = \"North Carolina\" (i.e., all counties get assigned the same state name). Which value would you attach to this variable for the attribute-geometry relationship (agr)?\nCreate a new sf object from the geometry obtained by st_union(nc), and assign \"North Carolina\" to the variable State. Which agr can you now assign to this attribute variable?\nUse st_area to add a variable with name area to nc. Compare the area and AREA variables in the nc dataset. What are the units of AREA? Are the two linearly related? If there are discrepancies, what could be the cause?\nIs the area variable intensive or extensive? Is its agr equal to constant, identity or aggregate?\nConsider Figure 5.3 ; using the equations in Section 5.3.1, compute the area-weighted interpolations for (a) the dashed cell and (b) for the square enclosing all four solid cells, first for the case where the four cells represent (i) an extensive variable, and (ii) an intensive variable. The red numbers are the data values of the source areas.\n\n\n\nCode\ng <- st_make_grid(st_bbox(st_as_sfc(\"LINESTRING(0 0,1 1)\")), n = c(2,2))\npar(mar = rep(0,4))\nplot(g)\nplot(g[1] * diag(c(3/4, 1)) + c(0.25, 0.125), add = TRUE, lty = 2)\ntext(c(.2, .8, .2, .8), c(.2, .2, .8, .8), c(1,2,4,8), col = 'red')\n\n\n\n\n\nFigure 5.3: example data for area-weighted interpolation\n\n\n\n\n\n\n\n\n\nBrus, Dick J. 2021. “Statistical Approaches for Spatial Sample Survey: Persistent Misconceptions and New Developments.” European Journal of Soil Science 72 (2): 686–703. https://doi.org/https://doi.org/10.1111/ejss.12988.\n\n\nDo, Van Huyen, Thibault Laurent, and Anne Vanhems. 2021. “Guidelines on Areal Interpolation Methods.” In Advances in Contemporary Statistics and Econometrics: Festschrift in Honor of Christine Thomas-Agnan, edited by Abdelaati Daouia and Anne Ruiz-Gazen, 385–407. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-030-73249-3_20.\n\n\nDo, Van Huyen, Christine Thomas-Agnan, and Anne Vanhems. 2015a. “Accuracy of Areal Interpolation Methods for Count Data.” Spatial Statistics 14: 412–38. https://doi.org/10.1016/j.spasta.2015.07.005.\n\n\n———. 2015b. “Spatial Reallocation of Areal Data: A Review.” Rev. Econ. Rég. Urbaine 1/2: 27–58. https://www.tse-fr.eu/sites/default/files/medias/doc/wp/mad/wp_tse_397_v2.pdf.\n\n\nGoodchild, Michael F, and Nina Siu Ngan Lam. 1980. Areal Interpolation: A Variant of the Traditional Spatial Problem. Department of Geography, University of Western Ontario London, ON, Canada.\n\n\nKyriakidis, P. C. 2004. “A Geostatistical Framework for Areal-to-Point Spatial Interpolation.” Geographical Analysis 36: 259–89.\n\n\nMartin, D. 1989. “Mapping Population Data from Zone Centroid Locations.” Transactions of the Institute of British Geographers, New Series 14: 90–97.\n\n\nMennis, Jeremy. 2003. “Generating Surface Models of Population Using Dasymetric Mapping.” The Professional Geographer 55 (1): 31–42.\n\n\nRaim, A. M., S. H. Holan, J. R. Bradley, and C. K. Wikle. 2021. “Spatio-Temporal Change of Support Modeling with r.” Computational Statistics 36: 749–80. https://doi.org/https://doi.org/10.1007/s00180-020-01029-4 .\n\n\nScheider, Simon, Benedikt Gräler, Edzer Pebesma, and Christoph Stasch. 2016. “Modeling Spatiotemporal Information Generation.” International Journal of Geographical Information Science 30 (10): 1980–2008. https://doi.org/10.1080/13658816.2016.1151520.\n\n\nStasch, Christoph, Simon Scheider, Edzer Pebesma, and Werner Kuhn. 2014. “Meaningful Spatial Prediction and Aggregation.” Environmental Modelling & Software 51: 149–65. https://doi.org/10.1016/j.envsoft.2013.09.006.\n\n\nTobler, W. R. 1979. “Smooth Pycnophylactic Interpolation for Geographical Regions.” Journal of the American Statistical Association 74: 519–30."
  },
  {
    "objectID": "06-part-2.html",
    "href": "06-part-2.html",
    "title": "R for Spatial Data Science",
    "section": "",
    "text": "Part two of this book …"
  },
  {
    "objectID": "06-Cubes.html",
    "href": "06-Cubes.html",
    "title": "6  Data Cubes",
    "section": "",
    "text": "Data cubes arise naturally when we observe properties of a set of geometries repeatedly over time. Time information may sometimes be considered as an attribute of a feature, e.g. when we register the year of construction of a building, or the date of birth of a person (Chapter 5). In other cases it may refer to the time of observing an attribute, or the time for which a prediction of an attribute has been made. In these cases, time is on equal footing with space, and time and space together describe the physical dimensions over which we observe, model, make predictions or make forecasts.\nOne way of considering our world is that of a four-dimensionsal space, with three space and one time dimension. In that view, events become “things” or “objects” that have as duration their size on the time dimension (Galton 2004). Although such a view does not align well with how we experience and describe the world, from a data analytic perspective, four numbers, along with their reference systems, suffice to describe space and time coordinates of an observation associated with a point location and time instance.\nWe define data cubes as array data with one or more array dimensions associated with space and/or time (Lu, Appel, and Pebesma 2018). This implies that raster data, features with attributes, and time series data are all special cases of data cubes. Since we do not restrict to three-dimensional structures, we actually mean hypercubes rather than cubes, and as the cube extent of the different dimensions does not have to be identical, or have comparable units, the better term would be hyperrectangle. For simplicity, we talk about data cubes instead.\nA canonical form of a data cube is shown in Figure 6.1 : it shows in a perspective plot a set of raster layers for the same region that were collected (observed, or modelled) at different time steps. The three cube dimensions, longitude, latitude and time are thought of as being orthogonal. Arbitrary two-dimensional cube slices are obtained by fixing one of the dimensions at a particular value, one-dimensional slices are obtained by fixing two of the dimensions at a particular value, and a scalar is obtained by fixing three dimensions at a particular value."
  },
  {
    "objectID": "06-Cubes.html#a-four-dimensional-data-cube",
    "href": "06-Cubes.html#a-four-dimensional-data-cube",
    "title": "6  Data Cubes",
    "section": "6.1 A four-dimensional data cube",
    "text": "6.1 A four-dimensional data cube\n\n\nCode\n# (C) 2021, Jonathan Bahlmann, CC-BY-SA\n# https://github.com/Open-EO/openeo.org/tree/master/documentation/1.0/datacubes/.scripts\n# based on work by Edzer Pebesma, 2019, here: https://gist.github.com/edzer/5f1b0faa3e93073784e01d5a4bb60eca\n\n# plotting runs via a dummy stars object with x, y dimensions (no bands)\n# to not be overly dependent on an input image, time steps and bands\n# are displayed by replacing the matrix contained in the dummy stars object\n# every time something is plotted\n\n# packages, read input ----\nset.seed(1331)\nlibrary(stars)\nsuppressPackageStartupMessages(library(colorspace))\nsuppressPackageStartupMessages(library(scales))\n\n# make color palettes ----\nblues <- sequential_hcl(n = 20, h1 = 211, c1 = 80, l1 = 40, l2 = 100, p1 = 2)\ngreens <- sequential_hcl(n = 20, h1 = 134, c1 = 80, l1 = 40, l2 = 100, p1 = 2)\nreds <- sequential_hcl(n = 20, h1 = 360, c1 = 80, l1 = 40, l2 = 100, p1 = 2)\npurples <- sequential_hcl(n = 20, h1 = 299, c1 = 80, l1 = 40, l2 = 100, p1 = 2)\ngreys <- sequential_hcl(n = 20, h1 = 0, c1 = 0, l1 = 40, l2 = 100, p1 = 2)\n\n# matrices from raster ----\n# make input matrices from an actual raster image\ninput <- read_stars(\"data/iceland_delta_cutout_2.tif\") # this raster needs approx 6x7 format\n# if the input raster is changed, every image where a pixel value is written as text needs to be checked and corrected accordingly\ninput <- input[,,,1:4]\nwarped <- st_warp(input, crs = st_crs(input), cellsize = 200) # warp to approx. 6x7 pixel\n\n# these are only needed for resampling\nwarped_highres <- st_warp(warped, crs = st_crs(warped), cellsize = 100) # with different input, cellsize must be adapted\n# this is a bit of a trick, because 3:4 is different format than 6:7\n# when downsampling, the raster of origin isn't so important anyway\nwarped_lowres <- st_warp(warped_highres[,1:11,,], crs = st_crs(warped), cellsize = 390)\n# plot(warped_lowres)\n# image(warped[,,,1], text_values = TRUE)\n\nt1 <- floor(matrix(runif(42, -30, 150), ncol = 7)) # create timesteps 2 and 3 randomly\nt2 <- floor(matrix(runif(42, -250, 50), ncol = 7))\n\n# create dummy stars object ----\nmake_dummy_stars <- function(x, y, d1, d2, aff) {\n  m = warped_highres[[1]][1:x,1:y,1] # underlying raster doesn't matter because it's just dummy construct\n  dim(m) = c(x = x, y = y) # named dim\n  dummy = st_as_stars(m)\n  attr(dummy, \"dimensions\")[[1]]$delta = d1\n  attr(dummy, \"dimensions\")[[2]]$delta = d2\n  attr(attr(dummy, \"dimensions\"), \"raster\")$affine = c(aff, 0.0)\n  return(dummy)\n}\n\ns <- make_dummy_stars(6, 7, 2.5, -.5714286, -1.14) # mainly used, perspective\nf <- make_dummy_stars(6, 7, 1, 1, 0) # flat\nhighres <- make_dummy_stars(12, 14, 1.25, -.2857143, -.57) # for resampling\nlowres <- make_dummy_stars(3, 4, 5, -1, -2) # for resampling\n\n# matrices from image ----\nmake_matrix <- function(image, band, n = 42, ncol = 7, t = 0) {\n  # this is based on an input image with >= 4 input bands\n  # n is meant to cut off NAs, ncol is y, t is random matrix for time difference\n  return(matrix(image[,,,band][[1]][1:n], ncol = ncol) - t)\n  # before: b3 <- matrix(warped[,,,1][[1]][1:42], ncol = 7) - t2\n}\n\n# now use function: \nb1 <- make_matrix(warped, 1)\nb2 <- make_matrix(warped, 1, t = t1)\nb3 <- make_matrix(warped, 1, t = t2)\ng1 <- make_matrix(warped, 2)\ng2 <- make_matrix(warped, 2, t = t1)\ng3 <- make_matrix(warped, 2, t = t2)\nr1 <- make_matrix(warped, 3)\nr2 <- make_matrix(warped, 3, t = t1)\nr3 <- make_matrix(warped, 3, t = t2)\nn1 <- make_matrix(warped, 4)\nn2 <- make_matrix(warped, 4, t = t1)\nn3 <- make_matrix(warped, 4, t = t2)\n\n# plot functions ----\nplt <- function(x, yoffset = 0, add, li = TRUE, pal, print_geom = TRUE, border = .75, breaks = \"equal\") {\n  # pal is color palette\n  attr(x, \"dimensions\")[[2]]$offset = attr(x, \"dimensions\")[[2]]$offset + yoffset \n  l = st_as_sf(x, as_points = FALSE)\n  if (li)\n    pal <- lighten(pal, 0.2) # + rnorm(1, 0, 0.1))\n  if (! add)\n    plot(l, axes = FALSE, breaks = breaks, pal = pal, reset = FALSE, border = grey(border), key.pos = NULL, main = NULL, xlab = \"time\")\n  else\n    plot(l, axes = TRUE, breaks = breaks, pal = pal, add = TRUE, border = grey(border))\n  u <- st_union(l)\n  # print(u)\n  if(print_geom) {\n    plot(st_geometry(u), add = TRUE, col = NA, border = 'black', lwd = 2.5)\n  } else {\n    # not print geometry\n  }\n}\n\npl_stack <- function(s, x, y, add = TRUE, nrM, imgY = 7, inner = 1) {\n  # nrM is the timestep {1, 2, 3}, cause this function\n  # prints all 4 bands at once\n  attr(s, \"dimensions\")[[1]]$offset = x\n  attr(s, \"dimensions\")[[2]]$offset = y\n  # m <- r[[1]][y + 1:nrow,x + 1:ncol,1]\n  m <- eval(parse(text=paste0(\"n\", nrM)))\n  s[[1]] <- m[,c(imgY:1)] # turn around to have same orientation as flat plot\n  plt(s, 0, TRUE,  pal = purples)\n  m <- eval(parse(text=paste0(\"r\", nrM)))\n  s[[1]] <- m[,c(imgY:1)]\n  plt(s, 1*inner, TRUE,  pal = reds)\n  m <- eval(parse(text=paste0(\"g\", nrM)))\n  s[[1]] <- m[,c(imgY:1)]\n  plt(s, 2*inner, TRUE,  pal = greens)\n  m <- eval(parse(text=paste0(\"b\", nrM)))\n  s[[1]] <- m[,c(imgY:1)]\n  plt(s, 3*inner, TRUE, pal = blues) # li FALSE deleted\n}\n\n# flat plot function\n# prints any dummy stars with any single matrix to position\npl <- function(s, x, y, add = TRUE, randomize = FALSE, pal, m, print_geom = TRUE, border = .75, breaks = \"equal\") {\n  # m is matrix to replace image with\n  # m <- t(m)\n  attr(s, \"dimensions\")[[1]]$offset = x\n  attr(s, \"dimensions\")[[2]]$offset = y\n  # print(m)\n  s[[1]] <- m\n  plt(s, 0, add = TRUE, pal = pal, print_geom = print_geom, border = border, breaks = breaks)\n  #plot(s, text_values = TRUE)\n}\n\nprint_segments <- function(x, y, seg, by = 1, lwd = 4, col = \"black\") {\n  seg <- seg * by\n  seg[,1] <- seg[,1] + x\n  seg[,3] <- seg[,3] + x\n  seg[,2] <- seg[,2] + y\n  seg[,4] <- seg[,4] + y\n  segments(seg[,1], seg[,2], seg[,3], seg[,4], lwd = lwd, col = col)\n}\n\n# time series ----\n\n# from: cube1_ts_6x7_bigger.png\noffset = 26\nplot.new()\n#par(mar = c(3, 2, 7, 2))\npar(mar = c(0, 0, 0, 0))\n#plot.window(xlim = c(10, 50), ylim = c(-3, 10), asp = 1)\nplot.window(xlim = c(-15, 75), ylim = c(-3, 10), asp = 1)\npl_stack(s, 0, 0, nrM = 3)\npl_stack(s, offset, 0, nrM = 2)\npl_stack(s, 2 * offset, 0, nrM = 1)\n# po <- matrix(c(0,-8,7,0,15,3.5,  0,1,1,5,5,14), ncol = 2)\nheads <- matrix(c(3.5, 3.5 + offset, 3.5 + 2*offset, 14,14,14), ncol = 2)\npoints(heads, pch = 16) # 4 or 16\nsegments(c(-8, 7, 0, 15), c(-1,-1,3,3), 3.5, 14) # first stack pyramid\nsegments(c(-8, 7, 0, 15) + offset, c(-1,-1,3,3), 3.5 + offset, 14) # second stack pyramid\nsegments(c(-8, 7, 0, 15) + 2*offset, c(-1,-1,3,3), 3.5 + 2*offset, 14) # third stack pyramid\narrows(-13, 14, 72, 14, angle = 20, lwd = 2)  # timeline\ntext(7.5, 3.8, \"x\", col = \"black\")\ntext(-10, -2.5, \"bands\", srt = 90, col = \"black\")\ntext(-4.5, 1.8, \"y\", srt = 27.5, col = \"black\")\ny <- 15.8\ntext(69, y, \"time\", col = \"black\")\ntext(3.5, y, \"2020-10-01\", col = \"black\")\ntext(3.5 + offset, y, \"2020-10-13\", col = \"black\")\ntext(3.5 + 2*offset, y, \"2020-10-25\", col = \"black\")\n\n\n\n\n\nFigure 6.2: Four-dimensional raster data cube with dimensions x, y, bands and time\n\n\n\n\nFigure 6.2 depicts a four-dimensional raster data cube, where three-dimensional raster data cubes with a spectral dimension (“bands”) are organised along a fourth dimension, a time axis. Color image data always has three bands (Blue, Green, Red), and this example has a fourth band (near infrared, NIR), which is commonly found in spectral remote sensing data.\nFigure 6.3 shows exactly the same data, but layed out flat as a facet plot (or scatterplot matrix), where two dimensions (\\(x\\) and \\(y\\)) are aligned with (or nested within) the dimensions bands and time, respectively.\n\n\nCode\n# flat ----\nxlabels <- seq(attr(warped, \"dimensions\")[[1]]$offset + attr(warped, \"dimensions\")[[1]]$delta / 2, length.out = attr(warped, \"dimensions\")[[1]]$to, by = attr(warped, \"dimensions\")[[1]]$delta)\nylabels <- seq(attr(warped, \"dimensions\")[[2]]$offset + attr(warped, \"dimensions\")[[2]]$delta / 2, length.out = attr(warped, \"dimensions\")[[2]]$to, by = attr(warped, \"dimensions\")[[2]]$delta)\n\nprint_labels <- function(x, y, off, lab, horizontal, cex = 1) {\n  if(horizontal) { # x\n    for(i in 0:(length(lab)-1)) {\n      text(x + i*off, y, lab[i+1], cex = cex, srt = 90)\n    }\n  } else { # y\n    lab <- lab[length(lab):0]\n    for(i in 0:(length(lab)-1)) {\n      text(x, y + i*off, lab[i+1], cex = cex)\n    }\n  }\n}\n\n# before: width=1000, xlim(-2, 33), date labels x=31\nplot.new()\n# par(mar = c(0,0,0,0))\npar(mar = c(3,0,0,0))\nplot.window(xlim = c(-2, 40), ylim = c(0, 25), asp = 1)\npl(f, 7, 0, pal = blues, m = b1)\npl(f, 7, 10, pal = blues, m = b2)\npl(f, 7, 20, pal = blues, m = b3)\npl(f, 14, 0, pal = greens, m = g1)\npl(f, 14, 10, pal = greens, m = g2)\npl(f, 14, 20, pal = greens, m = g3)\npl(f, 21, 0, pal = reds, m = r1)\npl(f, 21, 10, pal = reds, m = r2)\npl(f, 21, 20, pal = reds, m = r3)\npl(f, 28, 0, pal = purples, m = n1)\npl(f, 28, 10, pal = purples, m = n2)\npl(f, 28, 20, pal = purples, m = n3)\nprint_labels(28.5, -2, 1, xlabels, horizontal = TRUE, cex = 0.7)\nprint_labels(36, 0.5, 1, ylabels, horizontal = FALSE, cex = 0.7)\n# arrows(6, 27, 6, 0, angle = 20, lwd = 2)\n# text(5, 14, \"time\", srt = 90, col = \"black\")\ntext(10, 28, \"blue\", col = \"black\")\ntext(17, 28, \"green\", col = \"black\")\ntext(24, 28, \"red\", col = \"black\")\ntext(31, 28, \"nir\", col = \"black\")\ntext(3, 23.5, \"2020-10-01\", col = \"black\")\ntext(3, 13.5, \"2020-10-13\", col = \"black\")\ntext(3, 3.5, \"2020-10-25\", col = \"black\")\n\n\n\n\n\nFigure 6.3: Four-dimensional raster data cube layed out flat over two dimensions"
  },
  {
    "objectID": "06-Cubes.html#dimensions-attributes-and-support",
    "href": "06-Cubes.html#dimensions-attributes-and-support",
    "title": "6  Data Cubes",
    "section": "6.2 Dimensions, attributes, and support",
    "text": "6.2 Dimensions, attributes, and support\nPhenomena in space and time can be thought of as functions with domain space and time, and with range one or more observed attributes. For clearly identifiable discrete events or objects, the range is typically discrete, and precise delineation involves describing the precise coordinates where a thing starts or stops, which is best suited by vector geometries. For continuous phenomena, variables that take on a value everywhere such as air temperature or land use type, there are infinitely many values to represent and a common approach is to discretize space and time regularly over the spatiotemporal domain (extent) of interest. This leads to a number of familiar data structures:\n\ntime series, depicted as time lines for functions of time\nimage or raster data for two-dimensional spatial data\ntime sequences of images for dynamic spatial data\n\nThe third form of this, where a variable \\(Z\\) depends on \\(x\\), \\(y\\) and \\(t\\), as in\n\\[Z = f(x, y, t)\\]\nis the archetype of a spatiotemporal array or data cube: the shape of the volume where points regularly discretizing the domain forms a cube. We call the variables that form the range (here: \\(x, y, t\\)) the cube dimensions. Data cubes may have multiple attributes, as in\n\\[\\{Z_1,Z_2,...,Z_p\\} = f(x, y, t)\\]\nand if \\(Z\\) is functional, e.g. reflectance values measured over the electromagnetic spectrum, the spectral wavelengths \\(\\lambda\\) may form an additional dimension, as in \\(Z = f(x,y,t,\\lambda)\\); Section 6.5 discusses the alternative of representing color bands as attributes.\nMultiple time dimensions arise for instance when making forecasts for different times in the future \\(t'\\) at different times \\(t\\), or when time is split into multiple dimensions (e.g. year, day-of-year, hour-of-day). The most general definition of a data cube is a functional mapping from \\(n\\) dimensions to \\(p\\) attributes:\n\\[\\{Z_1,Z_2,...,Z_p\\} = f(D_1,D_2,...,D_n)\\]\nHere, we will consider any dataset with one or more space dimensions and zero or more time dimensions as data cubes. That includes:\n\nsimple features (Section 3.1)\ntime series for sets of features\nraster data\nmulti-spectral raster data (images)\ntime series of multi-spectral raster data (video)\n\n\nRegular dimensions, GDAL’s geotransform\nData cubes are usually stored in multi-dimensional arrays, and the usual relationship between 1-based array index \\(i\\) and an associated regularly discretized dimension variable \\(x\\) is\n\\[x = o_x + (i-1) d_x\\]\nwith \\(o_x\\) the origin, and \\(d_x\\) the grid spacing for this dimension.\nFor more general cases like those in Figure 1.6 b-c, the relation between \\(x\\) and \\(y\\) and array indexes \\(i\\) and \\(j\\) is\n\\[x = o_x + (i-1) d_x + (j-1) a_1\\]\n\\[y = o_y + (i-1) a_2 + (j-1) d_y\\]\nWith two affine parameters \\(a_1\\) and \\(a_2\\); this is the so-called geotransform as used in GDAL. When \\(a_1=a_2=0\\), this reduces to the regular raster of Figure 1.6 a with square cells if \\(d_x = d_y\\). For integer indexes, the coordinates are that of the starting edge of a grid cell, and the cell area (pixel) spans a range corresponding to index values ranging from \\(i\\) (inclusive) to \\(i+1\\) (exclusive). For most common imagery formats, \\(d_y\\) is negative, indicating that image row index increases with decreasing \\(y\\) values (southward). To get the \\(x\\)- and \\(y\\)-coordinate of the grid cell center of the top left grid cell (in case of a negative \\(d_y\\)), we use \\(i=1.5\\) and \\(j=1.5\\).\nFor rectilinear rasters, a table that maps array index to dimension values is needed. NetCDF files for instance always stores all values of spatial dimension variables that correspond to the center of spatial grid cells, and may in addition store grid cell boundaries (which is needed to define rectlinear dimensions unambiguously).\nFor curvilinear rasters an array that maps every combination of \\(i,j\\) into \\(x,y\\) pairs is needed, or a parametric function that does this (e.g. an projection or its inverse). NetCDF files often provide both, when available.\n\n\nSupport along cube dimensions\nSection 5.1 defined spatial support of an attribute variable as the size (length, area, volume) of a geometry a particular observation or prediction is associated with. The same notion applies to temporal support. Although time is rarely reported by explicit time periods having a start- and end-time, in many cases either the time stamp implies a period (e.g. ISO-8601 indications like “2021” for a full year, “2021-01” for full month) or the time period is taken as the period from the time stamp of the current record up to but not including the time stamp of the next record.\nAn example is MODIS satellite imagery, where vegetation indexes (NDVI and EVI) are available as 16-day composites, meaning that over 16-day periods all available imagery is aggregated into a single image; such composites have temporal “block support”. Sentinel-2 or Landsat-8 data on the other hand are “snapshot” images and have temporal “point support”. When temporally aggregating data with temporal point support e.g. to monthly values one would select all images falling in the target time interval. When aggregating temporal block support imagery such as the MODIS 16-day composite, one might weigh images, e.g. according to the amount of overlap of the 16-day composite period and the target period, similar to area-weighted interpolation but over the time dimension."
  },
  {
    "objectID": "06-Cubes.html#sec-dcoperations",
    "href": "06-Cubes.html#sec-dcoperations",
    "title": "6  Data Cubes",
    "section": "6.3 Operations on data cubes",
    "text": "6.3 Operations on data cubes\n\nSlicing a cube: filter\nData cubes can be sliced into sub-cubes by fixing a dimension at a particular value. Figure 6.4 shows the sub-cubes obtained by doing with each of the dimensions. In this figure, the spatial filtering does not happen by fixing a single spatial dimension at a particular value, but by selecting a particular subregion, which is a more common operation. Fixing \\(x\\) or \\(y\\) would give a sub-cube along a transect of constant \\(x\\) or \\(y\\), which can be used to show a Hovmöller diagram, where an attribute is plotted (colored) in the space of one space and one time dimension.\n\n\nCode\n# filter ----\n# mask <- matrix(c(rep(NA, 26), 1,NA,1,NA,1,1,1, rep(NA, 9)), ncol = 7)\nmask <- matrix(c(NA,NA,NA,NA,NA,NA,\n                 NA,NA,NA,NA,NA,NA,\n                 NA,NA,NA, 1, 1, 1,\n                 NA,NA, 1, 1, 1,NA,\n                 NA,NA,NA, 1, 1,NA,\n                 NA,NA,NA,NA,NA,NA,\n                 NA,NA,NA,NA,NA,NA), ncol = 7)\n\nprint_grid <- function(x, y) {\n  pl(f, 0+x, 0+y, pal = blues, m = b1)\n  pl(f, 0+x, 10+y, pal = blues, m = b2)\n  pl(f, 0+x, 20+y, pal = blues, m = b3)\n  pl(f, 7+x, 0+y, pal = greens, m = g1)\n  pl(f, 7+x, 10+y, pal = greens, m = g2)\n  pl(f, 7+x, 20+y, pal = greens, m = g3)\n  pl(f, 14+x, 0+y, pal = reds, m = r1)\n  pl(f, 14+x, 10+y, pal = reds, m = r2)\n  pl(f, 14+x, 20+y, pal = reds, m = r3)\n  pl(f, 21+x, 0+y, pal = purples, m = n1)\n  pl(f, 21+x, 10+y, pal = purples, m = n2)\n  pl(f, 21+x, 20+y, pal = purples, m = n3)\n}\nprint_alpha_grid <- function(x,y, alp = 0.2, geom = FALSE) {\n  pl(f, 0+x, 0+y, pal = alpha(blues, alp), print_geom = geom,  m = b1, border = 1)\n  pl(f, 0+x, 10+y, pal = alpha(blues, alp), print_geom = geom,  m = b2, border = 1)\n  pl(f, 0+x, 20+y, pal = alpha(blues, alp), print_geom = geom,  m = b3, border = 1)\n  pl(f, 7+x, 0+y, pal = alpha(greens, alp), print_geom = geom,  m = g1, border = 1)\n  pl(f, 7+x, 10+y, pal = alpha(greens, alp), print_geom = geom,  m = g2, border = 1)\n  pl(f, 7+x, 20+y, pal = alpha(greens, alp), print_geom = geom,  m = g3, border = 1)\n  pl(f, 14+x, 0+y, pal = alpha(reds, alp), print_geom = geom,  m = r1, border = 1)\n  pl(f, 14+x, 10+y, pal = alpha(reds, alp), print_geom = geom,  m = r2, border = 1)\n  pl(f, 14+x, 20+y, pal = alpha(reds, alp), print_geom = geom,  m = r3, border = 1)\n  pl(f, 21+x, 0+y, pal = alpha(purples, alp), print_geom = geom,  m = n1, border = 1)\n  pl(f, 21+x, 10+y, pal = alpha(purples, alp), print_geom = geom,  m = n2, border = 1)\n  invisible(pl(f, 21+x, 20+y, pal = alpha(purples, alp), print_geom = geom,  m = n3, border = 1))\n}\n\nprint_grid_filter <- function(x, y) {\n  pl(f, 0+x, 0+y, pal = blues, m = matrix(b1[mask == TRUE], ncol = 7))\n  pl(f, 0+x, 10+y, pal = blues, m = matrix(b2[mask == TRUE], ncol = 7))\n  pl(f, 0+x, 20+y, pal = blues, m = matrix(b3[mask == TRUE], ncol = 7))\n  pl(f, 7+x, 0+y, pal = greens, m = matrix(g1[mask == TRUE], ncol = 7))\n  pl(f, 7+x, 10+y, pal = greens, m = matrix(g2[mask == TRUE], ncol = 7))\n  pl(f, 7+x, 20+y, pal = greens, m = matrix(g3[mask == TRUE], ncol = 7))\n  pl(f, 14+x, 0+y, pal = reds, m = matrix(r1[mask == TRUE], ncol = 7))\n  pl(f, 14+x, 10+y, pal = reds, m = matrix(r2[mask == TRUE], ncol = 7))\n  pl(f, 14+x, 20+y, pal = reds, m = matrix(r3[mask == TRUE], ncol = 7))\n  pl(f, 21+x, 0+y, pal = purples, m = matrix(n1[mask == TRUE], ncol = 7))\n  pl(f, 21+x, 10+y, pal = purples, m = matrix(n2[mask == TRUE], ncol = 7))\n  pl(f, 21+x, 20+y, pal = purples, m = matrix(n3[mask == TRUE], ncol = 7))\n}\n\nprint_grid_time_filter <- function(x, y) { # 3x1, 28x7\n  pl(f, 0+x, 10+y, pal = blues, m = b3)\n  pl(f, 7+x, 10+y, pal = greens, m = g3)\n  pl(f, 14+x, 10+y, pal = reds, m = r3)\n  pl(f, 21+x, 10+y, pal = purples, m = n3)\n}\n\nprint_grid_bands_filter <- function(x, y, pal = greys) { # 1x3 6x27\n  pl(f, 0+x, 0+y, pal = pal, m = n1)\n  pl(f, 0+x, 10+y, pal = pal, m = n2)\n  pl(f, 0+x, 20+y, pal = pal, m = n3)\n}\n\n# build exactly like reduce\nplot.new()\npar(mar = c(3,3,3,3))\nx <- 120\ny <- 100\ndown <- 0\nplot.window(xlim = c(0, x), ylim = c(0, y), asp = 1)\nprint_grid(x/2-28/2,y-27)\nprint_alpha_grid((x/3-28)/2, 0-down) # alpha grid\nprint_grid_time_filter((x/3-28)/2, -10-down) # select 3rd\nprint_alpha_grid(x/3+((x/3-6)/2) -10.5, 0-down) # alpha grid\nprint_grid_bands_filter(x/3+((x/3-12.4)), 0-down, pal = purples)\nprint_alpha_grid(2*(x/3)+((x/3-28)/2), 0-down) # alpha grid\nprint_grid_filter(2*(x/3)+((x/3-28)/2), 0-down)\ntext(3, 13.5-down, \"time\", srt = 90, col = \"black\")\ntext(43, 13.5-down, \"time\", srt = 90, col = \"black\")\ntext(83, 13.5-down, \"time\", srt = 90, col = \"black\")\ntext(20, 30, \"bands\", col = \"black\")\ntext(60, 30, \"bands\", col = \"black\")\ntext(100, 30, \"bands\", col = \"black\")\narrows(x/2-28/2,y-30, x/6,32, angle = 20, lwd = 2)\narrows(x/2,y-30, x/2,32, angle = 20, lwd = 2)\narrows(x/2+28/2,y-30, 100, 32, angle = 20, lwd = 2)\n# points(seq(1,120,10), seq(1,120,10))\ntext(28.5,49, \"filter temporally\", srt = 55.5, col = \"black\", cex = 0.8)\ntext(57,49, \"filter bands\", srt = 90, col = \"black\", cex = 0.8)\ntext(91.5,49, \"filter spatially\", srt = -55.5, col = \"black\", cex = 0.8)\nprint_labels(x = x/2-28/2 + 3, y = y+4, off = 7, lab = c(\"blue\", \"green\", \"red\", \"nir\"),\n             horizontal = TRUE, cex = 0.6)\nprint_labels(x = x/2-28/2 - 9, y = y-23, off = 10, lab = c(\"2020-10-01\", \"2020-10-13\", \"2020-10-25\"),\n             horizontal = FALSE, cex = 0.6)\nprint_labels(x = x/2-28/2 + 21.5, y = y-30, off = 1, lab = xlabels,\n             horizontal = TRUE, cex = 0.3)\nprint_labels(x = x/2-28/2 + 30, y = y-26.5, off = 1, lab = ylabels,\n             horizontal = FALSE, cex = 0.3)\n\n\n\n\n\nFigure 6.4: Data cube filtering by time, band or spatially\n\n\n\n\n\n\nApplying functions to dimensions\nA common analysis involves applying a function over one or more cube dimensions. Simple cases arise where a function such as abs, sin or sqrt is applied to all values in the cube, or when a function takes all values in the cube and returns a single scalar, e.g. when one computes the mean or maximum value over the entire cube. Other options include applying the function to selected dimensions, e.g. applying a temporal low-pass filter to every individual (pixel/band) time series as shown in Figure 6.6 , or applying a spatial low-pass filter to every spatial slice (i.e. every band/time combination), shown in Figure 6.5.\n\n\nCode\n# apply ----\nprint_text = function(s, x, y, m) {\n  # m <- t(m) # transverse for correct order\n  # print(m)\n  r <- rep(seq(0.5, 5.5, 1), 7)\n  r <- r + x # consider offsets\n  u <- c(rep(0.5, 6), rep(1.5, 6), rep(2.5, 6), \n         rep(3.5, 6), rep(4.5, 6), rep(5.5, 6), rep(6.5, 6))\n  u <- u + y # offset\n  tab <- matrix(c(r,u), nrow = 42, byrow = FALSE) # make point table\n  for (i in 1:42) {\n    #text(tab[i, 1], tab[i, 2], labels = paste0(\"\", m[i]), cex = 1.1)\n    text(tab[i, 1], tab[i, 2], labels = paste0(\"\", m[i]), cex = 0.8)\n    }\n}\n\nabs_brks <- seq(-500,500, 50)\nabs_pal <- sequential_hcl(n = 20, h1 = 211, c1 = 80, l1 = 30, l2 = 100, p1 = 1.2)\n\n#png(\"exp_apply_unary.png\", width = 2400, height = 1000, pointsize = 24)\n#plot.new()\n#par(mar = c(2,2,2,2))\n#x = 30\n#y = 7.5\n#plot.window(xlim = c(0, x), ylim = c(0, y), asp = 1)\n#pl(f, 3, 2, pal = abs_pal, m = b3 - 200, breaks = abs_brks)\n#pl(f, 1.5, .5, pal = abs_pal, m = b2 - 200, breaks = abs_brks)\n#pl(f, 0, -1, pal = abs_pal, m = b1 - 200, breaks = abs_brks)\n#print_text(s, 0, -1, m = b1 - 200)\n#pl(f, 23, 2, pal = abs_pal, m = abs(b3 - 200), breaks = abs_brks)\n#pl(f, 21.5, 0.5, pal = abs_pal, m = abs(b2 - 200), breaks = abs_brks)\n#pl(f, 20, -1, pal = abs_pal, m = abs(b1 - 200), breaks = abs_brks)\n#print_text(s, 20, -1, m = abs(b1 - 200))\n#arrows(11, 4, 17.5, 4, lwd = 3)\n#text(14.3, 3.5, \"absolute()\", cex = 1.4)\n#dev.off()\n\nvNeumann_seg <- matrix(c(c(0,0,1,1,2,2,1,1,0,0,-1,-1), c(0,-1,-1,0,0,1,1,2,2,1,1,0), \n                         c(0,1,1,2,2,1,1,0,0,-1,-1,0), c(-1,-1,0,0,1,1,2,2,1,1,0,0)), ncol = 4)\n\napply_filter <- function(input, pad = TRUE, padValue = 1) {\n  ras <- raster::focal(raster::raster(input), w = matrix(c(0,0.2,0, 0.2,0.2,0.2, 0,0.2,0), ncol = 3), pad = pad, padValue = padValue)\n  ras <- raster::as.matrix(ras)\n  ras[ras == \"NaN\"] <- -999\n  return(floor(ras))\n}\n\nbrks <- seq(0,1000, 50)\nplot.new()\npar(mar = c(0,2,0,0))\nx = 30\ny = 7.5\nplot.window(xlim = c(0, x), ylim = c(0, y), asp = 1)\npl(f, 3, 2, pal = blues, m = b3, breaks = brks)\npl(f, 1.5, .5, pal = blues, m = b2, breaks = brks)\npl(f, 0, -1, pal = blues, m = b1, breaks = brks)\nprint_text(s, 0, -1, m = b1) # print text on left first stack\nprint_segments(2, 3, seg = vNeumann_seg, lwd = 3)\npl(f, 23, 2, pal = blues, m = apply_filter(b3), breaks = brks)\npl(f, 21.5, 0.5, pal = blues, m = apply_filter(b2), breaks = brks)\npl(f, 20, -1, pal = blues, m = apply_filter(b1), breaks = brks)\nprint_text(s, 20, -1, m = apply_filter(b1)) # set pad = FALSE for -99\nprint_segments(22, 3, seg = vNeumann_seg, lwd = 3)\narrows(11, 4, 17.5, 4, lwd = 3)\ntext(14.3, 3.5, \"apply_kernel()\", cex = 1.4)\nprint_segments(13.8, 1, seg = vNeumann_seg, lwd = 3)\ncex = .8\ntext(14.3, 1.5, \"0.2\", cex = cex)\ntext(13.3, 1.5, \"0.2\", cex = cex)\ntext(15.3, 1.5, \"0.2\", cex = cex)\ntext(14.3, 2.5, \"0.2\", cex = cex)\ntext(14.3, .5, \"0.2\", cex = cex)\n\n\n\n\n\nFigure 6.5: Low pass filtering of spatial slices\n\n\n\n\n\n\nCode\ntime_arrow_seg <- matrix(c(c(-1.0, 0.3, 1.5, 2.7, 3.9, 5.1), c(-1.0, 0.3, 1.5, 2.7, 3.9, 5.1),\n                           c(-0.5, 0.7, 1.9, 3.1, 4.3, 5.6), c(-0.5, 0.7, 1.9, 3.1, 4.3, 5.6)), ncol = 4)\ntime_arrow_flag_seg <- matrix(c(c(-1.0, 1.5, 2.7, 3.9), c(-1.0, 1.5, 2.7, 3.9),\n                                c(0.7, 1.9, 3.1, 5.6), c(0.7, 1.9, 3.1, 5.6)), ncol = 4)\n\nb11 <- b2 - t1\nb12 <- b1 - t2 + t1\n\n# png(\"exp_apply_ts.png\", width = 2400, height = 1000, pointsize = 24)\nplot.new()\npar(mar = c(2,2,2,2))\nx <- 30\ny <- 10 # 7.5\nplot.window(xlim = c(0, x), ylim = c(0, y), asp = 1)\npl(f, 4.8, 3.8, pal = blues, m = b3, breaks = brks)\nprint_text(s, 4.8, 3.8, m = b3)\npl(f, 3.6, 2.6, pal = blues, m = b11, breaks = brks)\nprint_text(s, 3.6, 2.6, m = b11)\npl(f, 2.4, 1.4, pal = blues, m = b12, breaks = brks)\nprint_text(s, 2.4, 1.4, m = b12)\npl(f, 1.2, .2, pal = blues, m = b2, breaks = brks)\nprint_text(s, 1.2, .2, m = b2)\npl(f, 0, -1, pal = blues, m = b1, breaks = brks)\nprint_text(s, 0, -1, m = b1) # print text on left first stack\npl(f, 24.8, 3.8, pal = alpha(greys, 0.1), m = matrix(rep(\"NA\", 42), ncol = 7))\npl(f, 23.6, 2.6, pal = blues, m = (b12 + b11 + b3) / 3, breaks = brks)\nprint_text(s, 23.6, 2.6, m = floor((b12 + b11 + b3) / 3))\npl(f, 22.4, 1.4, pal = blues, m = (b2 + b12 + b11) / 3, breaks = brks)\nprint_text(s, 22.4, 1.4, m = floor((b2 + b12 + b11) / 3))\npl(f, 21.2, .2, pal = blues, m = (b1 + b2 + b12) / 3, breaks = brks)\nprint_text(s, 21.2, .2, m = floor((b1 + b2 + b12) / 3))\npl(f, 20, -1, pal = alpha(greys, 0.1), m = matrix(rep(\"NA\", 42), ncol = 7))\nprint_segments(5.7, 1.7, seg = time_arrow_seg, col = \"forestgreen\")\narrows(12.5, 9, 20, 9, lwd = 2)\ncex <- .9\ntext(16.3, 8.3, \"apply_dimension(dimension = 't')\", cex = cex)\nprint_segments(9.7, 1.7, time_arrow_seg, col = \"forestgreen\") # draw ma explanation\ntext(-0.5 + 10, -0.5 + 2, \"496\", cex = cex)\ntext(.7 + 10, .7 + 2, \"363\", cex = cex)\ntext(1.9 + 10, 1.9 + 2, \"658\", cex = cex)\ntext(3.1 + 10, 3.1 + 2, \"230\", cex = cex)\ntext(4.3 + 10, 4.3 + 2, \"525\", cex = cex)\nt_formula <- expression(\"t\"[n]*\" = (t\"[n-1]*\" + t\"[n]*\" + t\"[n+1]*\") / 3\")\n# text(13.8, 3, t_formula, srt = 45, cex = 1.2)\ntext(14.4, 3.6, \"calculate moving average\", srt = 45, cex = cex)\narrows(15, 5.7, 18, 5.7, lwd = 2)\nprint_segments(15.4, 1.7, seg = time_arrow_seg, col = \"forestgreen\") # draw ma explanation\ntext(-0.5 + 15.7, -0.5 + 2, \"NA\", cex = cex)\ntext(.7 + 15.7, .7 + 2, \"505\", cex = cex)\ntext(1.9 + 15.7, 1.9 + 2, \"417\", cex = cex)\ntext(3.1 + 15.7, 3.1 + 2, \"471\", cex = cex)\ntext(4.3 + 15.7, 4.3 + 2, \"NA\", cex = cex)\nprint_segments(25.7, 1.7, seg = time_arrow_seg, col = \"forestgreen\")\n\n\n\n\n\nFigure 6.6: Low pass filtering of time series\n\n\n\n\n\n\nReducing dimensions\nWhen applying function mean to an entire data cube, all dimensions vanish: the resulting “data cube” has dimensionality zero. We can also apply functions to a limited set of dimensions such that selected dimensions vanish, or are reduced. We already saw that filtering is a special case of this, but more in general we could for instance compute the maximum of every time series, the mean over every spatial slice, or a band index such as NDVI that summarizes different spectral values into a single new “band” with the index value. Figure 6.7 illustrates these options.\n\n\nCode\n# reduce ----\n\n# calc mean over time\ntimeB <- (b1 + b2 + b3) / 3\ntimeG <- (g1 + g2 + g3) / 3\ntimeR <- (r1 + r2 + r3) / 3\ntimeN <- (n1 + n2 + n3) / 3\n\nprint_grid_time <- function(x, y) { # 3x1, 28x7\n  pl(f, 0+x, 10+y, pal = blues, m = timeB)\n  pl(f, 7+x, 10+y, pal = greens, m = timeG)\n  pl(f, 14+x, 10+y, pal = reds, m = timeR)\n  pl(f, 21+x, 10+y, pal = purples, m = timeN)\n}\n\n# calc ndvi\nndvi1 <- (n1 - r1) / (n1 + r1)\nndvi2 <- (n2 - r2) / (n2 + r2)\nndvi3 <- (n3 - r3) / (n3 + r3)\n\nprint_grid_bands <- function(x, y, pal = greys) { # 1x3 6x27\n  pl(f, 0+x, 0+y, pal = pal, m = ndvi1)\n  pl(f, 0+x, 10+y, pal = pal, m = ndvi2)\n  pl(f, 0+x, 20+y, pal = pal, m = ndvi3)\n}\n\nplte = function(s, x, y, add = TRUE, randomize = FALSE, pal, m) {\n  attr(s, \"dimensions\")[[1]]$offset = x\n  attr(s, \"dimensions\")[[2]]$offset = y\n  # m = r[[1]][y + 1:nrow,x + 1:ncol,1]\n  # dim(m) = c(x = nrow, y = ncol) # named dim\n  # s[[1]] = m\n  # me <- floor(mean(s[[1]]))\n  me <- floor(mean(m))\n  if (me[1] > 100) { # in case non-artificial grids with very high\n    me <- m / 10     # numbers are used, make them smaller\n    me <- floor(mean(me))\n  }\n  text(x,y,me,cex = 0.8)\n}\n\nprint_grid_spat <- function(x, y) {\n  x = x + 3\n  y = y + 3.5\n  plte(s, 0+x, 0+y, pal = blues, m = b1)\n  plte(s, 0+x, 10+y, pal = blues, m = b2)\n  plte(s, 0+x, 20+y, pal = blues, m = b3)\n  plte(s, 7+x, 0+y, pal = greens, m = g1)\n  plte(s, 7+x, 10+y, pal = greens, m = g2)\n  plte(s, 7+x, 20+y, pal = greens, m = g3)\n  plte(s, 14+x, 0+y, pal = reds, m = r1)\n  plte(s, 14+x, 10+y, pal = reds, m = r2)\n  plte(s, 14+x, 20+y, pal = reds, m = r3)\n  plte(s, 21+x, 0+y, pal = purples, m = n1)\n  plte(s, 21+x, 10+y, pal = purples, m = n2)\n  plte(s, 21+x, 20+y, pal = purples, m = n3)\n}\n\n# png(\"exp_reduce.png\", width = 1200, height = 1000, pointsize = 32)\nplot.new()\n#par(mar = c(3,3,3,3))\npar(mar = c(3,0,2,0))\nx = 120\ny = 100\nplot.window(xlim = c(0, x), ylim = c(0, y), asp = 1)\nprint_grid(x/2-28/2,y-27)\n# print_alpha_grid((x/3-28)/2, 0) # alpha grid\nprint_grid_time((x/3-28)/2, 0) # off = 5.5\n# print_alpha_grid(x/3+((x/3-6)/2) -10.5, 0) # alpha grid\nprint_grid_bands(x/3+((x/3-6)/2), 0)\nprint_alpha_grid(2*(x/3)+((x/3-28)/2), 0, alp = 0, geom = TRUE) # alpha grid\nprint_grid_spat(2*(x/3)+((x/3-28)/2), 0)\ntext(3, 13.5, \"time\", srt = 90, col = \"black\")\n#segments(3.6, 8, 3.7, 19, col = \"red\", lwd=3)\nsegments(3.4, 8, 3.4, 19, col = \"red\", lwd = 3)\ntext(43, 13.5, \"time\", srt = 90, col = \"black\")\ntext(83, 13.5, \"time\", srt = 90, col = \"black\")\ntext(20, 30, \"bands\", col = \"black\")\ntext(60, 30, \"bands\", col = \"black\")\nsegments(53,29.8, 67,29.8, col = \"red\", lwd = 3)\ntext(100, 30, \"bands\", col = \"black\")\ntext(30, 7, \"x\", col = \"black\")\ntext(36, 13, \"y\", col = \"black\")\ntext(60, -3, \"x\", col = \"black\")\ntext(66, 3, \"y\", col = \"black\")\ntext(110, -3, \"x\", col = \"black\")\ntext(116, 3, \"y\", col = \"black\")\nsegments(108,-2.4, 112,-3.2, col = \"red\", lwd = 3)\nsegments(114,3.2, 118,2.4, col = \"red\", lwd = 3)\ntext(60, y+4, \"bands\", col = \"black\") # dim names on main\ntext(43, y-14, \"time\", srt = 90, col = \"black\")\ntext(x/2-28/2 + 24, y-30, \"x\", col = \"black\")\ntext(x/2-28/2 + 30, y-24, \"y\", col = \"black\")\narrows(x/2-28/2,y-30, x/6,32, angle = 20, lwd = 2)\narrows(x/2,y-30, x/2,32, angle = 20, lwd = 2)\narrows(x/2+28/2,y-30, 100, 32, angle = 20, lwd = 2)\n# points(seq(1,120,10), seq(1,120,10))\ntext(28.5,49, \"reduce temporally\", srt = 55.5, col = \"black\", cex = 0.8)\ntext(57,49, \"reduce bands\", srt = 90, col = \"black\", cex = 0.8)\ntext(91.5,49, \"reduce spatially\", srt = -55.5, col = \"black\", cex = 0.8)\n\n\n\n\n\nFigure 6.7: Reducing data cube dimensions"
  },
  {
    "objectID": "06-Cubes.html#sec-vectordatacubes",
    "href": "06-Cubes.html#sec-vectordatacubes",
    "title": "6  Data Cubes",
    "section": "6.4 Aggregating raster to vector cubes",
    "text": "6.4 Aggregating raster to vector cubes\nFigure 6.8 illustrates how a four-dimensional raster data cube can be aggregated to a three-dimensional vector data cube. Pixels in the raster are grouped by spatial intersection with a set of vector geometries, and each group is then reduced to a single value by an aggregation function such as mean or max. In the example, the two spatial dimensions \\(x\\) and \\(y\\) reduce to a single dimension, the one-dimensional sequence of feature geometries, with geometries that are defined in the space of \\(x\\) and \\(y\\). Grouping geometries can also be POINT geometries, in which case the aggregation function is obsolete as single values at the POINT locations are extracted, e.g. by querying a pixels value or by interpolating from the nearest pixels.\n\n\nCode\n# aggregate ----\n\nmask_agg <- matrix(c(NA,NA,NA,NA,NA,NA,\n                 NA, 1, 1,NA,NA,NA,\n                  1, 1,NA,NA, 1,NA,\n                  1,NA,NA, 1, 1,NA,\n                  1,NA,NA, 1, 1,NA,\n                  1,NA,NA,NA, 1,NA,\n                 NA,NA,NA,NA,NA,NA), ncol = 7)\n\npl_stack_agg <- function(s, x, y, add = TRUE, nrM, imgY = 7, inner = 1) {\n  # pl_stack that masks the added matrices\n  # nrM is the timestep {1, 2, 3}, cause this function\n  # prints all 4 bands at once\n  attr(s, \"dimensions\")[[1]]$offset = x\n  attr(s, \"dimensions\")[[2]]$offset = y\n  # m = r[[1]][y + 1:nrow,x + 1:ncol,1]\n  m <- eval(parse(text=paste0(\"n\", nrM)))\n  m <- matrix(m[mask_agg == TRUE], ncol = 7)\n  s[[1]] = m[,c(imgY:1)] # turn around to have same orientation as flat plot\n  plt(s, 0, TRUE,  pal = purples)\n  m <- eval(parse(text=paste0(\"r\", nrM)))\n  m <- matrix(m[mask_agg == TRUE], ncol = 7)\n  s[[1]] = m[,c(imgY:1)]\n  plt(s, 1*inner, TRUE,  pal = reds)\n  m <- eval(parse(text=paste0(\"g\", nrM)))\n  m <- matrix(m[mask_agg == TRUE], ncol = 7)\n  s[[1]] = m[,c(imgY:1)]\n  plt(s, 2*inner, TRUE,  pal = greens)\n  m <- eval(parse(text=paste0(\"b\", nrM)))\n  m <- matrix(m[mask_agg == TRUE], ncol = 7)\n  s[[1]] = m[,c(imgY:1)]\n  plt(s, 3*inner, TRUE, pal = blues) # li FALSE\n}\n\npolygon_1 <- matrix(c(c(0.0, 5.1, 4.9,-2.3), c(0.0, 2.4, 3.1, 1.8),\n                      c(5.1, 4.9,-2.3, 0.0), c(2.4, 3.1, 1.8, 0.0)), ncol = 4)\n\na <- make_dummy_stars(6, 7, 5, -1.14, -2.28)\n\nprint_vector_content <- function(x, y, cex = 0.8) {\n  vec <- floor(rnorm(8, 250, 100))\n  text( 0 + x,12 + y, vec[1], cex = cex)\n  text( 0 + x, 8 + y, vec[2], cex = cex)\n  text( 0 + x, 4 + y, vec[3], cex = cex)\n  text( 0 + x, 0 + y, vec[4], cex = cex)\n  text( 12 + x,12 + y, vec[5], cex = cex)\n  text( 12 + x, 8 + y, vec[6], cex = cex)\n  text( 12 + x, 4 + y, vec[7], cex = cex)\n  text( 12 + x, 0 + y, vec[8], cex = cex)\n}\n\nprint_ts <- function(off2, yoff2) {\n  pl_stack(s, 0 + off2, yoff2, nrM = 3) # input 2\n  pl_stack(s, off + off2, yoff2, nrM = 2)\n  pl_stack(s, 2 * off + off2, yoff2, nrM = 1)\n  arrows(-13 + off2, 14 + yoff2, 72 + off2, 14 + yoff2, angle = 20, lwd = 2)  # timeline\n  heads <- matrix(c(3.5+off2, 3.5 + off + off2, 3.5 + 2*off + off2, 14+yoff2,14+yoff2,14+yoff2), ncol = 2)\n  points(heads, pch = 16) # 4 or 16\n  segments(c(-8, 7, 0, 15)+off2, c(-1,-1,3,3)+yoff2, 3.5+off2, 14+yoff2) # first stack pyramid\n  segments(c(-8, 7, 0, 15) + off + off2, c(-1,-1,3,3)+yoff2, 3.5 + off + off2, 14+yoff2) # second stack pyramid\n  segments(c(-8, 7, 0, 15) + 2*off + off2, c(-1,-1,3,3)+yoff2, 3.5 + 2*off + off2, 14+yoff2) # third stack pyramid\n  text(7.5+off2, 4.3+yoff2, \"x\", col = \"black\", cex = secText)\n  text(-9.5+off2, -2.5+yoff2, \"bands\", srt = 90, col = \"black\", cex = secText)\n  text(-4.5+off2, 2+yoff2, \"y\", srt = 27.5, col = \"black\", cex = secText)\n  text(69+off2, 15.5+yoff2+1, \"time\", col = \"black\")\n  text(3.5+off2, 15.5+yoff2, \"2020-10-01\", col = \"black\")\n  text(3.5 + off + off2, 15.5+yoff2, \"2020-10-13\", col = \"black\")\n  text(3.5 + 2*off + off2, 15.5+yoff2, \"2020-10-25\", col = \"black\")\n}\n\nsecText <- 0.8 # secondary text size (dimension naming)\noff <- 26 # image stacks are always 26 apart\nx <- 72 # png X\ny <- 48 # png Y\nyoff <- 30\nplot.new()\npar(mar = c(5,3,3,3))\nplot.window(xlim = c(-1, x), ylim = c(0, y), asp = 1)\nprint_ts(5, yoff)\ncol <- '#ff5555'\nprint_segments(10.57, yoff-.43, seg = polygon_1, col = col)\nx = 3\nsegments(c(2, 0, -1.3)+x, c(-.2, 0, 1)+yoff, c(0, -1.3, 1)+x, c(0, 1, 2)+yoff, lwd = 4, col = col)\nprint_segments(10.57+off, yoff-.43, seg = polygon_1, col = col)\nx = 3 + off\nsegments(c(2, 0, -1.3)+x, c(-.2, 0, 1)+yoff, c(0, -1.3, 1)+x, c(0, 1, 2)+yoff, lwd = 4, col = col)\nprint_segments(10.57+2*off, yoff-.43, seg = polygon_1, col = col)\nx = 3 + 2 * off\nsegments(c(2, 0, -1.3)+x, c(-.2, 0, 1)+yoff, c(0, -1.3, 1)+x, c(0, 1, 2)+yoff, lwd = 4, col = col)\n# old 75 28 poly 86.25, 27.15\npl_stack_agg(a, 5, 5, nrM = 1, inner = 3) # print masked enlargement\nprint_segments(16.25, 7.15, seg = polygon_1, by = 2, col = col)\nx <- 1\ny <- 8\nsegments(c(4, 0, -2.6)+x, c(-.4, 0, 2)+y, c(0, -2.6, 2)+x, c(0, 2, 4)+y, lwd = 4, col = col) # line in large\nsegments(-3, 25, -7, 9, lwd = 3, col = 'grey')\nsegments(21, 29, 27.5, 14, lwd = 3, col = 'grey')\ntext(10, 20, \"1. Group by geometry\", cex = 1.3)\nvecM <- matrix(rep(1,8), ncol = 2)\ntext(57, 21, \"2. Reduce to vector cube\", cex = 1.3)\nb <- make_dummy_stars(2, 4, 12, 4, 0)\npl(b, 48, -5, m = vecM, pal = alpha(\"white\", 0.9), border = 0)\nprint_vector_content(54, -3)\npl(b, 46.5, -3.5, m = vecM, pal = alpha(\"white\", 0.9), border = 0)\nprint_vector_content(52.5, -1.5)\npl(b, 45, -2, m = vecM, pal = alpha(\"white\", 0.9), border = 0)\nprint_vector_content(51, 0)\ntext(51.5, 15, \"Line_1\", col = col)\ntext(63, 15, \"Polygon_1\", col = col)\ntext(57, 17.5, \"Geometries\", cex = 1.1)\ntext(42, 12, \"blue\")\ntext(42,  8, \"green\")\ntext(42,  4, \"red\")\ntext(42,  0, \"nir\")\ntext(38, 6, \"Bands\", srt = 90, cex = 1.1)\n# arrows(13.5, -2, 13.5, -6, angle = 20, lwd = 3)\ntext(72, 15.5, \"time\", srt = 315, cex = 1.1)\narrows(69.5, 15, 72.5, 12, angle = 20, lwd = 2)\n# print_segments(30, 35, seg = arrow_seg)\n\n\n\n\n\nFigure 6.8: Aggregating a raster data cube to a vector data cube\n\n\n\n\nFurther examples of vector data cubes include air quality data, where we could have \\(PM_{10}\\) measurements over two dimensions:\n\na sequence of monitoring stations, and\na sequence of time intervals\n\nor where we consider time series of demographic or epidemiological data, consisting of (population, disease) counts, with number of persons\n\nby region, for a sequence of \\(n\\) regions\nby age class, for \\(m\\) age classes, and\nby year, for \\(p\\) years\n\nwhich forms an array with \\(n m p\\) elements.\nFor spatial data science, support of vector and raster data cubes is extremely useful, because many variables are both spatially and temporaly varying, and because we often want to either change dimensions or aggregate them out, but in a fully flexible manner and order. Examples of changing dimensions are:\n\ninterpolating air quality measurements to values on a regular grid (raster; Chapter 12)\nestimating density maps from points or lines, e.g. with the number of flights passing by per week within a range of 1 km (Chapter 11)\naggregating climate model predictions to summary indicators for administrative regions\ncombining Earth observation data from different sensors, e.g. MODIS (250 m pixels, every 16 days) with Sentinel-2 (10 m, every 5 days)\n\nExamples of aggregating one or more full dimensions are assessments of:\n\nwhich air quality monitoring stations indicate unhealthy conditions (time)\nwhich region has the highest increase in disease incidence (space, time)\nglobal warming (e.g. in degrees per year)"
  },
  {
    "objectID": "06-Cubes.html#sec-switching",
    "href": "06-Cubes.html#sec-switching",
    "title": "6  Data Cubes",
    "section": "6.5 Switching dimension with attributes",
    "text": "6.5 Switching dimension with attributes\nWhen we accept that a dimension can also reflect an unordered, categorical variable, then one can easily swap a set of attributes for a single dimension, by replacing\n\\[\\{Z_1,Z_2,...,Z_p\\} = f(D_1,D_2,...,D_n)\\]\nwith\n\\[Z = f(D_1,D_2,...,D_n, D_{n+1})\\]\nwhere \\(D_{n+1}\\) has cardinality \\(p\\) and has as labels (the names of) \\(Z_1,Z_2,...,Z_p\\). Figure 6.9 shows a vector data cube for air quality stations where one cube dimension reflects air quality parameters. When the \\(Z_i\\) have incompatible measurement units, as in Figure 6.9 , one would have to take care when reducing the “parameter” dimension \\(D_{n+1}\\): numeric functions like mean or max would be meaningless. Counting the number of variables that exceed their respective threshold values may however be meaningful.\n\n\nCode\nset.seed(1331)\nlibrary(stars)\nlibrary(colorspace)\ntif <- system.file(\"tif/L7_ETMs.tif\", package = \"stars\")\nr <- read_stars(tif)\n\nnrow <- 5\nncol <- 8\n#m = matrix(runif(nrow * ncol), nrow = nrow, ncol = ncol)\nm <- r[[1]][1:nrow,1:ncol,1]\ndim(m) <- c(x = nrow, y = ncol) # named dim\ns <- st_as_stars(m)\n# s\nattr(s, \"dimensions\")[[1]]$delta = 3 \nattr(s, \"dimensions\")[[2]]$delta = -.5\nattr(attr(s, \"dimensions\"), \"raster\")$affine = c(-1.2, 0.0)\n\nplt <- function(x, yoffset = 0, add, li = TRUE) {\n    attr(x, \"dimensions\")[[2]]$offset = attr(x, \"dimensions\")[[2]]$offset + yoffset \n    l = st_as_sf(x, as_points = FALSE)\n    pal = sf.colors(10)\n    if (li)\n        pal = lighten(pal, 0.3 + rnorm(1, 0, 0.1))\n    if (! add)\n        plot(l, axes = FALSE, breaks = \"equal\", pal = pal, reset = FALSE, border = grey(.75), key.pos = NULL, main = NULL, xlab = \"time\")\n    else\n        plot(l, axes = TRUE, breaks = \"equal\", pal = pal, add = TRUE, border = grey(.75))\n    u = st_union(l)\n    plot(st_geometry(u), add = TRUE, col = NA, border = 'black', lwd = 2.5)\n}\n\npl <- function(s, x, y, add = TRUE, randomize = FALSE) {\n  attr(s, \"dimensions\")[[1]]$offset = x\n  attr(s, \"dimensions\")[[2]]$offset = y\n  m = r[[1]][y + 1:nrow,x + 1:ncol,1]\n  if (randomize)\n    m = m[sample(y + 1:nrow),x + 1:ncol]\n  dim(m) = c(x = nrow, y = ncol) # named dim\n  s[[1]] = m\n  plt(s, 0, add)\n  plt(s, 1, TRUE)\n  plt(s, 2, TRUE)\n  plt(s, 3, TRUE)\n  plt(s, 4, TRUE)\n  plt(s, 5, TRUE)\n  plt(s, 6, TRUE)\n  plt(s, 7, TRUE)\n  plt(s, 8, TRUE, FALSE)\n}\n\n# point vector data cube:\nplot.new()\npar(mar = c(5, 0, 5, 0))\nplot.window(xlim = c(-10, 16), ylim = c(-2,12), asp = 1)\nlibrary(spacetime)\ndata(air)\nde = st_geometry(st_normalize(st_as_sf(DE)))\n# \npl(s, 0, 0, TRUE, randomize = TRUE)\nde = de * 6 + c(-7, 9)\nplot(de, add = TRUE, border = grey(.5))\ntext(-10, 0, \"time\", srt = -90, col = 'black')\ntext(-5,  7.5, \"sensor location\", srt = 25, col = 'black')\ntext( 7,  10.5, \"air quality parameter\", srt = 0, col = 'black')\ntext( 1.5,  8.5, expression(PM[10]), col = 'black', cex = .75)\ntext( 4.5,  8.5, expression(NO[x]), col = 'black', cex = .75)\ntext( 8,  8.5, expression(SO[4]), col = 'black', cex = .75)\ntext( 11,  8.5, expression(O[3]), col = 'black', cex = .75)\ntext( 14,  8.5, expression(CO), col = 'black', cex = .75)\n# location points:\np <- st_coordinates(s[,1])\np[,1] <- p[,1]-1.4\np[,2] <- p[,2] + 8.2\npoints(p, col = grey(.7), pch = 16)\n# centroids:\nset.seed(131)\ncent <- st_coordinates(st_sample(de, 8))\npoints(cent, col = grey(.7), pch = 16)\ncent <- cent[rev(order(cent[,1])),]\nseg <- cbind(p, cent[1:8,])\nsegments(seg[,1], seg[,2], seg[,3], seg[,4], col = 'grey')\n\n\n\n\n\nFigure 6.9: Vector data cube with air quality time series\n\n\n\n\nBeing able to swap dimensions to attributes flexibly and vice-versa leads to extremely flexible analysis possibilities, as e.g. shown by the array database SciDB (Brown 2010)."
  },
  {
    "objectID": "06-Cubes.html#sec-otherdynamic",
    "href": "06-Cubes.html#sec-otherdynamic",
    "title": "6  Data Cubes",
    "section": "6.6 Other dynamic spatial data",
    "text": "6.6 Other dynamic spatial data\nWe have seen several dynamic raster and vector data examples that match the data cube structure well. Other data examples do less so: in particular spatiotemporal point patterns (Chapter 11) and trajectories (movement data; for a recent review, see Joo et al. (2020)) are often more straightforward to not handle as a data cube. Spatiotemporal point patterns are the sets of spatiotemporal coordinates of events or objects: accidents, disease cases, traffic jams, lightning strikes, and so on. Trajectory data are time sequences of spatial locations of moving objects (persons, cars, satellites, animals). For such data, the primary information is in the coordinates, and shifting these to a limited set of regularly discretized grid cells covering the space may help some analysis, e.g. to quickly explore patterns in areas of higher densities, but the loss of the exact coordinates also hinders a number of analysis approaches involving distance, direction or speed calculations. Nevertheless, for such data often the first computational steps involves generation of data cube representations by aggregating to a time-fixed spatial and/or space-fixed temporal discretization.\nUsing sparse array representations of data cubes to represent point pattern or trajectory data, as e.g. offered by SciDB (Brown 2010) or TileDB (Papadopoulos et al. 2016), may strongly limit the loss of coordinate accuracy by choosing dimensions that represent an extremely dense grid, and storing only those grid cell that contain data points. For trajectory data, such representations would need to add a grouping dimension to identify individuals, or individual sequences of consecutive movement observations."
  },
  {
    "objectID": "06-Cubes.html#exercises",
    "href": "06-Cubes.html#exercises",
    "title": "6  Data Cubes",
    "section": "6.7 Exercises",
    "text": "6.7 Exercises\nUse words to solve the following exercises, if needed or relevant use R code to illustrate the argument(s).\n\nWhy is it difficult to represent trajectories, sequences of \\((x,y,t)\\) obtained by tracking moving objects, by data cubes as described in this chapter?\nIn a socio-economic vector data cube with variables population, life expectancy, and gross domestic product ordered by dimensions country and year, which variables have block support for the spatial dimension, and which have block support for the temporal dimension?\nThe Sentinel-2 satellites collect images in 12 spectral bands; list advantages and disadvantages to represent them as (i) different data cubes, (ii) a data cube with 12 attributes, one for each band, and (iii) a single attribute data cube with a spectral dimension.\nExplain why a curvilinear raster as shown in Figure 1.6 can be considered a special case of a data cube.\nExplain how the following problems can be solved with data cube operations filter, apply, reduce and/or aggregate, and in which order. Also mention for each which function is applied, and what the dimensionality of the resulting data cube is (if any):\n\nfrom hourly \\(PM_{10}\\) measurements for a set of air quality monitoring stations, compute per station the amount of days per year that the average daily \\(PM_{10}\\) value exceeds 50 \\(\\mu g/m^3\\)\nfor a sequence of aerial images of an oil spill, find the time at which the oil spill had its largest extent, and the corresponding extent\nfrom a 10-year period with global daily sea surface temperature (SST) raster maps, find the area with the 10% largest and 10% smallest temporal trends in SST values.\n\n\n\n\n\n\nBrown, Paul G. 2010. “Overview of SciDB: Large Scale Array Storage, Processing and Analysis.” In Proceedings of the 2010 ACM SIGMOD International Conference on Management of Data, 963–68. ACM.\n\n\nGalton, A. 2004. “Fields and Objects in Space, Time and Space-Time.” Spatial Cognition and Computation 4.\n\n\nJoo, Rocío, Matthew E. Boone, Thomas A. Clay, Samantha C. Patrick, Susana Clusella-Trullas, and Mathieu Basille. 2020. “Navigating Through the R Packages for Movement.” Journal of Animal Ecology 89 (1): 248–67. https://doi.org/https://doi.org/10.1111/1365-2656.13116.\n\n\nLu, Meng, Marius Appel, and Edzer Pebesma. 2018. “Multidimensional Arrays for Analysing Geoscientific Data.” ISPRS International Journal of Geo-Information 7 (8): 313.\n\n\nPapadopoulos, Stavros, Kushal Datta, Samuel Madden, and Timothy Mattson. 2016. “The Tiledb Array Data Storage Manager.” Proceedings of the VLDB Endowment 10 (4): 349–60."
  },
  {
    "objectID": "07-Introsf.html",
    "href": "07-Introsf.html",
    "title": "7  Introduction to sf and stars",
    "section": "",
    "text": "This chapter introduces R packages sf and stars. sf provides a table format for simple features, where feature geometries are carried in a list-column. R package stars was written to support raster and vector datacubes (Chapter 6), and has raster data stacks and feature time series as special cases. sf first appeared on CRAN in 2016, stars in 2018. Development of both packages received support from the R Consortium as well as strong community engagement. The packages were designed to work together.\nAll functions operating on sf or stars objects start with st_, making it easy to recognize them or to search for them when using command line completion."
  },
  {
    "objectID": "07-Introsf.html#sec-sfintro",
    "href": "07-Introsf.html#sec-sfintro",
    "title": "7  Introduction to sf and stars",
    "section": "7.1 Package sf",
    "text": "7.1 Package sf\nIntended to succeed and replace R packages sp, rgeos and the vector parts of rgdal, R package sf (Pebesma 2018) was developed to move spatial data analysis in R closer to standards-based approaches seen in the industry and open source projects, to build upon more modern versions of the open source geospatial software stack (Figure 1.7), and to allow for integration of R spatial software with the tidyverse if desired.\nTo do so, R package sf provides simple features access (Herring et al. 2011), natively, to R. It provides an interface to several tidyverse packages, in particular to ggplot2, dplyr and tidyr. It can read and write data through GDAL, execute geometrical operations using GEOS (for projected coordinates) or s2geometry (for ellipsoidal coordinates), and carry out coordinate transformations or conversions using PROJ. External C++ libraries are interfaced using Rcpp (Eddelbuettel 2013).\nPackage sf represents sets of simple features in sf objects, a sub-class of a data.frame or tibble. sf objects contain at least one geometry list-column of class sfc, which for each element contains the geometry as an R object of class sfg. A geometry list-column acts as a variable in a data.frame or tibble, but has a more complex structure than e.g. numeric or character variables. Following the convention of PostGIS, all operations (functions, method) that operate on sf objects or related start with st_.\nAn sf object has the following meta-data:\n\nthe name of the (active) geometry column, held in attribute sf_column\nfor each non-geometry variable, the attribute-geometry relationship (Section 5.1), held in attribute agr\n\nAn sfc geometry list-column has the following meta-data:\n\nthe coordinate reference system held in attribute crs\nthe bounding box held in attribute bbox\nthe precision held in attribute precision\nthe number of empty geometries held in attribute n_empty\n\nThese attributes may best be accessed or set by using functions like st_bbox, st_crs, st_set_crs, st_agr, st_set_agr, st_precision, and st_set_precision.\n\nCreation\nOne could create an sf object from scratch e.g. by\n\nlibrary(sf)\n# Linking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.0; sf_use_s2() is TRUE\np1 <- st_point(c(7.35, 52.42))\np2 <- st_point(c(7.22, 52.18))\np3 <- st_point(c(7.44, 52.19))\nsfc <- st_sfc(list(p1, p2, p3), crs = 'OGC:CRS84')\nst_sf(elev = c(33.2, 52.1, 81.2), marker = c(\"Id01\", \"Id02\", \"Id03\"),\n      geom = sfc)\n# Simple feature collection with 3 features and 2 fields\n# Geometry type: POINT\n# Dimension:     XY\n# Bounding box:  xmin: 7.22 ymin: 52.2 xmax: 7.44 ymax: 52.4\n# Geodetic CRS:  WGS 84\n#   elev marker              geom\n# 1 33.2   Id01 POINT (7.35 52.4)\n# 2 52.1   Id02 POINT (7.22 52.2)\n# 3 81.2   Id03 POINT (7.44 52.2)\n\n\n\n\n\n\nFigure 7.1: components of an sf object\n\n\n\n\nFigure 7.1 gives an explanation of the components printed. Rather than creating objects from scratch, spatial data in R are typically read from an external source, which can be:\n\nan external file\na request to a web service\na dataset held in some form in another R package\n\nThe next section introduces reading from files; Section 8.1 discusses handling of datasets too large to fit into working memory.\n\n\nReading and writing\nReading datasets from an external “data source” (file, web service, or even string) is done using st_read:\n\nlibrary(sf)\n(file <- system.file(\"gpkg/nc.gpkg\", package = \"sf\"))\n# [1] \"/home/edzer/R/x86_64-pc-linux-gnu-library/4.0/sf/gpkg/nc.gpkg\"\nnc <- st_read(file)\n# Reading layer `nc.gpkg' from data source \n#   `/home/edzer/R/x86_64-pc-linux-gnu-library/4.0/sf/gpkg/nc.gpkg' \n#   using driver `GPKG'\n# Simple feature collection with 100 features and 14 fields\n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -84.3 ymin: 33.9 xmax: -75.5 ymax: 36.6\n# Geodetic CRS:  NAD27\n\nHere, the file name and path file is read from the sf package, which has a different path on every machine, and hence is guaranteed to be present on every sf installation.\nCommand st_read has two arguments: the data set name (dsn) and the layer. In the example above, the geopackage (GPKG) file contains only a single layer that is being read. If it had contained multiple layers, then the first layer would have been read and a warning would have been emitted. The available layers of a data set can be queried by\n\nst_layers(file)\n# Driver: GPKG \n# Available layers:\n#   layer_name geometry_type features fields crs_name\n# 1    nc.gpkg Multi Polygon      100     14    NAD27\n\nSimple feature objects can be written with st_write, as in\n\n(file = tempfile(fileext = \".gpkg\"))\n# [1] \"/tmp/RtmphnKbwU/file75a333a72f063.gpkg\"\nst_write(nc, file, layer = \"layer_nc\")\n# Writing layer `layer_nc' to data source \n#   `/tmp/RtmphnKbwU/file75a333a72f063.gpkg' using driver `GPKG'\n# Writing 100 features with 14 fields and geometry type Multi Polygon.\n\nwhere the file format (GPKG) is derived from the file name extension.\n\n\nSubsetting\nA very common operation is to subset objects; base R can use [ for this. The rules that apply to data.frame objects also apply to sf objects, e.g. that records 2-5 and columns 3-7 are selected by\n\nnc[2:5, 3:7]\n\nbut with a few additional features, in particular:\n\nthe drop argument is by default FALSE meaning that the geometry column is always selected, and an sf object is returned; when it is set to TRUE and the geometry column not selected, it is dropped and a data.frame is returned\nselection with a spatial (sf, sfc or sfg) object as first argument leads to selection of the features that spatially intersect with that object (see next section); other predicates than intersects can be chosen by setting parameter op to a function such as st_covers or or any other binary predicate function listed in Section 3.2.2\n\n\n\nBinary predicates\nBinary predicates like st_intersects, st_covers etc (Section 3.2.2) take two sets of features or feature geometries and return for all pairs whether the predicate is TRUE or FALSE. For large sets this would potentially result in a huge matrix, typically filled mostly with FALSE values and for that reason a sparse representation is returned by default:\n\nnc5 <- nc[1:5, ]\nnc7 <- nc[1:7, ]\n(i <- st_intersects(nc5, nc7))\n# Sparse geometry binary predicate list of length 5, where\n# the predicate was `intersects'\n#  1: 1, 2\n#  2: 1, 2, 3\n#  3: 2, 3\n#  4: 4, 7\n#  5: 5, 6\n\n\n\n\n\n\nFigure 7.2: First seven North Carolina counties\n\n\n\n\nFigure 7.2 shows how the intersections of the first five with the first seven counties can be understood. We can transform the sparse logical matrix into a dense matrix by\n\nas.matrix(i)\n#       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]\n# [1,]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n# [2,]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n# [3,] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n# [4,] FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE\n# [5,] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE\n\nThe number of counties that each of nc5 intersects with is\n\nlengths(i)\n# [1] 2 3 2 2 2\n\nand the other way around, the number of counties in nc5 that intersect with each of the counties in nc7 is\n\nlengths(t(i))\n# [1] 2 3 2 1 1 1 1\n\nThe object i is of class sgbp (sparse geometrical binary predicate), and is a list of integer vectors, with each element representing a row in the logical predicate matrix holding the column indices of the TRUE values for that row. It further holds some metadata like the predicate used, and the total number of columns. Methods available for sgbp objects include\n\nmethods(class = \"sgbp\")\n#  [1] as.data.frame as.matrix     coerce        dim          \n#  [5] initialize    Ops           print         show         \n#  [9] slotsFromS3   t            \n# see '?methods' for accessing help and source code\n\nwhere the only Ops method available is !, the negation operation.\n\n\ntidyverse\nThe tidyverse is a collection of data science packages that work together, described e.g. in (Wickham and Grolemund 2017; Wickham et al. 2019). Package sf has tidyverse-style read and write functions, read_sf and write_sf, which return a tibble rather than a data.frame, do not print any output, and overwrite existing data by default.\nFurther tidyverse generics with methods for sf objects include filter, select, group_by, ungroup, mutate, transmute, rowwise, rename, slice, summarise, distinct, gather, pivot_longer, spread, nest, unnest, unite, separate, separate_rows, sample_n, and sample_frac. Most of these methods simply manage the metadata of sf objects, and make sure the geometry remains present. In case a user wants the geometry to be removed, one can use st_drop_geometry() or simply coerce to a tibble or data.frame before selecting:\n\nlibrary(tidyverse)\n# ── Attaching packages ───────────────────────── tidyverse 1.3.1 ──\n# ✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n# ✔ tibble  3.1.7     ✔ dplyr   1.0.9\n# ✔ tidyr   1.2.0     ✔ stringr 1.4.0\n# ✔ readr   2.1.2     ✔ forcats 0.5.1\n# ── Conflicts ──────────────────────────── tidyverse_conflicts() ──\n# ✖ dplyr::filter() masks stats::filter()\n# ✖ dplyr::lag()    masks stats::lag()\nnc |> as_tibble() |> select(BIR74) |> head(3)\n# # A tibble: 3 × 1\n#   BIR74\n#   <dbl>\n# 1  1091\n# 2   487\n# 3  3188\n\nThe summarise method for sf objects has two special arguments:\n\ndo_union (default TRUE) determines whether grouped geometries are unioned on return, so that they form a valid geometry\nis_coverage (default FALSE) in case the geometries grouped form a coverage (do not have overlaps), setting this to TRUE speeds up the unioning\n\nThe distinct method selects distinct records, where st_equals is used to evaluate distinctness of geometries.\nfilter can be used with the usual predicates; when one wants to use it with a spatial predicate, e.g. to select all counties less than 50 km away from Orange county, one could use\n\norange <- nc |> dplyr::filter(NAME == \"Orange\")\nwd <- st_is_within_distance(nc, orange, units::set_units(50, km))\no50 <- nc |> dplyr::filter(lengths(wd) > 0)\nnrow(o50)\n# [1] 17\n\n(where we use dplyr::filter rather than filter to avoid confusion with filter from base R.)\nFigure 7.3 shows the results of this analysis, and in addition a buffer around the county borders; note that this buffer serves for illustration, it was not used to select the counties.\n\n\n\n\n\nFigure 7.3: Orange county (orange), counties within a 50 km radius (black), a 50 km buffer around Orange county (brown), and remaining counties (grey)"
  },
  {
    "objectID": "07-Introsf.html#spatial-joins",
    "href": "07-Introsf.html#spatial-joins",
    "title": "7  Introduction to sf and stars",
    "section": "7.2 Spatial joins",
    "text": "7.2 Spatial joins\nIn regular (left, right or inner) joins, joined records from a pair of tables are reported when one or more selected attributes match (are identical) in both tables. A spatial join is similar, but the criterion to join records is not equality of attributes but a spatial predicate. This leaves a wide variety of options in order to define spatially matching records, using binary predicates listed in Section 3.2.2. The concepts of “left”, “right”, “inner” or “full” joins remain identical to the non-spatial join as the options for handling records that have no spatial match.\nWhen using spatial joins, each record may have several matched records, yielding a large result table. A way to reduce this complexity may be to select from the matching records the one with the largest overlap with the target geometry. An example of this is shown (visually) in Figure 7.4 ; this is done using st_join with argument largest = TRUE.\n\n# example of largest = TRUE:\nnc <- st_transform(read_sf(system.file(\"shape/nc.shp\", package=\"sf\")), 2264)\ngr <- st_sf(\n         label = apply(expand.grid(1:10, LETTERS[10:1])[,2:1], 1, paste0, collapse = \" \"),\n         geom = st_make_grid(nc))\ngr$col <- sf.colors(10, categorical = TRUE, alpha = .3)\n# cut, to check, NA's work out:\ngr <- gr[-(1:30),]\nsuppressWarnings(nc_j <- st_join(nc, gr, largest = TRUE))\n# the two datasets:\nopar <- par(mfrow = c(2,1), mar = rep(0,4))\nplot(st_geometry(nc_j))\nplot(st_geometry(gr), add = TRUE, col = gr$col)\ntext(st_coordinates(st_centroid(st_geometry(gr))), labels = gr$label)\n# the joined dataset:\nplot(st_geometry(nc_j), border = 'black', col = nc_j$col)\ntext(st_coordinates(st_centroid(st_geometry(nc_j))), labels = nc_j$label, cex = .8)\nplot(st_geometry(gr), border = 'green', add = TRUE)\npar(opar)\n\n\n\n\nFigure 7.4: example of st_join with largest = TRUE: the label of the polygon in the top figure with the largest intersection with polygons in the bottom figure is assigned to the polygons of the bottom figure.\n\n\n\n\nAnother way to reduce the result set is to use aggregate after a join, all matching records, and union their geometries; see Section 5.4.\n\nSampling, gridding, interpolating\nSeveral convenience functions are available in package sf, some of which will be discussed here. Function st_sample generates a sample of points randomly sampled from target geometries, where target geometries can be point, line or polygon geometries. Sampling strategies can be (completely) random, regular or (with polygons) triangular. Chapter 11 explains how spatial sampling (or point pattern simulation) methods available in package spatstat are interfaced through st_sample.\nFunction st_make_grid creates a square, rectangular or hexagonal grid over a region, or points with the grid centers or corners. It was used to create the rectangular grid in Figure 7.4 .\nFunction st_interpolate_aw “interpolates” area values to new areas, as explained in Section 5.3, both for intensive and extensive variables."
  },
  {
    "objectID": "07-Introsf.html#package-stars",
    "href": "07-Introsf.html#package-stars",
    "title": "7  Introduction to sf and stars",
    "section": "7.3 Package stars",
    "text": "7.3 Package stars\nAlthough package sp has always had limited support for raster data, over the last decade R package raster (Hijmans 2022a) has clearly been dominant as the prime package for powerful, flexible and scalable raster analysis. The raster data model of package raster (and its successor, terra (Hijmans 2022b)) is that of a 2D regular raster, or a set of raster layers (a “raster stack”). This aligns with the classical static “GIS world view”, where the world is modelled as a set of layers, each representing a different theme. A lot of data available today however is dynamic, and comes as time series of rasters or raster stacks. A raster stack does not meaningfully reflect this, requiring the user to keep a register of which layer represents what.\nAlso, the raster package, and its successor terra do an excellent job in scaling computations up to data sizes no larger than the local storage (the computer’s hard drives), and doing this fast. Recent datasets however, including satellite imagery, climate model or weather forecasting data, often no longer fit in local storage (Chapter 8). Package spacetime (Pebesma 2012) addresses the analysis of time series of vector geometries or raster grid cells, but does not extend to higher-dimensional arrays.\nHere, we introduce package stars for analysing raster and vector data cubes. The package:\n\nallows for representing dynamic (time varying) raster stacks\naims at being scalable, also beyond local disk size\nprovides a strong integration of raster functions in the GDAL library\nin addition to regular grids handles rotated, sheared, rectilinear and curvilinear rasters (Figure 1.6)\nprovides a tight integration with package sf\nalso handles array data with non-raster spatial dimensions, the vector data cubes\nfollows the tidyverse design principles\n\nVector data cubes include for instance time series for simple features, or spatial graph data such as potentially dynamic origin-destination matrices. The concept of spatial vector and raster data cubes was explained in Chapter 6.\n\nReading and writing raster data\nRaster data typically are read from a file. We use a dataset containing a section of Landsat 7 scene, with the 6 30m-resolution bands (bands 1-5 and 7) for a region covering the city of Olinda, Brazil. We can read the example GeoTIFF file holding a regular, non-rotated grid from the package stars:\n\ntif <- system.file(\"tif/L7_ETMs.tif\", package = \"stars\")\nlibrary(stars)\n# Loading required package: abind\n(r <- read_stars(tif))\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif     1      54     69 68.9      86  255\n# dimension(s):\n#      from  to  offset delta            refsys point values x/y\n# x       1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y       1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n# band    1   6      NA    NA                NA    NA   NULL\n\nwhere we see the offset, cell size, coordinate reference system, and dimensions. The dimension table reports the following for each dimension:\n\nfrom: the starting index\nto: the ending index\noffset: the dimension value at the start (edge) of the first pixel\ndelta: the cell size; negative delta values indicate that pixel index increases with decreasing dimension values\nrefsys: the reference system\npoint: boolean, indicating whether cell values have point support or cell support\nvalues: a list with values or labels associated with each of the dimension’s values\nx/y: an indicator whether a dimension is associated with a spatial raster x- or y-axis\n\nFor regular, rotated or sheared grids or other regularly discretized dimensions (e.g. time), offset and delta are not NA and values is NULL; for other cases, offset and delta are NA and values contains one of:\n\nthe sequence of values, or intervals, in case of a rectlinear spatial raster or irregular time dimension\nin case of a vector data cube, geometries associated with the spatial dimension\nin case of a curvilinear raster, the matrix with coordinate values for each raster cell\nin case of a discrete dimension, the band names or labels associated with the dimension values\n\nThe object r is of class stars and is a simple list of length one, holding a three-dimensional array:\n\nlength(r)\n# [1] 1\nclass(r[[1]])\n# [1] \"array\"\ndim(r[[1]])\n#    x    y band \n#  349  352    6\n\nand in addition holds an attribute with a dimensions table with all the metadata required to know what the array dimensions refer to, obtained by\n\nst_dimensions(r)\n\nWe can get the spatial extent of the array by\n\nst_bbox(r)\n#    xmin    ymin    xmax    ymax \n#  288776 9110729  298723 9120761\n\nRaster data can be written to local disk using write_stars:\n\ntf <- tempfile(fileext = \".tif\")\nwrite_stars(r, tf)\n\nwhere again the data format (in this case, GeoTIFF) is derived from the file extension. As for simple features, reading and writing uses the GDAL library; the list of available drivers for raster data is obtained by\n\nst_drivers(\"raster\")\n\n\n\nSubsetting stars data cubes\nData cubes can be subsetted using [, or using tidyverse verbs. The first options, [ uses for the arguments: attributes first, followed by dimension. This means that r[1:2, 101:200, , 5:10] selects from r attributes 1-2, index 101-200 for dimension 1, and index 5-10 for dimension 3; omitting dimension 2 means that no subsetting takes place. For attributes, attributes names or logical vectors can be used. For dimensions, logical vectors are not supported; Selecting discontinuous ranges supported when it is a regular sequence. By default, drop is FALSE, when set to TRUE dimensions with a single value are dropped:\n\nr[,1:100, seq(1, 250, 5), 4] |> dim()\n#    x    y band \n#  100   50    1\nr[,1:100, seq(1, 250, 5), 4, drop = TRUE] |> dim()\n#   x   y \n# 100  50\n\nFor selecting particular ranges of dimension values, one can use filter (after loading dplyr):\n\nlibrary(dplyr, warn.conflicts = FALSE)\nfilter(r, x > 289000, x < 290000)\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif     5      51     63 64.3      75  242\n# dimension(s):\n#      from  to  offset delta            refsys point values x/y\n# x       1  35  289004  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y       1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n# band    1   6       1     1                NA    NA   NULL\n\nwhich changes the offset of the \\(x\\) dimension. Particular cube slices can also be obtained with slice, e.g.\n\nslice(r, band, 3)\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif    21      49     63 64.4      77  255\n# dimension(s):\n#   from  to  offset delta            refsys point values x/y\n# x    1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y    1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n\nwhich drops the singular dimension. mutate can be used on stars objects to add new arrays as functions of existing ones, transmute drops existing ones.\n\n\nCropping\nFurther subsetting can be done using spatial objects of class sf, sfc or bbox, e.g. when using the sample raster,\n\nb <- st_bbox(r) |>\n    st_as_sfc() |>\n    st_centroid() |>\n    st_buffer(units::set_units(500, m))\nr[b]\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max. NA's\n# L7_ETMs.tif    22      54     66 67.7    78.2  174 2184\n# dimension(s):\n#      from  to  offset delta            refsys point values x/y\n# x     157 193  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y     159 194 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n# band    1   6      NA    NA                NA    NA   NULL\n\nselects the circular center region with a diameter of 500 metre, for the first band shown in Figure 7.5 ,\n\n\n\n\n\nFigure 7.5: circular center region of the Landsat 7 scene (band 1)\n\n\n\n\nwhere we see that pixels outside the spatial object are assigned NA values. This object still has dimension indexes relative to the offset and delta values of r; we can reset these to a new offset with\n\nr[b] |> st_normalize() |> st_dimensions()\n#      from to  offset delta            refsys point values x/y\n# x       1 37  293222  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y       1 36 9116258 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n# band    1  6      NA    NA                NA    NA   NULL\n\nBy default, the resulting raster is cropped to the extent of the selection object; an object with the same dimensions as the input object is obtained with\n\nr[b, crop = FALSE]\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.   NA's\n# L7_ETMs.tif    22      54     66 67.7    78.2  174 731280\n# dimension(s):\n#      from  to  offset delta            refsys point values x/y\n# x       1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y       1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n# band    1   6      NA    NA                NA    NA   NULL\n\nCropping a stars object can alternatively be done directly with st_crop, as in\n\nst_crop(r, b)\n\n\n\nRedimensioning stars objects\nPackage stars uses package abind (Plate and Heiberger 2016) for a number of array manipulations. One of them is aperm which transposes an array by permuting it. A method for stars objects is provided, and\n\naperm(r, c(3, 1, 2))\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif     1      54     69 68.9      86  255\n# dimension(s):\n#      from  to  offset delta            refsys point values x/y\n# band    1   6      NA    NA                NA    NA   NULL    \n# x       1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y       1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n\npermutes the order of dimensions of the resulting object.\nAttributes and dimensions can be swapped, using split and merge:\n\n(rs <- split(r))\n# stars object with 2 dimensions and 6 attributes\n# attribute(s):\n#     Min. 1st Qu. Median Mean 3rd Qu. Max.\n# X1    47      67     78 79.1      89  255\n# X2    32      55     66 67.6      79  255\n# X3    21      49     63 64.4      77  255\n# X4     9      52     63 59.2      75  255\n# X5     1      63     89 83.2     112  255\n# X6     1      32     60 60.0      88  255\n# dimension(s):\n#   from  to  offset delta            refsys point values x/y\n# x    1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y    1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\nmerge(rs)\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#                    Min. 1st Qu. Median Mean 3rd Qu. Max.\n# X1.X2.X3.X4.X5.X6     1      54     69 68.9      86  255\n# dimension(s):\n#            from  to  offset delta            refsys point\n# x             1 349  288776  28.5 SIRGAS 2000 / ... FALSE\n# y             1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE\n# attributes    1   6      NA    NA                NA    NA\n#               values x/y\n# x               NULL [x]\n# y               NULL [y]\n# attributes X1,...,X6\n\nsplit distributes the band dimension over 6 attributes of a 2-dimensional array, merge reverses this operation. st_redimension can be used for more generic operations, such as splitting a single array dimension over two new dimensions:\n\nst_redimension(r, c(349, 352, 3, 2))\n# stars object with 4 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif     1      54     69 68.9      86  255\n# dimension(s):\n#    from  to  offset delta            refsys point values\n# X1    1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL\n# X2    1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL\n# X3    1   3      NA    NA                NA    NA   NULL\n# X4    1   2      NA    NA                NA    NA   NULL\n\n\n\nExtracting point samples, aggregating\nA very common use case for raster data cube analysis is the extraction of values at certain locations, or computing aggregations over certain geometries. st_extract extracts point values. We will do this for a few randomly sampled points over the bounding box of r:\n\n\n\n\npts <- st_bbox(r) |> st_as_sfc() |> st_sample(20)\n(e <- st_extract(r, pts))\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif    12    41.8     63   61    80.5  145\n# dimension(s):\n#          from to offset delta            refsys point\n# geometry    1 20     NA    NA SIRGAS 2000 / ...  TRUE\n# band        1  6     NA    NA                NA    NA\n#                                                     values\n# geometry POINT (293002 9115516),...,POINT (290941 9114128)\n# band                                                  NULL\n\nwhich results in a vector data cube with 20 points and 6 bands.\nAnother way of extracting information from data cubes is by aggregating it. One way of doing is by spatial aggregation, e.g. to values for spatial polygons or lines (Section 6.4). We can for instance compute the maximum pixel value for each band for each of the circles shown in figure Figure 1.4 (d) by\n\n\n\n\ncircles <- st_sample(st_as_sfc(st_bbox(r)), 3) |>\n    st_buffer(500)\naggregate(r, circles, max)\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif    73    94.2    117  121     142  205\n# dimension(s):\n#          from to offset delta            refsys point\n# geometry    1  3     NA    NA SIRGAS 2000 / ... FALSE\n# band        1  6     NA    NA                NA    NA\n#                                                                                                  values\n# geometry POLYGON ((291330 9114499, 2..., POLYGON ((290519 9119219, 2..., POLYGON ((292193 9116038, 2...\n# band                                                                                               NULL\n\nwhich gives a data cube with 3 geometries and 6 bands. Aggregation over a temporal dimension is done by passing a time variable as the second argument to aggregate, as\n\na set of time stamps indicating the start of time intervals or\na time period like \"weeks\", \"5 days\" or \"years\"\n\n\n\nPredictive models\nThe typical model prediction workflow in R is as follows:\n\nuse a data.frame with response and predictor variables (covariates)\ncreate a model object based on this data.frame\ncall predict with this model object and the data.frame with target predictor variable values\n\nPackage stars provides a predict method for stars objects that essentially wraps the last step, by creating the data.frame, calling the predict method for that, and reconstructing a stars object with the predicted values.\nWe will illustrate this with a trivial two-class example mapping land from sea in the example Landsat data set, using the sample points extracted above, shown in Figure 7.6 .\n\nplot(r[,,,1], reset = FALSE)\ncol <- rep(\"green\", 20)\ncol[c(8, 14, 15, 18, 19)] = \"red\"\nst_as_sf(e) |> st_coordinates() |> text(labels = 1:20, col = col)\n\n\n\n\nFigure 7.6: randomly chosen sample locations for training data; red: water, green: land\n\n\n\n\nFrom this figure, we read “by eye” that the points 8, 14, 15, 18 and 19 are on water, the others on land. Using a linear discriminant (“maximum likelihood”) classifier, we find model predictions as shown in Figure 7.7 .\n\nrs <- split(r)\ntrn <- st_extract(rs, pts)\ntrn$cls <- rep(\"land\", 20)\ntrn$cls[c(8, 14, 15, 18, 19)] = \"water\"\nmodel <- MASS::lda(cls ~ ., st_drop_geometry(trn))\npr <- predict(rs, model)\n\nHere, we used the MASS:: prefix to avoid loading MASS, as that would mask select from dplyr. Another way would be to load MASS and unload it later on with detach().\n\nplot(pr[1], key.pos = 4, key.width = lcm(3.5), key.length = lcm(2))\n\n\n\n\nFigure 7.7: Linear discriminant classifier for land/water, based on training data of Figure 7.6\n\n\n\n\nWe also see that the layer plotted in Figure 7.7 is a factor variable, with class labels.\n\n\nPlotting raster data\nWe can use the base plot method for stars objects, where the plot created with plot(r) is shown in Figure 7.8 .\n\nplot(r)\n\n\n\n\nFigure 7.8: six 30m Landsat bands downsampled to 90m for Olinda, Br.\n\n\n\n\nis shown in Figure 7.8 . The default color scale uses grey tones, and stretches these such that color breaks correspond to data quantiles over all bands (“histogram equalization”). A more familiar view is the RGB or false color composite shown in Figure 7.9 .\n\npar(mfrow = c(1, 2))\nplot(r, rgb = c(3,2,1), reset = FALSE, main = \"RGB\")    # rgb\nplot(r, rgb = c(4,3,2), main = \"False color (NIR-R-G)\") # false color\n\n\n\n\nFigure 7.9: two color composites\n\n\n\n\nFurther details and options are given in Chapter 9.\n\n\nAnalysing raster data\nElement-wise mathematical functions (Section 6.3.2) on stars objects are just passed on to the arrays. This means that we can call functions and create expressions:\n\nlog(r)\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif     0    3.99   4.23 4.12    4.45 5.54\n# dimension(s):\n#      from  to  offset delta            refsys point values x/y\n# x       1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y       1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n# band    1   6      NA    NA                NA    NA   NULL\nr + 2 * log(r)\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif     1      62   77.5 77.1    94.9  266\n# dimension(s):\n#      from  to  offset delta            refsys point values x/y\n# x       1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y       1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n# band    1   6      NA    NA                NA    NA   NULL\n\nor even mask out certain values:\n\nr2 <- r\nr2[r < 50] <- NA\nr2\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.   NA's\n# L7_ETMs.tif    50      64     75   79      90  255 149170\n# dimension(s):\n#      from  to  offset delta            refsys point values x/y\n# x       1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y       1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n# band    1   6      NA    NA                NA    NA   NULL\n\nor un-mask areas:\n\nr2[is.na(r2)] <- 0\nr2\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif     0      54     69   63      86  255\n# dimension(s):\n#      from  to  offset delta            refsys point values x/y\n# x       1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y       1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n# band    1   6      NA    NA                NA    NA   NULL\n\nDimension-wise, we can apply functions to selected array dimensions (Section 6.3.3)) of stars objects similar to how apply does this to arrays. For instance, we can compute for each pixel the mean of the 6 band values by\n\nst_apply(r, c(\"x\", \"y\"), mean)\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#       Min. 1st Qu. Median Mean 3rd Qu. Max.\n# mean  25.5    53.3   68.3 68.9      82  255\n# dimension(s):\n#   from  to  offset delta            refsys point values x/y\n# x    1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y    1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n\nA more meaningful function would e.g. compute the NDVI (normalized differenced vegetation index):\n\nndvi <- function(b1, b2, b3, b4, b5, b6) (b4 - b3)/(b4 + b3)\nst_apply(r, c(\"x\", \"y\"), ndvi)\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#         Min. 1st Qu.  Median    Mean 3rd Qu.  Max.\n# ndvi  -0.753  -0.203 -0.0687 -0.0643   0.187 0.587\n# dimension(s):\n#   from  to  offset delta            refsys point values x/y\n# x    1 349  288776  28.5 SIRGAS 2000 / ... FALSE   NULL [x]\n# y    1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE   NULL [y]\n\nAlternatively, one could have defined\n\nndvi2 <- function(x) (x[4]-x[3])/(x[4]+x[3])\n\nwhich is more convenient if the number of bands is large, but which is also much slower than ndvi as it needs to be called for every pixel whereas ndvi can be called once for all pixels, or for large chunks of pixels. The mean for each band over the whole image is computed by\n\nas.data.frame(st_apply(r, c(\"band\"), mean))\n#   band mean\n# 1    1 79.1\n# 2    2 67.6\n# 3    3 64.4\n# 4    4 59.2\n# 5    5 83.2\n# 6    6 60.0\n\nthe result of which is small enough to be printed here as a data.frame. In these two examples, entire dimensions disappear. Sometimes, this does not happen (Section 6.3.2); we can for instance compute the three quartiles for each band\n\nst_apply(r, c(\"band\"), quantile, c(.25, .5, .75))\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif    32    60.8   66.5 69.8    78.8  112\n# dimension(s):\n#          from to offset delta refsys point        values\n# quantile    1  3     NA    NA     NA    NA 25%, 50%, 75%\n# band        1  6     NA    NA     NA    NA          NULL\n\nand see that this creates a new dimension, quantile, with three values. Alternatively, the three quantiles over the 6 bands for each pixel are obtained by\n\nst_apply(r, c(\"x\", \"y\"), quantile, c(.25, .5, .75))\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif     4      55   69.2 67.2    81.2  255\n# dimension(s):\n#          from  to  offset delta            refsys point\n# quantile    1   3      NA    NA                NA    NA\n# x           1 349  288776  28.5 SIRGAS 2000 / ... FALSE\n# y           1 352 9120761 -28.5 SIRGAS 2000 / ... FALSE\n#                 values x/y\n# quantile 25%, 50%, 75%    \n# x                 NULL [x]\n# y                 NULL [y]\n\n\n\nCurvilinear rasters\nThere are several reasons why non-regular rasters occur (Figure 1.6). For one, when the data is Earth-bound, a regular raster does not fit the Earth’s surface, which is curved. Other reasons are:\n\nwhen we convert or transform a regular raster data into another coordinate reference system, it will become curvilinear unless we resample (warp; Section 7.7); warping always goes at the cost of some loss of data and is not reversible\nobservation may lead to irregular rasters; e.g. for satellite swaths, we may have a regular raster in the direction of the satellite (not aligned with \\(x\\) or \\(y\\)), and rectilinear in the direction perpendicular to that (e.g. if the sensor discretizes the viewing angle in equal sections)\n\n\n\nGDAL utils\nThe GDAL library is typically shipped with a number of executable binaries, the GDAL command line utilities for data translation and processing. A package like gdalUtils (Greenberg and Mattiuzzi 2020) provides R functions that actually call these binaries, using R’s system() call mechanism. This requires that these binaries are properly installed, and findable by R, which is something that an R package by itself cannot guarantee.\nSeveral of these utilities (all except for those written in Python) are also available as C functions in the GDAL library, through the “GDAL Algorithms C API”. If an R package like sf that links to the GDAL library uses these C API algorithms, it means that the user no longer needs to install any GDAL binary command line utilities in addition to the R package.\nPackage sf allows calling these C API algorithms through function gdal_utils(), where the first argument is the name of the utility (stripped from the gdal prefix):\n\ninfo prints information on GDAL (raster) datasets\nwarp warps a raster to a new raster, possibly in another CRS\nrasterize rasterizes a vector dataset\ntranslate translates a raster file to another format\nvectortranslate (for ogr2ogr) translates a vector file to another format\nbuildvrt creates a virtual raster tile (a raster created from several files)\ndemprocessing does varios processing steps of digital elevation models (dems)\nnearblack converts nearly black/white borders to black\ngrid creates a regular grid from scattered data\nmdiminfo prints information on a multidimensional array\nmdimtranslate translates a multidimensional array into another format\n\nThese utilities work on files, and not not directly on sf or stars objects. However, stars_proxy objects are essentially pointers to files, and other objects can be written to file. Several of these utilities are (always or optionally) used, e.g. by st_mosaic, st_warp or st_write."
  },
  {
    "objectID": "07-Introsf.html#vector-data-cube-examples",
    "href": "07-Introsf.html#vector-data-cube-examples",
    "title": "7  Introduction to sf and stars",
    "section": "7.4 Vector data cube examples",
    "text": "7.4 Vector data cube examples\n\nExample: aggregating air quality time series\nAir quality data from package spacetime were obtained from the airBase European air quality data base. Daily average PM\\(_{10}\\) values were downloaded for rural background stations in Germany, 1998-2009.\nWe can create a stars object from the air matrix, the dates Date vector and the stations SpatialPoints objects by\n\n\n\n\nlibrary(spacetime)\ndata(air) # this loads several datasets in .GlobalEnv\ndim(air)\n# space  time \n#    70  4383\nd <- st_dimensions(station = st_as_sfc(stations), time = dates)\n(aq <- st_as_stars(list(PM10 = air), dimensions = d))\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#       Min. 1st Qu. Median Mean 3rd Qu. Max.   NA's\n# PM10     0    9.92   14.8 17.7      22  274 157659\n# dimension(s):\n#         from   to     offset  delta            refsys point\n# station    1   70         NA     NA +proj=longlat ...  TRUE\n# time       1 4383 1998-01-01 1 days              Date FALSE\n#                                          values\n# station POINT (9.59 53.7),...,POINT (9.45 49.2)\n# time                                       NULL\n\nWe can see from Figure 7.10 that the time series are quite long, but also have large missing value gaps. Figure 7.11 shows the spatial distribution measurement stations and mean PM\\(_{10}\\) values.\n\nimage(aperm(log(aq), 2:1), main = \"NA pattern (white) in PM10 station time series\")\n\n\n\n\nFigure 7.10: space-time diagram of PM\\(_{10}\\) measurements by time and station\n\n\n\n\n\nplot(st_as_sf(st_apply(aq, 1, mean, na.rm = TRUE)), reset = FALSE, pch = 16,\n    ylim = st_bbox(DE)[c(2,4)])\nplot(DE, add=TRUE)\n\n\n\n\nFigure 7.11: locations of PM\\(_{10}\\) measurement stations, showing mean values\n\n\n\n\nWe can aggregate these station time series to area means, mostly as a simple exercise. For this, we use the aggregate method for stars objects\n\n(a <- aggregate(aq, st_as_sf(DE_NUTS1), mean, na.rm = TRUE))\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#       Min. 1st Qu. Median Mean 3rd Qu. Max.  NA's\n# PM10  1.08    10.9   15.3 17.9    21.8  172 25679\n# dimension(s):\n#          from   to     offset  delta            refsys point\n# geometry    1   16         NA     NA +proj=longlat ... FALSE\n# time        1 4383 1998-01-01 1 days              Date FALSE\n#                                                                     values\n# geometry MULTIPOLYGON (((9.65 49.8, ...,...,MULTIPOLYGON (((10.8 51.6, ...\n# time                                                                  NULL\n\nand we can now for instance show the maps for six arbitrarily chosen days (Figure 7.12) , using\n\nlibrary(tidyverse)\na |> filter(time >= \"2008-01-01\", time < \"2008-01-07\") |> \n    plot(key.pos = 4)\n\n\n\n\nFigure 7.12: areal mean PM\\(_{10}\\) values, for six days\n\n\n\n\nor create a time series plot of mean values for a single state (Figure 7.13) by\n\nsuppressPackageStartupMessages(library(xts))\nplot(as.xts(a)[,4], main = DE_NUTS1$NAME_1[4])\n\n\n\n\nFigure 7.13: areal mean PM\\(_{10}\\) values, for six days\n\n\n\n\n\n\nExample: Bristol origin-destination datacube\nThe data used for this example come from Lovelace, Nowosad, and Muenchow (2019), and concern origin-destination (OD) counts: the number of persons going from region A to region B, by transportation mode. We have feature geometries for the 102 origin and destination regions, shown in Figure 7.14 .\n\nlibrary(spDataLarge)\nplot(st_geometry(bristol_zones), axes = TRUE, graticule = TRUE)\nplot(st_geometry(bristol_zones)[33], col = 'red', add = TRUE)\n\n\n\n\nFigure 7.14: origin destination data zones for Bristol, UK, with zone 33 (E02003043) colored red\n\n\n\n\nand the OD counts come in a table with OD pairs as records, and transportation mode as variables:\n\nhead(bristol_od)\n# # A tibble: 6 × 7\n#   o         d           all bicycle  foot car_driver train\n#   <chr>     <chr>     <dbl>   <dbl> <dbl>      <dbl> <dbl>\n# 1 E02002985 E02002985   209       5   127         59     0\n# 2 E02002985 E02002987   121       7    35         62     0\n# 3 E02002985 E02003036    32       2     1         10     1\n# 4 E02002985 E02003043   141       1     2         56    17\n# 5 E02002985 E02003049    56       2     4         36     0\n# 6 E02002985 E02003054    42       4     0         21     0\n\nWe see that many combinations of origin and destination are implicit zeroes, otherwise these two numbers would have been similar:\n\nnrow(bristol_zones)^2 # all combinations\n# [1] 10404\nnrow(bristol_od) # non-zero combinations\n# [1] 2910\n\nWe will form a three-dimensional vector datacube with origin, destination and transportation mode as dimensions. For this, we first “tidy” the bristol_od table to have origin (o), destination (d), transportation mode (mode), and count (n) as variables, using pivot_longer:\n\n# create O-D-mode array:\nbristol_tidy <- bristol_od |> \n    select(-all) |> \n    pivot_longer(3:6, names_to = \"mode\", values_to = \"n\")\nhead(bristol_tidy)\n# # A tibble: 6 × 4\n#   o         d         mode           n\n#   <chr>     <chr>     <chr>      <dbl>\n# 1 E02002985 E02002985 bicycle        5\n# 2 E02002985 E02002985 foot         127\n# 3 E02002985 E02002985 car_driver    59\n# 4 E02002985 E02002985 train          0\n# 5 E02002985 E02002987 bicycle        7\n# 6 E02002985 E02002987 foot          35\n\nNext, we form the three-dimensional array a, filled with zeroes:\n\nod <- bristol_tidy |> pull(\"o\") |> unique()\nnod <- length(od)\nmode <- bristol_tidy |> pull(\"mode\") |> unique()\nnmode = length(mode)\na = array(0L,  c(nod, nod, nmode), \n    dimnames = list(o = od, d = od, mode = mode))\ndim(a)\n# [1] 102 102   4\n\nWe see that the dimensions are named with the zone names (o, d) and the transportation mode name (mode). Every row of bristol_tidy denotes an array entry, and we can use this to to fill the non-zero entries of the bristol_tidy table with their appropriate value (n):\n\na[as.matrix(bristol_tidy[c(\"o\", \"d\", \"mode\")])] = bristol_tidy$n\n\nTo be sure that there is not an order mismatch between the zones in bristol_zones and the zone names in bristol_tidy, we can get the right set of zones by:\n\norder <- match(od, bristol_zones$geo_code) # it happens this equals 1:102\nzones <- st_geometry(bristol_zones)[order]\n\n(It happens that the order is already correct, but it is good practice to not assume this).\nNext, with zones and modes we can create a stars dimensions object:\n\nlibrary(stars)\n(d <- st_dimensions(o = zones, d = zones, mode = mode))\n#      from  to offset delta refsys point\n# o       1 102     NA    NA WGS 84 FALSE\n# d       1 102     NA    NA WGS 84 FALSE\n# mode    1   4     NA    NA     NA FALSE\n#                                                                 values\n# o    MULTIPOLYGON (((-2.51 51.4,...,...,MULTIPOLYGON (((-2.55 51.5,...\n# d    MULTIPOLYGON (((-2.51 51.4,...,...,MULTIPOLYGON (((-2.55 51.5,...\n# mode                                                 bicycle,...,train\n\nand finally build or stars object from a and d:\n\n(odm <- st_as_stars(list(N = a), dimensions = d))\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#    Min. 1st Qu. Median Mean 3rd Qu. Max.\n# N     0       0      0  4.8       0 1296\n# dimension(s):\n#      from  to offset delta refsys point\n# o       1 102     NA    NA WGS 84 FALSE\n# d       1 102     NA    NA WGS 84 FALSE\n# mode    1   4     NA    NA     NA FALSE\n#                                                                 values\n# o    MULTIPOLYGON (((-2.51 51.4,...,...,MULTIPOLYGON (((-2.55 51.5,...\n# d    MULTIPOLYGON (((-2.51 51.4,...,...,MULTIPOLYGON (((-2.55 51.5,...\n# mode                                                 bicycle,...,train\n\nWe can take a single slice through from this three-dimensional array, e.g. for zone 33 (Figure 7.14) , by odm[,,33], and plot it with\n\nplot(adrop(odm[,,33]) + 1, logz = TRUE)\n\n\n\n\nFigure 7.15: OD matrix sliced for destination zone 33, by transportation mode\n\n\n\n\nthe result of which is shown in Figure 7.15 . Subsetting this way, we take all attributes (there is only one: N) since the first argument is empty, we take all origin regions (second argument empty), we take destination zone 33 (third argument), and all transportation modes (fourth argument empty, or missing).\nWe plotted this particular zone because it has the largest number of travelers as its destination. We can find this out by summing all origins and travel modes by destination:\n\nd <- st_apply(odm, 2, sum)\nwhich.max(d[[1]])\n# [1] 33\n\nOther aggregations we can carry out include: total transportation by OD (102 x 102):\n\nst_apply(odm, 1:2, sum)\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#      Min. 1st Qu. Median Mean 3rd Qu. Max.\n# sum     0       0      0 19.2      19 1434\n# dimension(s):\n#   from  to offset delta refsys point\n# o    1 102     NA    NA WGS 84 FALSE\n# d    1 102     NA    NA WGS 84 FALSE\n#                                                              values\n# o MULTIPOLYGON (((-2.51 51.4,...,...,MULTIPOLYGON (((-2.55 51.5,...\n# d MULTIPOLYGON (((-2.51 51.4,...,...,MULTIPOLYGON (((-2.55 51.5,...\n\nOrigin totals, by mode:\n\nst_apply(odm, c(1,3), sum)\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#      Min. 1st Qu. Median Mean 3rd Qu. Max.\n# sum     1    57.5    214  490     771 2903\n# dimension(s):\n#      from  to offset delta refsys point\n# o       1 102     NA    NA WGS 84 FALSE\n# mode    1   4     NA    NA     NA FALSE\n#                                                                 values\n# o    MULTIPOLYGON (((-2.51 51.4,...,...,MULTIPOLYGON (((-2.55 51.5,...\n# mode                                                 bicycle,...,train\n\nDestination totals, by mode:\n\nst_apply(odm, c(2,3), sum)\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#      Min. 1st Qu. Median Mean 3rd Qu.  Max.\n# sum     0      13    104  490     408 12948\n# dimension(s):\n#      from  to offset delta refsys point\n# d       1 102     NA    NA WGS 84 FALSE\n# mode    1   4     NA    NA     NA FALSE\n#                                                                 values\n# d    MULTIPOLYGON (((-2.51 51.4,...,...,MULTIPOLYGON (((-2.55 51.5,...\n# mode                                                 bicycle,...,train\n\nOrigin totals, summed over modes:\n\no <- st_apply(odm, 1, sum)\n\nDestination totals, summed over modes (we had this):\n\nd <- st_apply(odm, 2, sum)\n\nWe plot o and d together after joining them by\n\nx <- (c(o, d, along = list(od = c(\"origin\", \"destination\"))))\nplot(x, logz = TRUE)\n\n\n\n\nFigure 7.16: total commutes, summed by origin (left) or destination (right).\n\n\n\n\nthe result of which is shown in Figure 7.16 .\nThere is something to say for the argument that such maps give the wrong message, as both amount (color) and polygon size give an impression of amount. To take out the amount in the count, we can compute densities (count / km\\(^2\\)), by\n\nlibrary(units)\na <- set_units(st_area(st_as_sf(o)), km^2)\no$sum_km <- o$sum / a\nd$sum_km <- d$sum / a\nod <- c(o[\"sum_km\"], d[\"sum_km\"], along = list(od = c(\"origin\", \"destination\")))\nplot(od, logz = TRUE)\n\n\n\n\nFigure 7.17: total commutes per square km, by area of origin (left) or destination (right)\n\n\n\n\nshown in Figure 7.17 . Another way to normalize these totals would be to divide them by population size.\n\n\nTidy array data\nThe tidy data paper (Wickham 2014) may suggest that such array data should be processed not as an array, but in a long table where each row holds (region, class, year, value), and it is always good to be able to do this. For primary handling and storage however, this is often not an option, because:\n\na lot of array data are collected or generated as array data, e.g. by imagery or other sensory devices, or e.g. by climate models\nit is easier to derive the long table form from the array than vice versa\nthe long table form requires much more memory, since the space occupied by dimension values is \\(O(nmp)\\), rather than \\(O(n+m+p)\\)\nwhen missing-valued cells are dropped, the long table form loses the implicit indexing of the array form\n\nTo put this argument to the extreme, consider for instance that all image, video and sound data are stored in array form; few people would make a real case for storing them in a long table form instead. Nevertheless, R packages like tsibble take this approach, and have to deal with ambiguous ordering of multiple records with identical time steps for different spatial features and index them, which is solved for both automatically by using the array form – at the cost of using dense arrays, in package stars.\nPackage stars tries to follow the tidy manifesto to handle array sets, and has particularly developed support for the case where one or more of the dimensions refer to space, and/or time."
  },
  {
    "objectID": "07-Introsf.html#sec-raster-to-vector",
    "href": "07-Introsf.html#sec-raster-to-vector",
    "title": "7  Introduction to sf and stars",
    "section": "7.5 raster-to-vector, vector-to-raster",
    "text": "7.5 raster-to-vector, vector-to-raster\n@sec-rasterize already showed some examples of raster-to-vector and vector-to-raster conversions, this section will add some code details and examples.\n\nvector-to-raster\nst_as_stars is meant as a method to transform objects into stars objects. However, not all stars objects are raster objects, and the method for sf objects creates a vector data cube with the geometry as its spatial (vector) dimension, and attributes as attributes. When given a feature geometry (sfc) object, st_as_stars will rasterize it, as shown in Section 7.7, and in Figure 7.18 .\n\n(file <- system.file(\"gpkg/nc.gpkg\", package=\"sf\"))\n# [1] \"/home/edzer/R/x86_64-pc-linux-gnu-library/4.0/sf/gpkg/nc.gpkg\"\nread_sf(file) |> \n    st_geometry() |>\n    st_as_stars() |>\n    plot()\n\n\n\n\nFigure 7.18: rasterizing vector geometry using st_as_stars\n\n\n\n\nHere, st_as_stars can be parameterized to control cell size, number of cells, and/or extent. The cell values returned are 0 for cells with center point outside the geometry and 1 for cell with center point inside or on the border of the geometry. Rasterizing existing features is done using st_rasterize, as also shown in Figure 1.5 :\n\nlibrary(dplyr)\nread_sf(file) |>\n    mutate(name = as.factor(NAME)) |>\n    select(SID74, SID79, name) |>\n    st_rasterize()\n# stars object with 2 dimensions and 3 attributes\n# attribute(s):\n#      SID74           SID79            name       \n#  Min.   : 0      Min.   : 0      Sampson :  655  \n#  1st Qu.: 3      1st Qu.: 3      Columbus:  648  \n#  Median : 5      Median : 6      Robeson :  648  \n#  Mean   : 8      Mean   :10      Bladen  :  604  \n#  3rd Qu.:10      3rd Qu.:13      Wake    :  590  \n#  Max.   :44      Max.   :57      (Other) :30952  \n#  NA's   :30904   NA's   :30904   NA's    :30904  \n# dimension(s):\n#   from  to   offset      delta refsys point values x/y\n# x    1 461 -84.3239  0.0192484  NAD27 FALSE   NULL [x]\n# y    1 141  36.5896 -0.0192484  NAD27 FALSE   NULL [y]\n\nSimilarly, line and point geometries can be rasterized, as shown in Figure 7.19 .\n\nread_sf(file) |>\n    st_cast(\"MULTILINESTRING\") |>\n    select(CNTY_ID) |>\n    st_rasterize() |>\n    plot()\n\n\n\n\nFigure 7.19: rasterization of North Carolina boundaries"
  },
  {
    "objectID": "07-Introsf.html#sec-projsf",
    "href": "07-Introsf.html#sec-projsf",
    "title": "7  Introduction to sf and stars",
    "section": "7.6 Coordinate transformations and conversions",
    "text": "7.6 Coordinate transformations and conversions\n\nst_crs\nSpatial objects of class sf or stars contain a coordinate reference system that can be get or replaced with st_crs, or be set or replaced in a pipe with st_set_crs. Coordinate reference systems can be set with an EPSG code, like st_crs(4326) which will be converted to st_crs('EPSG:4326'), or with a PROJ.4 string like \"+proj=utm +zone=25 +south\", a name like “WGS84”, or a name preceded by an authority like “OGC:CRS84”; alternatives include a coordinate reference system definition in WKT, WKT-2 (Section 2.5) or PROJJSON.\nThe object returned contains two fields:\n\nwkt with the WKT-2 representation\ninput with the user input, if any, or a human readable description of the coordinate reference system, if available\n\nNote that PROJ.4 strings can be used to define some coordinate reference systems, but they cannot be used to represent coordinate reference systems. Conversion of a WKT-2 in a crs object to a proj4string using the $proj4string method, as in\n\nx <- st_crs(\"OGC:CRS84\")\nx$proj4string\n# [1] \"+proj=longlat +datum=WGS84 +no_defs\"\n\nmay succeed but is not in general lossless or invertible. Using PROJ.4 strings, for instance to define a parameterized, projected coordinate reference system is fine as long as it is associated with the WGS84 datum.\n\n\nst_transform, sf_project\nCoordinate transformations or conversions (Section 2.4) for sf or stars objects are carried out with st_transform, which takes as its first argument a spatial object of class sf or stars that has a coordinate reference system set, and as a second argument with an crs object (or something that can be converted to it with st_crs). When PROJ finds more than one possibility to transform or convert from the source crs to the target crs, it chooses the one with the highest declared accuracy. More fine-grained control over the options is explained in Section 7.6.5.\nA lower-level function to transform or convert coordinates not in sf or stars objects is sf_project: it takes a matrix with coordinates and a source and target crs, and returns transformed or converted coordinates.\n\n\nsf_proj_info\nFunction sf_proj_info can be used to query available projections, ellipsoids, units and prime meridians available in the PROJ software. It takes a single parameter, type, which can have the following values:\n\ntype = \"proj\" lists the short and long names of available projections; short names can be used in a “+proj=name” string\ntype = \"ellps\" lists available ellipses, with name, long name, and ellipsoidal parameters\ntype = \"units\" lists the available length units, with conversion constant to meters\ntype = \"prime_meridians\" lists the prime meridians with their position with respect to the Greenwich meridian\n\n\n\nproj.db, datum grids, cdn.proj.org, local cache\nDatum grids (Section 2.4) can be installed locally, or be read from the PROJ datum grid CDN at https://cdn.proj.org/. If installed locally, they are read from the PROJ search path, which is shown by\n\nsf_proj_search_paths()\n# [1] \"/home/edzer/.local/share/proj\"\n# [2] \"/usr/share/proj\"\n\nThe main PROJ database is proj.db, an sqlite3 database typically found at\n\npaste0(tail(sf_proj_search_paths(), 1), .Platform$file.sep, \"proj.db\")\n# [1] \"/usr/share/proj/proj.db\"\n\nwhich can be read. The version of the snapshot of the EPSG database included in each PROJ release is stated in the \"metadata\" table of proj.db; the version of the PROJ runtime used by sf is shown by\n\nsf_extSoftVersion()[\"PROJ\"]\n#    PROJ \n# \"8.2.0\"\n\nIf for a particular coordinate transformation datum grids are not locally found, PROJ will search for online datum grids in the PROJ CDN when\n\nsf_proj_network()\n# [1] FALSE\n\nreturns TRUE. By default it is set to FALSE, but\n\nsf_proj_network(TRUE)\n# [1] \"https://cdn.proj.org\"\n\nsets it to TRUE and returns the URL of the network resource used; this resource can also be set to another resource, that may be faster or less limited.\nAfter querying a datum grid on the CDN, PROJ writes the portion of the grid queried (not, by default, the entire grid) to a local cache, which is another sqlite3 database found locally in a user directory, e.g. at\n\nlist.files(sf_proj_search_paths()[1], full.names = TRUE)\n# [1] \"/home/edzer/.local/share/proj/cache.db\"\n\nthat will be searched first in subsequent datum grid queries.\n\n\nTransformation pipelines\nInternally, PROJ uses a so-called coordinate operation pipeline, to represent the sequence of operations to get from a source CRS to a target CRS. Given multiple options to go from source to target, st_transform chooses the one with highest accuracy. We can query the options available by\n\n(p <- sf_proj_pipelines(\"OGC:CRS84\", \"EPSG:22525\"))\n# Candidate coordinate operations found:  5 \n# Strict containment:     FALSE \n# Axis order auth compl:  FALSE \n# Source:  OGC:CRS84 \n# Target:  EPSG:22525 \n# Best instantiable operation has accuracy: 2 m\n# Description: axis order change (2D) + Inverse of Corrego Alegre\n#              1970-72 to WGS 84 (2) + UTM zone 25S\n# Definition:  +proj=pipeline +step +proj=unitconvert +xy_in=deg\n#              +xy_out=rad +step +inv\n#              +proj=hgridshift\n#              +grids=br_ibge_CA7072_003.tif +step\n#              +proj=utm +zone=25 +south +ellps=intl\n\nand see that pipeline with the highest accuracy is summarised; we can see that it specifies use of a datum grid. Had we not switched on the network search, we would have obtained a different result:\n\nsf_proj_network(FALSE)\n# character(0)\nsf_proj_pipelines(\"OGC:CRS84\", \"EPSG:22525\")\n# Candidate coordinate operations found:  5 \n# Strict containment:     FALSE \n# Axis order auth compl:  FALSE \n# Source:  OGC:CRS84 \n# Target:  EPSG:22525 \n# Best instantiable operation has accuracy: 5 m\n# Description: axis order change (2D) + Inverse of Corrego Alegre\n#              1970-72 to WGS 84 (4) + UTM zone 25S\n# Definition:  +proj=pipeline +step +proj=unitconvert +xy_in=deg\n#              +xy_out=rad +step +proj=push +v_3\n#              +step +proj=cart +ellps=WGS84 +step\n#              +proj=helmert +x=206.05 +y=-168.28\n#              +z=3.82 +step +inv +proj=cart\n#              +ellps=intl +step +proj=pop +v_3 +step\n#              +proj=utm +zone=25 +south +ellps=intl\n# Operation 4 is lacking 1 grid with accuracy 2 m\n# Missing grid: br_ibge_CA7072_003.tif \n# URL: https://cdn.proj.org/br_ibge_CA7072_003.tif\n\nand a report that a datum grid is missing. The object returned by sf_proj_pipelines is a sub-classed data.frame, with columns\n\nnames(p)\n# [1] \"id\"           \"description\"  \"definition\"   \"has_inverse\" \n# [5] \"accuracy\"     \"axis_order\"   \"grid_count\"   \"instantiable\"\n# [9] \"containment\"\n\nand we can list for instance the accuracies by\n\np$accuracy\n# [1]  5  5  8  2 NA\n\nHere, NA refers to “ballpark accuracy”, which may be anything in the 30-120 m range:\n\np[is.na(p$accuracy),]\n# Candidate coordinate operations found:  1 \n# Strict containment:     FALSE \n# Axis order auth compl:  FALSE \n# Source:  OGC:CRS84 \n# Target:  EPSG:22525 \n# Best instantiable operation has only ballpark accuracy \n# Description: Ballpark geographic offset from WGS 84 (CRS84) to\n#              Corrego Alegre 1970-72 + UTM zone 25S\n# Definition:  +proj=pipeline +step +proj=unitconvert +xy_in=deg\n#              +xy_out=rad +step +proj=utm +zone=25\n#              +south +ellps=intl\n\nThe default, most accurate pipeline chosen by st_transform can be overriden by specifying pipeline argument, as selected from the set of options in p$definition.\n\n\nAxis order\nAs mentioned in Section 2.5, EPSG:4326 defines the first axis to be associated with latitude and the second with longitude; this is also the case for a number of other ellipsoidal coordinate reference systems. Although this is how the authority (EPSG) prescribes this, it is not how most datasets are currently stored! As most other software, package sf by default ignores this, and interprets ellipsoidal coordinate pairs as (longitude, latitude) by default. If however data needs to be read e.g. from a WFS service that wants to be compliant to the authority, one can set\n\nst_axis_order(TRUE)\n\nto globally instruct sf, when calling GDAL and PROJ routines, that authority compliance (latitude, longitude order) is assumed. It is anticipated that problems may happen in case of authority compliance, e.g. with plotting data. The plot method for sf objects respects the axis order flag and will swap coordinates using the transformation pipeline \"+proj=pipeline +step +proj=axisswap +order=2,1\" before plotting them, but e.g. geom_sf() in ggplot2 has not been modified to do this. As mentioned earlier, the axis order ambiguity of EPSG:4326 is resolved by replacing it with OGC:CRS84."
  },
  {
    "objectID": "07-Introsf.html#sec-warp",
    "href": "07-Introsf.html#sec-warp",
    "title": "7  Introduction to sf and stars",
    "section": "7.7 Transforming and warping rasters",
    "text": "7.7 Transforming and warping rasters\nWhen using st_transform on a raster data set, as e.g. in\n\ntif <- system.file(\"tif/L7_ETMs.tif\", package = \"stars\")\nread_stars(tif) |>\n    st_transform('OGC:CRS84')\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max.\n# L7_ETMs.tif     1      54     69 68.9      86  255\n# dimension(s):\n#      from  to offset delta refsys point\n# x       1 349     NA    NA WGS 84 FALSE\n# y       1 352     NA    NA WGS 84 FALSE\n# band    1   6     NA    NA     NA    NA\n#                               values x/y\n# x    [349x352] -34.9165,...,-34.8261 [x]\n# y     [349x352] -8.0408,...,-7.94995 [y]\n# band                            NULL    \n# curvilinear grid\n\nwe see that a curvilinear is created, which means that for every grid cell the coordinates are computed in the new CRS, which no longer form a regular grid. Plotting such data is extremely slow, as small polygons are computed for every grid cell and then plotted. The advantage of this is that no information is lost: grid cell values remain identical after the projection.\nWhen we start with a raster on a regular grid and want to obtain a regular grid in a new coordinate reference system, we need to warp the grid: we need to recreate a grid at new locations, and use some rule to assign values to new grid cells. Rules can involve using the nearest value, or using some form of interpolation. This operation is not lossless and not invertible.\nThe best options for warping is to specify the target grid as a stars object. When only a target CRS is specified, default options for the target grid are picked that may be completely inappropriate for the problem at hand. An example workflow that uses only a target CRS is\n\nread_stars(tif) |>\n    st_warp(crs = st_crs('OGC:CRS84')) |>\n    st_dimensions()\n#      from  to   offset        delta refsys point values x/y\n# x       1 350 -34.9166  0.000259243 WGS 84    NA   NULL [x]\n# y       1 352 -7.94982 -0.000259243 WGS 84    NA   NULL [y]\n# band    1   6       NA           NA     NA    NA   NULL\n\nwhich creates a pretty close raster, but then the transformation is also relatively modest. For a workflow that creates a target raster first, here with exactly the same number of rows and columns as the original raster one could use:\n\nr <- read_stars(tif)\ngrd <- st_bbox(r) |>\n        st_as_sfc() |>\n        st_transform('OGC:CRS84') |>\n        st_bbox() |>\n        st_as_stars(nx = dim(r)[\"x\"], ny = dim(r)[\"y\"])\nst_warp(r, grd)\n# stars object with 3 dimensions and 1 attribute\n# attribute(s):\n#              Min. 1st Qu. Median Mean 3rd Qu. Max. NA's\n# L7_ETMs.tif     1      54     69 68.9      86  255 6180\n# dimension(s):\n#      from  to   offset        delta refsys point values x/y\n# x       1 349 -34.9166  0.000259666 WGS 84    NA   NULL [x]\n# y       1 352 -7.94982 -0.000258821 WGS 84    NA   NULL [y]\n# band    1   6       NA           NA     NA    NA   NULL"
  },
  {
    "objectID": "07-Introsf.html#exercises",
    "href": "07-Introsf.html#exercises",
    "title": "7  Introduction to sf and stars",
    "section": "7.8 Exercises",
    "text": "7.8 Exercises\nUse R to solve the following exercises.\n\nFind the names of the nc counties that intersect LINESTRING(-84 35,-78 35); use [ for this, and as an alternative use st_join() for this.\nRepeat this after setting sf_use_s2(FALSE), and compute the difference (hint: use setdiff()), and color the counties of the difference using color ‘#88000088’.\nPlot the two different lines in a single plot; note that R will plot a straight line always straight in the projection currently used; st_segmentize can be used to add points on straight line, or on a great circle for ellipsoidal coordinates.\nNDVI, normalized differenced vegetation index, is computed as (NIR-R)/(NIR+R), with NIR the near infrared and R the red band. Read the L7_ETMs.tif file into object x, and distribute the band dimensions over attributes by split(x, \"band\"). Then, add attribute NDVI to this object by using an expression that uses the NIR (band 4) and R (band 3) attributes directly.\nCompute NDVI for the L7_ETMs.tif image by reducing the band dimension, using st_apply and an a function ndvi = function(x) { (x[4]-x[3])/(x[4]+x[3]) }. Plot the result, and write the result to a GeoTIFF.\nUse st_transform to transform the stars object read from L7_ETMs.tif to OGC:CRS84. Print the object. Is this a regular grid? Plot the first band using arguments axes=TRUE and border=NA, and explain why this takes such a long time.\nUse st_warp to warp the L7_ETMs.tif object to OGC:CRS84, and plot the resulting object with axes=TRUE. Why is the plot created much faster than after st_transform?\nUsing a vector representation of the raster L7_ETMs, plot the intersection with a circular area around POINT(293716 9113692) with radius 75 m, and compute the area-weighted mean pixel values for this circle. Compare the area-weighted values with those obtained by aggregate using the vector data, and by aggregate using the raster data, using exact=FALSE (default) and exact=FALSE. Explain the differences.\n\n\n\n\n\nEddelbuettel, Dirk. 2013. Seamless r and c++ Integration with Rcpp. Springer.\n\n\nGreenberg, Jonathan Asher, and Matteo Mattiuzzi. 2020. gdalUtils: Wrappers for the Geospatial Data Abstraction Library (GDAL) Utilities. https://CRAN.R-project.org/package=gdalUtils.\n\n\nHerring, John et al. 2011. “Opengis Implementation Standard for Geographic Information-Simple Feature Access-Part 1: Common Architecture [Corrigendum].”\n\n\nHijmans, Robert J. 2022a. Raster: Geographic Data Analysis and Modeling. https://rspatial.org/raster.\n\n\n———. 2022b. Terra: Spatial Data Analysis. https://rspatial.org/terra/.\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2019. Geocomputation with R. Chapman; Hall/CRC.https://geocompr.robinlovelace.net/ .\n\n\nPebesma, Edzer. 2012. “spacetime: Spatio-Temporal Data in R.” Journal of Statistical Software 51 (7): 1–30. https://www.jstatsoft.org/v51/i07/.\n\n\n———. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPlate, Tony, and Richard Heiberger. 2016. Abind: Combine Multidimensional Arrays. https://CRAN.R-project.org/package=abind.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (1).https://www.jstatsoft.org/article/view/v059i10 .\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the Tidyverse.” Journal of Open Source Software 4 (43): 1686. https://joss.theoj.org/papers/10.21105/joss.01686.\n\n\nWickham, Hadley, and Garret Grolemund. 2017. R for Data Science. O’Reilly. http://r4ds.had.co.nz/."
  },
  {
    "objectID": "08-Large.html",
    "href": "08-Large.html",
    "title": "8  Large data and cloud native",
    "section": "",
    "text": "This chapter describes how large spatial and spatiotemporal datasets can be handled with R, with a focus on packages sf and stars. For practical use, we classify large data sets as either:\nThese three categories correspond very roughly to Gigabyte-, Terabyte- and Petabyte-sized data sets. Besides size considerations, considerations of access and processing speed also play a role, in particular by larger datasets or interactive applications. Cloud native geospatial formats are formats optimised with processing on cloud infrastructure in mind, where costs of computing and storage need to be considered and optimised. Such costs can be reduced by\nIt should be noted that there are no silver bullets in this area: optimizing storage for one particular access way will lead to slow access for other ways: for instance if raster data is stored for optimal access of spatial regions at different spatial resolutions, reading the data as pixel time series may be very slow. Compression leads to low storage costs but to higher processing costs when reading, because of the decompression involved."
  },
  {
    "objectID": "08-Large.html#sec-largesf",
    "href": "08-Large.html#sec-largesf",
    "title": "8  Large data and cloud native",
    "section": "8.1 Vector data: sf",
    "text": "8.1 Vector data: sf\n\nReading from local disk\nFunction st_read reads vector data from disk, using GDAL, and then keeps the data read in working memory. In case the file is too large to be read in working memory, several options exist to read parts of the file. The first is to set argument wkt_filter with a WKT text string containing a geometry; only geometries from the target file that intersect with this geometry will be returned. An example is\n\nlibrary(sf)\n# Linking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.0; sf_use_s2() is TRUE\n(file <- system.file(\"gpkg/nc.gpkg\", package = \"sf\"))\n# [1] \"/home/edzer/R/x86_64-pc-linux-gnu-library/4.0/sf/gpkg/nc.gpkg\"\n(st_bbox(c(xmin = -81.7,ymin = 36.2, xmax = -80.4, ymax = 36.5)) |>\n    st_as_sfc() |> st_as_text() -> bb)\n# [1] \"POLYGON ((-81.7 36.2, -80.4 36.2, -80.4 36.5, -81.7 36.5, -81.7 36.2))\"\nnc.1 <- st_read(file, wkt_filter = bb)\n# Reading layer `nc.gpkg' from data source \n#   `/home/edzer/R/x86_64-pc-linux-gnu-library/4.0/sf/gpkg/nc.gpkg' \n#   using driver `GPKG'\n# Simple feature collection with 8 features and 14 fields\n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -81.9 ymin: 36 xmax: -80 ymax: 36.6\n# Geodetic CRS:  NAD27\n\nThe second option is to use the query argument to st_read, which can be any query in “OGR SQL” dialect, which can be used to select features from a layer, and limit fields. An example is:\n\nq <- paste(\"select BIR74,SID74,geom from 'nc.gpkg' where BIR74 > 1500\")\nnc.2 <- st_read(file, query = q)\n# Reading query `select BIR74,SID74,geom from 'nc.gpkg' where BIR74 > 1500'\n# from data source `/home/edzer/R/x86_64-pc-linux-gnu-library/4.0/sf/gpkg/nc.gpkg' \n#   using driver `GPKG'\n# Simple feature collection with 61 features and 2 fields\n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -83.3 ymin: 33.9 xmax: -76.1 ymax: 36.6\n# Geodetic CRS:  NAD27\n\nNote that nc.gpkg is the layer name, which can be obtained from file using st_layers. Sequences of records can be read using LIMIT and OFFSET, to read records 51-60 use\n\nq <- paste(\"select BIR74,SID74,geom from 'nc.gpkg' LIMIT 10 OFFSET 50\")\nnc.2 <- st_read(file, query = q)\n# Reading query `select BIR74,SID74,geom from 'nc.gpkg' LIMIT 10 OFFSET 50'\n# from data source `/home/edzer/R/x86_64-pc-linux-gnu-library/4.0/sf/gpkg/nc.gpkg' \n#   using driver `GPKG'\n# Simple feature collection with 10 features and 2 fields\n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -84 ymin: 35.2 xmax: -75.5 ymax: 36.2\n# Geodetic CRS:  NAD27\n\nFurther query options include selection on geometry type, polygon area. When the dataset queried is a spatial database, then the query is passed on to the database and not interpreted by GDAL; this means that more powerful features will be available. Further information is found in the GDAL documentation under “OGR SQL dialect”.\nVery large files or directories that are zipped can be read without the need to unzip them, using the /vsizip (for zip), /vsigzip (for gzip) or /vsitar (for tar files) prefix to files; this is followed by the path to the zip file, and then followed by the file inside this zip file. Reading files this way may come at some computational cost.\n\n\nReading from databases, dbplyr\n\n\n\n\n\n\nAlthough GDAL has support for several spatial databases, and as mentioned above it passes on SQL in the query argument to the database, it is sometimes beneficial to directly read from and write to a spatial database using the R database drivers for this. An example of this is:\n\npg <- DBI::dbConnect(\n    RPostgres::Postgres(),\n    host = \"localhost\",\n    dbname = \"postgis\")\nst_read(pg, query = \"select BIR74,wkb_geometry from nc limit 3\")\n# Simple feature collection with 3 features and 1 field\n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -81.7 ymin: 36.2 xmax: -80.4 ymax: 36.6\n# Geodetic CRS:  NAD27\n#   bir74                   wkb_geometry\n# 1  1091 MULTIPOLYGON (((-81.5 36.2,...\n# 2   487 MULTIPOLYGON (((-81.2 36.4,...\n# 3  3188 MULTIPOLYGON (((-80.5 36.2,...\n\nA spatial query might look like\n\nq <- \"SELECT BIR74,wkb_geometry FROM nc WHERE \\\n  ST_Intersects(wkb_geometry, 'SRID=4267;POINT (-81.50 36.43)');\"\nst_read(pg, query = q)\n# Simple feature collection with 1 feature and 1 field\n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -81.7 ymin: 36.2 xmax: -81.2 ymax: 36.6\n# Geodetic CRS:  NAD27\n#   bir74                   wkb_geometry\n# 1  1091 MULTIPOLYGON (((-81.5 36.2,...\n\nHere, the intersection is done in the database, and uses the spatial index typically present.\nThe same mechanism works when using dplyr with a database backend:\n\nlibrary(dplyr, warn.conflicts = FALSE)\nnc_db <- tbl(pg, \"nc\")\n\nSpatial queries can be formulated and are passed on to the database:\n\nnc_db |> \n     filter(ST_Intersects(wkb_geometry, \n                          'SRID=4267;POINT (-81.50 36.43)')) |>\n     collect()\n# # A tibble: 1 × 16\n#   ogc_fid  area perimeter cnty_ cnty_id name  fips  fipsno\n#     <int> <dbl>     <dbl> <dbl>   <dbl> <chr> <chr>  <dbl>\n# 1       1 0.114      1.44  1825    1825 Ashe  37009  37009\n# # … with 8 more variables: cress_id <int>, bir74 <dbl>,\n# #   sid74 <dbl>, nwbir74 <dbl>, bir79 <dbl>, sid79 <dbl>,\n# #   nwbir79 <dbl>, wkb_geometry <pq_gmtry>\nnc_db |> filter(ST_Area(wkb_geometry) > 0.1) |> head(3)\n# # Source:   SQL [3 x 16]\n# # Database: postgres  [edzer@localhost:5432/postgis]\n#   ogc_fid  area perimeter cnty_ cnty_id name        fips  fipsno\n#     <int> <dbl>     <dbl> <dbl>   <dbl> <chr>       <chr>  <dbl>\n# 1       1 0.114      1.44  1825    1825 Ashe        37009  37009\n# 2       3 0.143      1.63  1828    1828 Surry       37171  37171\n# 3       5 0.153      2.21  1832    1832 Northampton 37131  37131\n# # … with 8 more variables: cress_id <int>, bir74 <dbl>,\n# #   sid74 <dbl>, nwbir74 <dbl>, bir79 <dbl>, sid79 <dbl>,\n# #   nwbir79 <dbl>, wkb_geometry <pq_gmtry>\n\nIt should be noted that PostGIS’ ST_Area computes the same area as the AREA field in nc, which is the meaningless value obtained by assuming the coordinates are projected, although they are ellipsoidal.\n\n\nReading from online resources or web services\nGDAL drivers support reading from online resources, by prepending /vsicurl/ before the URL starting with e.g. https://. A number of similar drivers specialized for particular clouds include /vsis3/ for Amazon S3, /vsigs/ for Google Cloud Storage, /vsiaz/ for Azure, /vsioss/ for Alibaba Cloud, or /vsiswift/ for OpenStack Swift Object Storage. These prepositions can be combined e.g. with /vsizip/ to read a zipped online resource. Depending on the file format used, reading information this way may always involve reading the entire file, or reading it multiple times, and may not always be the most efficient way of handling resources.\n\n\nAPI’s, OpenStreetMap\nAlthough online resource do not have to be stored files but could be created server-side on the fly, typical web services for geospatial data create data on the fly, and give access to this through an API. As an example, data from OpenStreetMap can be bulk downloaded and read locally, e.g. using the GDAL vector driver, but more typical a user wants to obtain a small subset of the data or use the data for a small query. Several R packages exist that query OpenStreetMap data:\n\nPackage OpenStreetMap downloads data as raster tiles, typically used as backdrop or reference for plotting other features\nPackage osmdata downloads vector data as points, lines or polygons in sf or sp format\nPackage osmar returns vector data, but in addition the network topology (as an igraph object) that contains how road elements form a network, and has functions that compute the shortest route\n\nWhen provided with a correctly formulated API call in the URL the highly configurable GDAL OSM driver (in st_read) can read an “.osm” file (xml) and returns a dataset with five layers: points that have significant tags, lines with non-area “way” features, multilinestrings with “relation” features, multipolygons with “relation” features and other_relations. A simple and very small bounding box query to OpenStreetMap could look like\n\ndownload.file(\n\"https://openstreetmap.org/api/0.6/map?bbox=7.595,51.969,7.598,51.970\",\n\"data/ms.osm\", method = \"auto\")\n\nand from this file we can read the layer lines, and plot its first attribute by\n\no <- read_sf(\"data/ms.osm\", \"lines\")\np <- read_sf(\"data/ms.osm\", \"multipolygons\")\nbb <- st_bbox(c(xmin = 7.595, ymin = 51.969, \n               xmax = 7.598, ymax = 51.970), crs = 'OGC:CRS84')\nplot(st_as_sfc(bb), axes = TRUE, lwd = 2, lty = 2, cex.axis = .5)\nplot(o[,1], lwd = 2, add = TRUE)\nplot(st_geometry(p), border = NA, col = '#88888888', add = TRUE)\n\n\n\n\nFigure 8.1: OpenStreetMap vector data\n\n\n\n\nthe result of which is shown in Figure 8.1 . The overpass API provides a more generic and powerful query functionality to OpenStreetMap data.\n\n\nCloud native: GeoParquet and GeoArrow\nTwo formats dedicated to cloud native analysis are derived from the Apache projects Parquet and Arrow. Both provide column oriented storage of tabular data, meaning that the reading of a single fields for many records is fast, compared to record oriented storage of most other databases. The Geo- extensions of both involve\n\na way of storing a geometry column, either in a well-known binary or text form, or in a more efficient form where sub-geometries are indexed up front\nstorage of a coordinate reference system.\n\nAt the time of writing this book, both formats are under active development but drivers for reading or creating them are available in GDAL starting from version 3.5. Both formats allow for compressed storage; the difference seems to be that (Geo)Parquet is more oriented towards persistent storage, where (Geo)Arrow is more oriented to fast access and fast computation; Arrow can for instance be both an in-memory and an on-disk format."
  },
  {
    "objectID": "08-Large.html#raster-data-stars",
    "href": "08-Large.html#raster-data-stars",
    "title": "8  Large data and cloud native",
    "section": "8.2 Raster data: stars",
    "text": "8.2 Raster data: stars\nA common challenge with raster datasets is not only that they come in large files (single Sentinel-2 tiles are around 1 GB), but that many of these files, potentially thousands, are needed to address the area and time period of interest. At time of writing this, the Copernicus program that runs all Sentinel satellites publishes 160 TB of images per day. This means that a classic pattern in using R, consisting of:\n\ndownloading data to local disc,\nloading the data in memory,\nanalysing it\n\nis not going to work.\nCloud-based Earth Observation processing platforms like Google Earth Engine (Gorelick et al. 2017) or Sentinel Hub recognize this and let users work with datasets up to the petabyte range rather easily and with a great deal of interactivity. They share the following properties:\n\ncomputations are postponed as long as possible (lazy evaluation)\nonly the data you ask for are being computed and returned, and nothing more\nstoring intermediate results is avoided in favour of on-the-fly computations\nmaps with useful results are generated and shown quickly to allow for interactive model development\n\nThis is similar to the dbplyr interface to databases and cloud-based analytics environments, but differs in the aspect of what we want to see quickly: rather than the first \\(n\\) records of a dbplyr table, we want a quick overview of the results, in the form of a map covering the whole area, or part of it, but at screen resolution rather than native (observation) resolution.\nIf for instance we want to “see” results for the United States on screen with 1000 x 1000 pixels, we only need to compute results for this many pixels, which corresponds roughly to data on a grid with 3000 m x 3000 m grid cells. For Sentinel-2 data with 10 m resolution, this means we can subsample with a factor 300, giving 3 km x 3 km resolution. Processing, storage and network requirements then drop a factor \\(300^2 \\approx 10^5\\), compared to working on the native 10 m x 10 m resolution. On the platforms mentioned, zooming in the map triggers further computations on a finer resolution and smaller extent.\nA simple optimisation that follows these lines is how stars’ plot method works: in the case of plotting large rasters, it subsamples the array before it plots, drastically saving time. The degree of subsampling is derived from the plotting region size and the plotting resolution (pixel density). For vector devices, such as pdf, R sets plot resolution to 75 dpi, corresponding to 0.3 mm per pixel. Enlarging plots may reveal this, but replotting to an enlarged devices will create a plot at target density.\n\nstars proxy objects\nTo handle datasets that are too large to fit in memory, stars provides stars_proxy objects. To demonstrate its use, we will use the starsdata package, an R data package with larger datasets (around 1 GB total). It can be installed by\n\noptions(timeout = 600) # or large in case of slow network\ninstall.packages(\"starsdata\", repos = \"http://pebesma.staff.ifgi.de\", \n    type = \"source\")\n\nWe can “load” a Sentinel-2 image from it by\n\nlibrary(stars)\n# Loading required package: abind\nf <- paste0(\"sentinel/S2A_MSIL1C_20180220T105051_N0206\",\n           \"_R051_T32ULE_20180221T134037.zip\")\ngranule <- system.file(file = f, package = \"starsdata\")\nfile.size(granule)\n# [1] 7.69e+08\nbase_name <- strsplit(basename(granule), \".zip\")[[1]]\ns2 <- paste0(\"SENTINEL2_L1C:/vsizip/\", granule, \"/\", base_name, \n    \".SAFE/MTD_MSIL1C.xml:10m:EPSG_32632\")\n(p <- read_stars(s2, proxy = TRUE))\n# stars_proxy object with 1 attribute in 1 file(s):\n# $EPSG_32632\n# [1] \"[...]/MTD_MSIL1C.xml:10m:EPSG_32632\"\n# \n# dimension(s):\n#      from    to offset delta            refsys point    values\n# x       1 10980  3e+05    10 WGS 84 / UTM z...    NA      NULL\n# y       1 10980  6e+06   -10 WGS 84 / UTM z...    NA      NULL\n# band    1     4     NA    NA                NA    NA B4,...,B8\n#      x/y\n# x    [x]\n# y    [y]\n# band\nobject.size(p)\n# 11808 bytes\n\nand we see that this does not actually load any of the pixel values, but keeps the reference to the dataset and fills the dimensions table. (The convoluted s2 name is needed to point GDAL to the right file inside the .zip file containing 115 files in total).\nThe idea of a proxy object is that we can build expressions like\n\np2 <- p * 2\n\nbut that the computations for this are postponed. Only when we really need the data, e.g. because we want to plot it, is p * 2 evaluated. We need data when either:\n\nwe want to plot data, or\nwe want to write an object to disk, with write_stars, or\nwe want to explicitly load an object in memory, with st_as_stars\n\nIn case the entire object does not fit in memory, plot and write_stars choose different strategies to deal with this:\n\nplot fetches only the pixels that can be seen, rather than all pixels available\nwrite_stars reads, processes, and writes data chunk by chunk\n\nDownsampling and chunking is implemented for spatially dense images, not e.g. for dense time series, or other dense dimensions.\nAs an example, the output of plot(p), shown in Figure 8.2\n\nplot(p)\n\n\n\n\nFigure 8.2: downsampled 10 m bands of a Sentinel-2 scene\n\n\n\n\nonly fetches the pixels that can be seen on the plot device, rather than the 10980 x 10980 pixels available in each band. The downsampling ratio taken is\n\n(ds <- floor(sqrt(prod(dim(p)) / prod(dev.size(\"px\")))))\n# [1] 19\n\nmeaning that for every 19 \\(\\times\\) 19 sub-image in the original image, only one pixel is read, and plotted. This value is still a bit too low as it ignores the white space and space for the key on the plotting device.\n\n\nOperations on proxy objects\nSeveral dedicated methods are available for stars_proxy objects:\n\nmethods(class = \"stars_proxy\")\n#  [1] [               [[<-            [<-            \n#  [4] adrop           aggregate       aperm          \n#  [7] as.data.frame   c               coerce         \n# [10] dim             droplevels      filter         \n# [13] hist            initialize      is.na          \n# [16] Math            merge           mutate         \n# [19] Ops             plot            predict        \n# [22] print           pull            rename         \n# [25] select          show            slice          \n# [28] slotsFromS3     split           st_apply       \n# [31] st_as_sf        st_as_stars     st_crop        \n# [34] st_dimensions<- st_downsample   st_mosaic      \n# [37] st_redimension  st_sample       st_set_bbox    \n# [40] transmute       write_stars    \n# see '?methods' for accessing help and source code\n\nWe have seen plot and print in action; dim reads out the dimension from the dimensions metadata table.\nThe three methods that actually fetch data are st_as_stars, plot and write_stars. st_as_stars reads the actual data into a stars object, its argument downsample controls the downsampling rate. plot does this too, choosing an appropriate downsample value from the device resolution, and plots the object. write_stars writes a stars_proxy object to disk.\nAll other methods for stars_proxy objects do not actually operate on the raster data but add the operations to a to do list, attached to the object. Only when actual raster data are fetched, e.g. by calling plot or st_as_stars, the commands in this list are executed.\nst_crop limits the extent (area) of the raster that will be read. c combines stars_proxy objects, but still doesn’t read any data. adrop drops empty dimensions, aperm changes dimension order.\nwrite_stars reads and processes its input chunk-wise; it has an argument chunk_size that lets users control the size of spatial chunks.\n\n\nRemote raster resources\nA format like “cloud-optimized GeoTIFF” (COG) has been specially designed to be efficient and resource-friendly in many cases, e.g. for only reading the metadata, or for only reading overviews (low-resolutions versions of the full imagery) or spatial regions using the /vsixxx/ mechanisms (Section 8.1.3). COGs can also be created using the GeoTIFF driver of GDAL, and setting the right dataset creation options in a write_stars call."
  },
  {
    "objectID": "08-Large.html#very-large-data-cubes",
    "href": "08-Large.html#very-large-data-cubes",
    "title": "8  Large data and cloud native",
    "section": "8.3 Very large data cubes",
    "text": "8.3 Very large data cubes\nAt some stage, data sets need to be analysed that are so large that downloading them is no longer feasible; even when local storage would be sufficient, network bandwidth may become limiting. Examples are satellite image archives such as those from Landsat and Copernicus (Sentinel-x), or model computations such as the ERA5 (Hersbach et al. 2020), a model reanalysis of the global atmosphere, land surface and ocean waves from 1950 onwards. In such cases it may be most helpful to gain access to virtual machines in a cloud that has these data available, or to use a system that lets the user carry out computations without having to worry about virtual machines and storage. Both options will be discussed.\n\nFinding and processing assets\nWhen working on a virtual machine on a cloud, a first task is usually to find the assets (files) to work on. It looks attractive to obtain a file listing, and then parse file names such as\nS2A_MSIL1C_20180220T105051_N0206_R051_T32ULE_20180221T134037.zip\nfor their metadata including the date of acquisition and the code of the spatial tile covered. Obtaining such a file listing however is usually computationally very demanding, as is the processing of the result, when the number of tiles runs in the many millions.\nA solution to this is to use a catalogue. The recently developed and increasingly deployed STAC, short for spatiotemporal asset catalogue, provides an API that can be used to query image collections by properties like bounding box, date, band, and cloud coverage. The R package rstac (Brazil Data Cube Team 2021) provides an R interface to create queries, and manage the information returned.\nProcessing the resulting files may involve creating a data cube at a lower spatial and/or temporal resolution, from images that may span a range of coordinate reference systems (e.g., several UTM zones). An R package that can do that is gdalcubes (Appel 2022; Appel and Pebesma 2019), which can also directly use STAC output (Appel, Pebesma, and Mohr 2021).\n\n\nCloud native storage: Zarr\nWhere COG provides cloud native storage for raster imagery, Zarr is a format for cloud native storage of large multidimensional arrays. It can be seen as a successor of NetCDF and seems to follow similar conventions, being used by the climate and forecast communities. Zarr “files” are really directories with subdirectories containing compressed chunks of the data. The compression algorithm and the chunking strategy will have an effect on how fast particular sub-cubes can be read. Function stars::read_mdim has options for reading sub-cubes by specifying offset and size of the index in each dimension, and a step size to read one or more dimensions at a lower resolution. Similarly, stars::write_mdim can write multidimensional arrays to Zarr (or NetCDF) files. Both use the GDAL C++ multidimensional array API for this.\n\n\nAPIs for data: GEE, openEO\nPlatforms that do not require the management and programming of virtual machines in the cloud but provide direct access to the imagery managed include GEE, openEO, and the climate data store.\nGoogle Earth Engine (GEE) is a cloud platform that allows users to compute on large amounts of Earth Observation data as well as modelling products (Gorelick et al. 2017). It has powerful analysis capabilities, including most of the data cube operations explained in Section 6.3. It has an IDE where scripts can be written in JavaScript, and a Python interface to the same functionality. The code of GEE is not open source, and cannot be extended by arbitrary user-defined functions in languages like Python or R. R package rgee (Aybar 2022) provides an R client interface to GEE.\nCloud-based data cube processing platforms built entirely around open source software are emerging, several of which using the openEO API (Schramm et al. 2021). This API allows for user-defined functions (UDFs) written in Python or R that are being passed on through the API and executed at the pixel level, e.g. to aggregate or reduce dimensions. UDFs in R represent the data chunk to be processed as a stars object, in Python xarray objects are used.\nOther platforms include the Copernicus climate data store (Raoult et al. 2017) or atmosphere data store, which allow processing of atmospheric or climate data from ECMWF, including ERA5. An R package with an interface to both data stores is ecmwfr (Hufkens 2020)."
  },
  {
    "objectID": "08-Large.html#exercises",
    "href": "08-Large.html#exercises",
    "title": "8  Large data and cloud native",
    "section": "8.4 Exercises",
    "text": "8.4 Exercises\nUse R to solve the following exercises.\n\nFor the S2 image (above), find out in which order the bands are by using st_get_dimension_values(), and try to find out (e.g. by internet search) which spectral bands / colors they correspond to.\nCompute NDVI for the S2 image, using st_apply and an an appropriate ndvi function. Plot the result to screen, and then write the result to a GeoTIFF. Explain the difference in runtime between plotting and writing.\nPlot an RGB composite of the S2 image, using the rgb argument to plot(), and then by using st_rgb() first.\nSelect five random points from the bounding box of S2, and extract the band values at these points; convert the object returned to an sf object.\nFor the 10 km radius circle around POINT(390000  5940000), use aggregate to compute the mean pixel values of the S2 image when downsampling the images with factor 30, and on the original resolution. Compute the relative difference between the results.\nUse hist to compute the histogram on the downsampled S2 image. Also do this for each of the bands. Use ggplot2 to compute a single plot with all four histograms.\nUse st_crop to crop the S2 image to the area covered by the 10 km circle. Plot the results. Explore the effect of setting argument crop = FALSE\nWith the downsampled image, compute the logical layer where all four bands have pixel values higher than 1000. Use a raster algebra expression on the four bands (use split first), or use st_apply for this.\n\n\n\n\n\nAppel, Marius. 2022. Gdalcubes: Earth Observation Data Cubes from Satellite Image Collections. https://github.com/appelmar/gdalcubes_R.\n\n\nAppel, Marius, and Edzer Pebesma. 2019. “On-Demand Processing of Data Cubes from Satellite Image Collections with the Gdalcubes Library.” Data 4 (3): 92. https://www.mdpi.com/2306-5729/4/3/92.\n\n\nAppel, Marius, Edzer Pebesma, and Matthias Mohr. 2021. Cloud-Based Processing of Satellite Image Collections in r Using STAC, COGs, and on-Demand Data Cubes. https://r-spatial.org/r/2021/04/23/cloud-based-cubes.html.\n\n\nAybar, Cesar. 2022. Rgee: R Bindings for Calling the Earth Engine API. https://CRAN.R-project.org/package=rgee.\n\n\nBrazil Data Cube Team. 2021. Rstac: Client Library for SpatioTemporal Asset Catalog. https://github.com/brazil-data-cube/rstac.\n\n\nGorelick, Noel, Matt Hancher, Mike Dixon, Simon Ilyushchenko, David Thau, and Rebecca Moore. 2017. “Google Earth Engine: Planetary-Scale Geospatial Analysis for Everyone.” Remote Sensing of Environment 202: 18–27. https://doi.org/10.1016/j.rse.2017.06.031.\n\n\nHersbach, Hans, Bill Bell, Paul Berrisford, Shoji Hirahara, András Horányi, Joaquín Muñoz-Sabater, Julien Nicolas, et al. 2020. “The Era5 Global Reanalysis.” Quarterly Journal of the Royal Meteorological Society 146 (730): 1999–2049. https://doi.org/https://doi.org/10.1002/qj.3803.\n\n\nHufkens, Koen. 2020. Ecmwfr: Interface to ECMWF and CDS Data Web Services. https://github.com/bluegreen-labs/ecmwfr.\n\n\nRaoult, Baudouin, Cedric Bergeron, Angel López Alós, Jean-Noël Thépaut, and Dick Dee. 2017. “Climate Service Develops User-Friendly Data Store.” ECMWF Newsletter 151: 22–27.\n\n\nSchramm, Matthias, Edzer Pebesma, Milutin Milenković, Luca Foresta, Jeroen Dries, Alexander Jacob, Wolfgang Wagner, et al. 2021. “The openEO API–Harmonising the Use of Earth Observation Cloud Services Using Virtual Data Cube Functionalities.” Remote Sensing 13 (6). https://doi.org/10.3390/rs13061125."
  },
  {
    "objectID": "09-Plotting.html",
    "href": "09-Plotting.html",
    "title": "9  Plotting spatial data",
    "section": "",
    "text": "Together with timelines, maps belong to the most powerful graphs, perhaps because we can immediately relate where we are, or have been, on the space of the plot. Two recent books on visualisation (Healy 2018; Wilke 2019) contain chapters on visualising geospatial data or maps. Here, we will not try to preach the do’s and don’ts of maps, but rather point out a number of possibilities how to do things, point out challenges along the way and ways to mitigate them."
  },
  {
    "objectID": "09-Plotting.html#sec-transform",
    "href": "09-Plotting.html#sec-transform",
    "title": "9  Plotting spatial data",
    "section": "9.1 Every plot is a projection",
    "text": "9.1 Every plot is a projection\nThe world is round, but plotting devices are flat. As mentioned in Section 2.2.2, any time we visualise, in any way, the world on a flat device, we project: we convert ellipsoidal coordinates into Cartesian coordinates. This includes the cases where we think we “do nothing” (Figure 9.1), left , or where we show the world “as it is”, e.g. as seen from space (Figure 9.1, right).\n\nlibrary(sf)\nlibrary(rnaturalearth)\nw <- ne_countries(scale = \"medium\", returnclass = \"sf\")\nsuppressWarnings(st_crs(w) <- st_crs('OGC:CRS84'))\nlayout(matrix(1:2, 1, 2), c(2,1))\npar(mar = rep(0, 4))\nplot(st_geometry(w))\n\n# sphere:\nlibrary(s2)\ng <- as_s2_geography(TRUE) # Earth\nco <- s2_data_countries()\noc <- s2_difference(g, s2_union_agg(co)) # oceans\nb <- s2_buffer_cells(as_s2_geography(\"POINT(-30 -10)\"), 9800000) # visible half\ni <- s2_intersection(b, oc) # visible ocean\nco <- s2_intersection(b, co)\nplot(st_transform(st_as_sfc(i), \"+proj=ortho +lat_0=-10 +lon_0=-30\"), col = 'lightblue')\nplot(st_transform(st_as_sfc(co), \"+proj=ortho +lat_0=-10 +lon_0=-30\"), col = NA, add = TRUE)\n\n\n\n\nFigure 9.1: Earth country boundaries; left: mapping long/lat linearly to \\(x\\) and \\(y\\) (plate carrée); right: as seen from infinite distance (orthographic)\n\n\n\n\nThe left plot of Figure 9.1 was obtained by\n\nlibrary(sf)\nlibrary(rnaturalearth)\nw <- ne_countries(scale = \"medium\", returnclass = \"sf\")\nplot(st_geometry(w))\n\nand we see that this is the default projection for data with ellipsoidal coordinates, as indicated by\n\nst_is_longlat(w)\n# [1] TRUE\n\nThe projection taken in Figure 9.1) (left is the equirectangular (or equidistant cylindrical) projection, which maps longitude and latitude linearly to the \\(x\\) and \\(y\\) axis, keeping an aspect ratio of 1. Were we to do this for smaller areas not on the equator, it makes sense to choose a plot ratio such that one distance unit E-W equals one distance unit N-S on the center of the plotted area, and this is the default behaviour of the plot() method for unprojected sf or stars datasets, as well as the default for ggplot2::geom_sf() (Section 9.4).\nWe can also carry out this projection before plotting. Say we want to plot Germany, then after loading the (rough) country outline, we use st_transform to project:\n\nDE <- st_geometry(ne_countries(country = \"germany\",\n                              returnclass = \"sf\"))\nDE.eqc <- st_transform(DE, \"+proj=eqc +lat_ts=51.14 +lon_0=90w\")\n\nThe eqc refers to the “equidistant cylindrical” projection of PROJ; the projection parameter here is lat_ts, the latitude of true scale (i.e., one length unit N-S equals one length unit E-W), which was here chosen as the middle of the bounding box latitudes\n\nprint(mean(st_bbox(DE)[c(\"ymin\", \"ymax\")]), digits = 4)\n# [1] 51.14\n\nWhen we now plot both maps (Figure 9.2) , they look identical up to the values along the axes: degrees for ellipsoidal (left), and metres for projected (Cartesian) coordinates.\n\npar(mfrow = c(1, 2))\nplot(DE, axes = TRUE)\nplot(DE.eqc, axes = TRUE)\n\n\n\n\nFigure 9.2: Germany in equirectangular projection: with axis units degrees (left) and metres in the equidistant cylindrical projection (right)\n\n\n\n\n\nWhat is a good projection for my data?\nThere is unfortunately no silver bullet here. Projections that maintain all distances do not exist; only globes do. The most used projections try to preserve:\n\nareas (equal area)\ndirections (conformal, e.g. Mercator)\nsome properties of distances (e.g. equirectangular preserves distances along meridians, azimuthal equidistant preserves distances to a central point)\n\nor some compromise of these. Parameters of projections decide what is shown in the center of a map and what on the fringes, which areas are up and which are down, and which areas are most enlarged. All these choices are in the end political decisions.\nIt is often entertaining and at times educational to play around with the different projections and understand their consequences. When the primary purpose of the map however is not to entertain or educate projection varieties, it may be preferable to choose a well-known or less surprising projection, and move the discussion which projection should be preferred to a decision process on its own."
  },
  {
    "objectID": "09-Plotting.html#plotting-points-lines-polygons-grid-cells",
    "href": "09-Plotting.html#plotting-points-lines-polygons-grid-cells",
    "title": "9  Plotting spatial data",
    "section": "9.2 Plotting points, lines, polygons, grid cells",
    "text": "9.2 Plotting points, lines, polygons, grid cells\nSince maps are just a special form of plots of statistical data, the usual rules hold. Frequently occurring challenges include:\n\npolygons may be very small, and vanish when plotted\ndepending on the data, polygons for different features may well overlap, and be visible only partially; using transparent fill colours may help identify them\nwhen points are plotted with symbols, they may easily overlap and be hidden; density maps (Chapter 11) may be more helpful\nlines may be hard to read when coloured and may overlap regardless line width\n\n\nColors\nWhen plotting polygons filled with colours, one has the choice to plot polygon boundaries, or to suppress these. If polygon boundaries draw too much attention, an alternative is to colour them in a grey tone, or another colour that doesn’t interfere with the fill colours. When suppressing boundaries entirely, polygons with (nearly) identical colours will no longer be visually distinguishable. If the property indicating the fill colour is constant over the region, such as land cover type, then this is not a problem but if the property is an aggregation, the region over which it was aggregated gets lost, and by that the proper interpretation: especially for extensive variables, e.g. the amount of people living in a polygon, this strongly misleads. But even with polygon boundaries, using filled polygons for such variables may not be a good idea.\nThe use of continuous colour scales that have no noticeable colour breaks for continuously varying variables may look attractive, but is often more fancy than useful:\n\nit impracticable to match a colour on the map with a legend value\ncolours ramps often stretch non-linearly over the value range, making it hard to convey magnitude\n\nOnly for cases where the identification of values is less important than the continuity of the map, such as the colouring of a high resolution digital terrain model, it does serve its goal. Good colours scales and palettes are e.g. found in functions hcl.colors or palette.colors, and in packages RColorBrewer (Neuwirth 2022), viridis (Garnier 2021) or colorspace (Ihaka et al. 2022; Zeileis et al. 2020).\n\n\nColor breaks: classInt\nWhen plotting continuous geometry attributes using a limited set of colours (or symbols), classes need to be made from the data. R package classInt (Bivand 2022) provides a number of methods to do so. The default method is “quantile”:\n\nlibrary(classInt)\n# set.seed(1) needed ?\nr <- rnorm(100)\n(cI <- classIntervals(r))\n# style: quantile\n#   one of 1.49e+10 possible partitions of this variable into 8 classes\n#    [-4.54,-1.18)   [-1.18,-0.737)  [-0.737,-0.337) \n#               13               12               13 \n# [-0.337,-0.0583)  [-0.0583,0.345)    [0.345,0.583) \n#               12               12               13 \n#    [0.583,0.981)     [0.981,2.08] \n#               12               13\ncI$brks\n# [1] -4.5383 -1.1810 -0.7374 -0.3373 -0.0583  0.3450  0.5829\n# [8]  0.9807  2.0836\n\nit takes argument n for the number of intervals, and a style that can be one of “fixed”, “sd”, “equal”, “pretty”, “quantile”, “kmeans”, “hclust”, “bclust”, “fisher” or “jenks”. Style “pretty” may not obey n; if n is missing, ‘nclass.Sturges’ is used; two other methods are available for choosing n automatically. If the number of observations is greater than 3000, a 10% sample is used to create the breaks for “fisher” and “jenks”.\n\n\nGraticule and other navigation aids\nA graticule is a network of lines on a map that follow constant latitude or longitude. On Figure 1.1 a graticule is drawn in grey, on Figure 1.2 in white. Graticules are often drawn in maps to give reference where something is. In our first map in Figure 1.1 we can read that the area plotted is near 35\\(^o\\) North and 80\\(^o\\) West. Had we plotted the lines in the projected coordinate system, they would have been straight and their actual numbers would not have been very informative, apart from giving an interpretation of size or distances when the unit is known, and familiar to the map reader. Graticules, by that, also shed light on which projection was used: equirectangular or Mercator projections have straight vertical and horizontal lines, conic projections have straight but diverging meridians, equal area may have curved meridians.\nThe real navigation aid on Figure 9.1 and most other maps are geographical features like the state outline, country outlines, coast lines, rivers, roads, railways and so on. If these are added sparsely and sufficiently, a graticule can as well be omitted. In such cases, maps look good without axes, tics, and labels, leaving up a lot of plotting space to be filled with actual map data."
  },
  {
    "objectID": "09-Plotting.html#base-plot",
    "href": "09-Plotting.html#base-plot",
    "title": "9  Plotting spatial data",
    "section": "9.3 Base plot",
    "text": "9.3 Base plot\nThe plot method for sf and stars objects try to make quick, useful, exploratory plots; for higher quality plots and more configurability, alternatives with more control and/or better defaults are offered for instance by packages ggplot2 (Wickham et al. 2022), tmap (Tennekes 2022, 2018) or mapsf (Giraud 2022).\nBy default, the plot method tries to plot “all” it is given. This means that:\n\ngiven a geometry only (sfc), the geometry is plotted, without colours\ngiven a geometry and an attribute, the geometry is coloured according to the values of the attribute, using a qualitative colour scale for factor or logical attributes and a continuous scale otherwise\ngiven multiple attributes, multiple maps are plotted, each with a colour scale but a legend is omitted by default, as colour assignment is done on a per sub-map basis\nfor stars objects with multiple attributes, only the first attribute is plotted; for three-dimensional raster cubes, all slices over the third dimension are plotted\n\n\nAdding to plots with legends\nThe plot methods for stars and sf objects may show a colour key on one of the sides (e.g., Figure 1.1) . To do this with base::plot, the plot region is split in two and two plots are created: one with the map, and one with the legend. By default, the plot function resets the graphics device (using layout(matrix(1)) so that subsequent plots are not hindered by the device being split in two. If one wants to add to an existing plot having a coulor legend, this is however what is needed, and resetting the plotting device needs to be prevented by setting argument reset = FALSE, and use add = TRUE in a subsequent call to plot, an example is\n\nlibrary(sf)\nnc <- read_sf(system.file(\"gpkg/nc.gpkg\", package = \"sf\"))\nplot(nc[\"BIR74\"], reset = FALSE, key.pos = 4)\nplot(st_buffer(nc[1,1], units::set_units(10, km)), col = 'NA', \n     border = 'red', lwd = 2, add = TRUE)\n\n\n\n\nFigure 9.3: Annotating base plots that have a legend\n\n\n\n\nwhich is shown in Figure 9.3 . Annotating stars plots can be done in the same way when a single stars layer is shown. Annotating stars plots with multiple cube slices can be done by adding a “hook” function that will be called on every slice shown, as in\n\nlibrary(stars)\nr <- read_stars(system.file(\"tif/L7_ETMs.tif\", package = \"stars\"))\ncirc <- st_bbox(r) |> st_as_sfc() |> st_sample(5) |> st_buffer(300)\nhook <- function() plot(circ, col = NA, border = 'yellow', \n                       add = TRUE)\nplot(r, hook = hook, key.pos = 4)\n\n\n\n\nFigure 9.4: annotated multi-slice stars plot\n\n\n\n\nand as shown in Figure 9.4 .\nBase plot methods have access to the resolution of the screen device and hence the base plot method for stars and stars_proxy object will downsample dense rasters and only plot pixels at a density that makes sense for the device available.\n\n\nProjections in base plots\nThe base plot method plots data with ellipsoidal coordinates using the equirectangular projection, using a latitude parameter equal to the middle latitude of the data bounding box (Figure 9.2). To control this parameter, either a projection to another equirectangular can be applied before plotting, or the parameter asp can be set to override, e.g. asp=1 would lead to plate carrée (Figure 9.1) left . Subsequent plots need to be in the same coordinate reference system in order to make sense with overplotting, this is not being checked.\n\n\nColors and coulor breaks\nIn base plots, nbreaks can be used to set the number of coulor breaks, and breaks either to the numeric vector with actual breaks, or to a value for the style argument in classInt::classIntervals."
  },
  {
    "objectID": "09-Plotting.html#sec-geomsf",
    "href": "09-Plotting.html#sec-geomsf",
    "title": "9  Plotting spatial data",
    "section": "9.4 Maps with ggplot2",
    "text": "9.4 Maps with ggplot2\nPackage ggplot2 (Wickham et al. 2022; Wickham 2016) can create more complex an nicer looking graphs; it has a geometry geom_sf that was developed in conjunction with the development of sf, and helps creating beautiful maps; an introduction to this is found in Moreno and Basille (2018), a first example is shown in Figure 1.2 . The code used for this plot is:\n\nsuppressPackageStartupMessages(library(tidyverse))\nnc.32119 <- st_transform(nc, 32119) \nyear_labels <- c(\"SID74\" = \"1974 - 1978\", \"SID79\" = \"1979 - 1984\")\nnc.32119 |> select(SID74, SID79) |> \n    pivot_longer(starts_with(\"SID\")) -> nc_longer\n\n\nggplot() + geom_sf(data = nc_longer, aes(fill = value)) + \n  facet_wrap(~ name, ncol = 1, \n             labeller = labeller(name = year_labels)) +\n  scale_y_continuous(breaks = 34:36) +\n  scale_fill_gradientn(colours = sf.colors(20)) +\n  theme(panel.grid.major = element_line(colour = \"white\"))\n\nwhere we see that two attributes had to be stacked (pivot_longer) before plotting them as facets: this is the idea of “tidy” data, and the pivot_longer method for sf objects automatically stacks the geometry column too.\nBecause ggplot2 creates graphics objects before plotting them, it can control the coordinate reference system of all elements involved, and will transform or convert all subsequent objects to the coordinate reference system of the first. It will also draw a graticule for the (default) thin white lines on a grey background, and uses a datum (by default: WGS84) for this. geom_sf() can be combined with other geoms, for instance to allow for annotating plots.\nFor package stars, a geom_stars has, at the moment of writing this, rather limited scope: it uses geom_sf for map layout and vector data cubes, and adds geom_raster for regular rasters and geom_rect for rectilinear rasters. It downsamples if the user specifies a downsampling rate, but has no access to the screen dimensions to automatically choose a downsampling rate. This may be just enough, for instance figure Figure 9.5 is created by the following commands:\n\nlibrary(ggplot2)\nlibrary(stars)\nr <- read_stars(system.file(\"tif/L7_ETMs.tif\", package = \"stars\"))\nggplot() + geom_stars(data = r) +\n        facet_wrap(~band) + coord_equal() +\n        theme_void() +\n        scale_x_discrete(expand = c(0,0)) + \n        scale_y_discrete(expand = c(0,0)) +\n        scale_fill_viridis_c()\n\n\n\n\nFigure 9.5: Simple raster plot with ggplot2\n\n\n\n\nMore elaborate ggplot2-based plots with stars objects may be obtained using package ggspatial (Dunnington 2022). Non-compatible but nevertheless ggplot2-style plots can be created with tmap, a package dedicated to creating high quality maps.\nWhen combining several feature sets with varying coordinate reference systems, using geom_sf, all sets are transformed to the reference system of the first set. To get further control over the “base” coordinate reference system, coord_sf can be used. This allows for instance working in a projected system, while combining graphics elements that are not sf objects but regular data.frames with ellipsoidal coordinates associated to WGS84. A twitter thread by Claus Wilke illustrating this is found here."
  },
  {
    "objectID": "09-Plotting.html#sec-tmap",
    "href": "09-Plotting.html#sec-tmap",
    "title": "9  Plotting spatial data",
    "section": "9.5 Maps with tmap",
    "text": "9.5 Maps with tmap\nPackage tmap (Tennekes 2022, 2018) takes a fresh look on plotting spatial data in R; it resembles ggplot2 in the sense that it composes graphics objects before printing, by building on the grid package, and by concatenating map elements with a + between them, but otherwise it is entirely independent from, and incompatible with, ggplot2. It has a number of options that allow for highly professional looking maps, and many defaults have been carefully chosen. To recreate Figure 1.2 , for instance, we use\n\n\n\n\n\nFigure 9.6: tmap: using tm_polygons() with two attribute names\n\n\n\n\nto recreate Figure 9.6 and\n\nnc_longer <- nc.32119 |> select(SID74, SID79) |> \n    pivot_longer(starts_with(\"SID\"), values_to = \"SID\")\ntm_shape(nc_longer) + tm_polygons(\"SID\") + tm_facets(by = \"name\")\n\n\n\n\n\n\nFigure 9.7: tmap: using tm_facets() on a long table\n\n\n\n\nto create Figure 9.7 .\nPackage tmap also has support for stars objects, an example created with\n\ntm_shape(r) + tm_raster()\n\n\n\n\n\n\nFigure 9.8: simple raster plot with tmap\n\n\n\n\nis shown in Figure 9.8. More examples of the use of tmap are given in Chapter 14."
  },
  {
    "objectID": "09-Plotting.html#interactive-maps-leaflet-mapview-tmap",
    "href": "09-Plotting.html#interactive-maps-leaflet-mapview-tmap",
    "title": "9  Plotting spatial data",
    "section": "9.6 Interactive maps: leaflet, mapview, tmap",
    "text": "9.6 Interactive maps: leaflet, mapview, tmap\nInteractive maps as shown in Figure 1.3 can be created with R packages leaflet, mapview or tmap. mapview adds a number of capabilities to leaflet including a map legend, configurable pop-up windows when clicking features, support for raster data, and scalable maps with very large feature sets using the FlatGeobuf file format, as well as facet maps that react synchronously to zoom and pan actions. Package tmap has the nice option that after giving\n\ntmap_mode(\"view\")\n\nall usual tmap commands are applied to an interactive html/leaflet widget, whereas after\n\ntmap_mode(\"plot\")\n\nagain all output is sent to R own static graphics device."
  },
  {
    "objectID": "09-Plotting.html#exercises",
    "href": "09-Plotting.html#exercises",
    "title": "9  Plotting spatial data",
    "section": "9.7 Exercises",
    "text": "9.7 Exercises\n\nFor the countries Indonesia and Canada, create individual plots using equirectangular, orthographic, and Lambert equal area projections, while choosing projection parameters sensible for the area.\nRecreate the plot in Figure 9.3 with ggplot2 and with tmap.\nRecreate the plot in Figure 9.8 using the viridis colour ramp.\nView the interactive plot in Figure 9.8 using the “view” (interactive) mode of tmap, and explore which interactions are possible; also explore adding + tm_facets(as.layers=TRUE) and try switching layers on and off.\n\n\n\n\n\nBivand, Roger. 2022. classInt: Choose Univariate Class Intervals. https://CRAN.R-project.org/package=classInt.\n\n\nDunnington, Dewey. 2022. Ggspatial: Spatial Data Framework for Ggplot2. https://CRAN.R-project.org/package=ggspatial.\n\n\nGarnier, Simon. 2021. Viridis: Colorblind-Friendly Color Maps for r. https://CRAN.R-project.org/package=viridis.\n\n\nGiraud, Timothée. 2022. Mapsf: Thematic Cartography. https://CRAN.R-project.org/package=mapsf.\n\n\nHealy, Kieran. 2018. Data Visualization, a Practical Introduction. Princeton University Press. http://socviz.co/index.html.\n\n\nIhaka, Ross, Paul Murrell, Kurt Hornik, Jason C. Fisher, Reto Stauffer, Claus O. Wilke, Claire D. McWhite, and Achim Zeileis. 2022. Colorspace: A Toolbox for Manipulating and Assessing Colors and Palettes. https://CRAN.R-project.org/package=colorspace.\n\n\nMoreno, Mel, and Mathieu Basille. 2018. Drawing Beautiful Maps Programmatically with r, Sf and Ggplot2 — Part 1: Basics. https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html.\n\n\nNeuwirth, Erich. 2022. RColorBrewer: ColorBrewer Palettes. https://CRAN.R-project.org/package=RColorBrewer.\n\n\nTennekes, Martijn. 2018. “tmap: Thematic Maps in R.” Journal of Statistical Software 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\n———. 2022. Tmap: Thematic Maps. https://github.com/r-tmap/tmap.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWilke, Claus O. 2019. Fundamentals of Data Visualization. O’Reilly Media, Inc. https://serialmentor.com/dataviz/.\n\n\nZeileis, Achim, Jason C. Fisher, Kurt Hornik, Ross Ihaka, Claire D. McWhite, Paul Murrell, Reto Stauffer, and Claus O. Wilke. 2020. “colorspace: A Toolbox for Manipulating and Assessing Colors and Palettes.” Journal of Statistical Software 96 (1): 1–49. https://doi.org/10.18637/jss.v096.i01."
  },
  {
    "objectID": "10-part-3.html",
    "href": "10-part-3.html",
    "title": "Models for Spatial Data",
    "section": "",
    "text": "Part three of this book …"
  },
  {
    "objectID": "10-Models.html",
    "href": "10-Models.html",
    "title": "10  Statistical modelling of spatial data",
    "section": "",
    "text": "Spatial data almost always (and everywhere) has the property that it is spatially structured: observations done close by in space tend to be more similar than observations done at larger distance from each other. This phenomenon, in the geography domain attributed to Waldo Tobler (as in “Waldo Tobler’s first law of geography”) was already noted by Fisher et al. (1937) and was a motivation for developing randomized block design in agricultural experiments: allocating treatments randomly to blocks avoids that spatial structure gets mixed up (or: confounds) with a signal caused by the treatment.\nThe often heard argument that spatially structured data means that the data is spatially correlated, which would exclude estimation methods that assume independent observations is false. Correlation is a property of two random variables, and there are different ways in which spatial data can be approached with random variables: either the observation locations are random (leading to design-based inference) or the observed values are random (leading to model-based inference). The next section points out the difference between these two."
  },
  {
    "objectID": "10-Models.html#sec-design",
    "href": "10-Models.html#sec-design",
    "title": "10  Statistical modelling of spatial data",
    "section": "10.1 Design-based and model-based inference",
    "text": "10.1 Design-based and model-based inference\nStatistical inference means the action of estimating parameters about a population from sample data. Suppose we denote the variable of interest with \\(z(s)\\), where \\(z\\) is the attribute value measured at location \\(s\\), and we are interested in estimating the mean value of \\(z(s)\\) over a domain \\(D\\),\n\\[z(s)=\\frac{1}{|D|} \\int_{ u \\in D} z(u)du,\\]\nwith \\(|D|\\) the area of \\(D\\), from sample data \\(z(s_1),...,z(s_n)\\).\nThen, there are two possibilities to proceed: model-based, or design-based. A model-based approach considers \\(z(s)\\) to be a realisation of a superpopulation \\(Z(s)\\) (using capital letters to indicate random variables), and could for instance postulate a model for its spatial variability in the form of\n\\[Z(s) = m + e(s), \\  \\ \\mbox{E}(e(s)) = 0, \\  \\ \\mbox{Cov(e(s))} = \\Sigma(\\theta)\\]\nwith \\(m\\) a constant mean and \\(e(s)\\) a residual with mean zero and covariance matrix \\(\\Sigma(\\theta)\\). This would require choosing the covariance function \\(\\Sigma()\\) and estimating its parameters \\(\\theta\\) form \\(z(s)\\), and then computing a block kriging prediction \\(\\hat{Z}(D)\\) (Section 12.5). This approach makes no assumptions about how \\(z(s)\\) was sampled spatially, but of course it should allow for choosing the covariance function and estimating its parameters; inference is conditional to the validity of the postulated model.\nRather than assuming a superpopulation model, the design-based approach (JJ De Gruijter and Ter Braak 1990; Brus 2021a; Breidt, Opsomer, et al. 2017) assumes randomness in the locations, which is justified (only) when using random sampling. It requires that the sample data were obtained by probability sampling, meaning that some form of spatial random sampling was used where all elements of \\(z(s)\\) had a known and positive probability of being included in the sample obtained. The random process is that of sampling: \\(z(s_1)\\) is a realisation of the random process \\(z(S_1)\\), the first observation taken over repeated random sampling. Design-based estimaters only need these inclusion probabilities to estimate mean values with standard errors. This means that for instance given a simple random sample, the unweighted sample mean is used to estimate the population mean, and no model parameters need to be fit.\nThe misconception here, as explained in Brus (2021a), is that this is only the case when working under model-based approaches: \\(Z(s_1)\\) and \\(Z(s_2)\\) may well be correlated (“model-dependent”), but although in a particular random sampling (realisation) \\(z(s_1)\\) and \\(z(s_2)\\) may be close in space, the corresponding random variables \\(z(S_1)\\) and \\(z(S_2)\\) considered over repeated random sampling are not close together, and are design-independent. Both situations can co-exist without contradiction, and are a consequence of choosing to work under one inference framework or the other.\nThe choice whether to work under a design-based or model-based framework depends on the purpose of the study and the data collection process. The model-based framework lends itself best for cases:\n\nwhere predictions are required for individual locations, or for areas too small to be sampled\nwhen the available data were not collected using a known random sampling scheme (i.e., the inclusion probabilities are unknown, or are zero over particular areas or/and times)\n\nDesign-based approaches are most suitable when:\n\nobservations were collected using a spatial random sampling process\naggregated properties of the entire sample region (or sub-region) are needed\nestimates are required that are not sensitive to potential model misspecification, e.g. when needed for regulatory or legal purposes\n\nIn case a sampling procedure is to be planned (Jaap De Gruijter et al. 2006), some form of spatial random sampling is definitely worth considering since it opens up the possibility of following both inference frameworks."
  },
  {
    "objectID": "10-Models.html#predictive-models-with-coordinates",
    "href": "10-Models.html#predictive-models-with-coordinates",
    "title": "10  Statistical modelling of spatial data",
    "section": "10.2 Predictive models with coordinates",
    "text": "10.2 Predictive models with coordinates\nIn data science projects, coordinates may be seen as features in a larger set of predictors (or features, or covariates) and treated accordingly. There are some catches with doing so.\nAs usual when working with predictors, it is good to choose predictive methods that are not sensitive to shifts in origin or shifts in unit (scale). Assuming a two-dimensional problem, predictive models should also not be sensitive to arbitrary rotations of the x- and y- or latitude and longitude axes. For projected (2D, Cartesian) coordinates this can be assured e.g. by using polynomials of order \\(n\\) as \\((x+y)^n\\), rather than \\((x)^n + (y)^n\\); for a second order polynomial this involves including the term \\(xy\\), so that an ellipsoidal-shape trend surface does not have to be aligned with the \\(x-\\) or \\(y-\\)axis. For a GAM model with spline components, one would use a spline in two dimensions rather than two independent splines in \\(x\\) and \\(y\\). An exception to this “rule” is when e.g. a pure latitude effect is desired, for instance to account for solar energy influx.\nWhen the area covered by the data is large, the difference between using ellipsoidal coordinates and projected coordinates will automatically become larger, and hence choosing one of both will have an effect on predictive modelling. For very large extents, e.g. global models, polynomials or splines in latitude and longitude will not make sense as they ignore the circular nature of longitude and the coordinate singularities at the poles. Here, spherical harmonics, base functions that are continuous on the sphere with increasing spatial frequencies can replace polynomials or be used as spline base functions.\nIn many cases, the spatial coordinates over which samples were collected also define the space over which predictions are made, setting them apart from other features. Many simple predictive approaches, including most machine learning methods, assume sample data to be independent. When samples are collected by spatially random sampling over the spatial target area, this assumption may be justified when working under a design-based context (Brus 2021b). This context however treats the coordinate space as the variable over which we randomize, which affords predicting values for a new randomly chosen location but rules out making predictions for fixed locations; this implies that averages over areas over which samples were collected can be obtained, but not spatial interpolations. In case predictions for fixed locations are required, or in case data were not collected by spatial random sampling, a model-based approach (as taken in Chapter 12) is needed and typically some form of spatial and/or temporal autocorrelation of residuals must be assumed.\nA common case is where sample data are collected opportunistically (“whatever could be found”), and are then used in a predictive framework that does not weigh them. This has a consequence that the resulting model may be biased towards over-represented areas (in predictor space and/or in spatial coordinates space), and that simple (random) cross validation statistics may be over-optimistic when taken as performance measures for spatial prediction (Meyer and Pebesma 2020). Adaptive cross validation measures, e.g. spatial cross validation may help getting more relevant measures for predictive performance."
  },
  {
    "objectID": "10-Models.html#further-reading",
    "href": "10-Models.html#further-reading",
    "title": "10  Statistical modelling of spatial data",
    "section": "10.3 Further reading",
    "text": "10.3 Further reading\nThere is a large number of papers and books available on analysing and statistical modelling of spatial and spatiotemporal data, and a very large number of R packages help doing so. Several CRAN task views try to maintain an overview of the R packages, e.g. on:\n\nspatial data (Bivand 2021)\nspatiotemporal data (Pebesma 2021)\ntracking data (Joo et al. 2021), see also (Joo et al. 2020)\n\nThe introductions to subsequent chapters contain more pointers to relevant literature references. Introductions to using the integrated nested Laplace approximation (INLA) for analysing spatial data are given in Blangiardo et al. (2013), Blangiardo and Cameletti (2015), and Gómez-Rubio (2020). Krainski et al. (2018) combine the INLA approach with stochastic partial differential equations. Spatiotemporal Bayesian modelling of change of support problems is presented in A. M. Raim et al. (2021) and Andrew M. Raim et al. (2020).\n\n\n\n\nBivand, Roger. 2021. CRAN Task View: Analysis of Spatial Data. https://cran.r-project.org/web/views/Spatial.html.\n\n\nBlangiardo, Marta, and Michela Cameletti. 2015. Spatial and Spatio-Temporal Bayesian Models with r-INLA. John Wiley & Sons.\n\n\nBlangiardo, Marta, Michela Cameletti, Gianluca Baio, and Håvard Rue. 2013. “Spatial and Spatio-Temporal Models with r-INLA.” Spatial and Spatio-Temporal Epidemiology 4: 33–49. https://doi.org/https://doi.org/10.1016/j.sste.2012.12.001.\n\n\nBreidt, F Jay, Jean D Opsomer, et al. 2017. “Model-Assisted Survey Estimation with Modern Prediction Techniques.” Statistical Science 32 (2): 190–205.\n\n\nBrus, Dick J. 2021a. “Statistical Approaches for Spatial Sample Survey: Persistent Misconceptions and New Developments.” European Journal of Soil Science 72 (2): 686–703. https://doi.org/https://doi.org/10.1111/ejss.12988.\n\n\n———. 2021b. “Statistical Approaches for Spatial Sample Survey: Persistent Misconceptions and New Developments.” European Journal of Soil Science 72 (2): 686–703. https://doi.org/https://doi.org/10.1111/ejss.12988.\n\n\nDe Gruijter, Jaap, Dick J Brus, Marc FP Bierkens, and Martin Knotters. 2006. Sampling for Natural Resource Monitoring. Springer Science & Business Media.\n\n\nDe Gruijter, JJ, and CJF Ter Braak. 1990. “Model-Free Estimation from Spatial Samples: A Reappraisal of Classical Sampling Theory.” Mathematical Geology 22 (4): 407–15.\n\n\nFisher, Ronald Aylmer et al. 1937. The Design of Experiments. The Design of Experiments. 2nd Ed. Oliver & Boyd, Edinburgh & London.\n\n\nGómez-Rubio, Virgilio. 2020. Bayesian Inference with INLA. CRC Press.\n\n\nJoo, Rocío, Matthew E. Boone, Thomas A. Clay, Samantha C. Patrick, Susana Clusella-Trullas, and Mathieu Basille. 2020. “Navigating Through the R Packages for Movement.” Journal of Animal Ecology 89 (1): 248–67. https://doi.org/https://doi.org/10.1111/1365-2656.13116.\n\n\nJoo, Rocío, Matthew E. Boone, Michael Sumner, and Mathieu Basille. 2021. CRAN Task View: Processing and Analysis of Tracking Data. https://cran.r-project.org/web/views/SpatioTemporal.html.\n\n\nKrainski, Elias T, Virgilio Gómez-Rubio, Haakon Bakka, Amanda Lenzi, Daniela Castro-Camilo, Daniel Simpson, Finn Lindgren, and Håvard Rue. 2018. Advanced Spatial Modeling with Stochastic Partial Differential Equations Using r and INLA. CRC Press.\n\n\nMeyer, Hanna, and Edzer Pebesma. 2020. “Predicting into Unknown Space? Estimating the Area of Applicability of Spatial Prediction Models.” https://arxiv.org/abs/2005.07939.\n\n\nPebesma, Edzer. 2021. CRAN Task View: Handling and Analyzing Spatio-Temporal Data. https://cran.r-project.org/web/views/SpatioTemporal.html.\n\n\nRaim, A. M., S. H. Holan, J. R. Bradley, and C. K. Wikle. 2021. “Spatio-Temporal Change of Support Modeling with r.” Computational Statistics 36: 749–80. https://doi.org/https://doi.org/10.1007/s00180-020-01029-4 .\n\n\nRaim, Andrew M., Scott H. Holan, Jonathan R. Bradley, and Christopher K. Wikle. 2020. Stcos: Space-Time Change of Support. https://github.com/holans/ST-COS."
  },
  {
    "objectID": "13-PointPattern.html",
    "href": "13-PointPattern.html",
    "title": "11  Point Pattern Analysis",
    "section": "",
    "text": "Point pattern analysis is concerned with describing patterns of points over space, and making inference about the process that could have generated an observed pattern. The main focus here lies on the information carried in the locations of the points, and typically these locations are not controlled by sampling but a result of a process we’re interested in, such as animal sightings, accidents, disease cases, or tree locations. This is opposed to geostatistical processes (Chapter 12) where we have values of some phenomenon everywhere but observations limited to a set of locations that we can control, at least in principle. Hence, in geostatistical problems the prime interest is not in the observation locations but in estimating the value of the observed phenomenon at unobserved locations. Point pattern analysis typically assumes that for an observed area, all points are available, meaning that locations without a point are not unobserved as in a geostatistical process, but are observed and contain no point. In terms of random processes, in point processes locations are random variables, where in geostatistical processes the measured variable is a random field with locations fixed.\nThis chapter is confined to describing the very basics of point pattern analysis, using package spatstat (Baddeley, Turner, and Rubak 2022), and related packages by the same authors. The spatstat book of Baddeley, Rubak, and Turner (2015) gives a comprehensive introduction to point pattern theory and the use of the spatstat package family, which we will not try to copy. Inclusion of particular topics in this chapter should not be seen as an expression that these are more relevant than others. In particular, this chapter tries to illustrate interfaces existing between spatstat and the more spatial data science oriented packages sf and stars. A further book that introduces point patterns analysis is Stoyan et al. (2017). An R package for analysing spatiotemporal point processes is discussed in Gabriel, Rowlingson, and Diggle (2013).\nImportant concepts of point patterns analysis are the distinction between a point pattern and a point process: the latter is the stochastic process that, when sampled, generates a point pattern. A data set is always a point pattern, and inference involves figuring out what kind of process could have generated a pattern like the one we observed. Properties of a spatial point process are:"
  },
  {
    "objectID": "13-PointPattern.html#observation-window",
    "href": "13-PointPattern.html#observation-window",
    "title": "11  Point Pattern Analysis",
    "section": "11.1 Observation window",
    "text": "11.1 Observation window\nPoint patterns have an observation window. Consider the points generated randomly by\n\nlibrary(sf)\n# Linking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.0; sf_use_s2() is TRUE\nn <- 30\nset.seed(13531) # remove this to create another random sequence\nxy <- data.frame(x = runif(n), y = runif(n)) |> \n    st_as_sf(coords = c(\"x\", \"y\"))\n\nthen these points are (by construction) uniformly distributed, or completely spatially random, over the domain \\([0,1] \\times [0,1]\\). For a larger domain, they are not uniform, for the two square windows w1 and w2 created by\n\nw1 <- st_bbox(c(xmin = 0, ymin = 0, xmax = 1, ymax = 1)) |> \n        st_as_sfc() \nw2 <- st_sfc(st_point(c(1, 0.5))) |> st_buffer(1.2)\n\nthis is shown in Figure 11.1 .\n\npar(mfrow = c(1, 2), mar = c(2.1, 2.1, 0.1, 0.5), xaxs = \"i\", yaxs = \"i\")\nplot(w1, axes = TRUE, col = 'grey')\nplot(xy, add = TRUE)\nplot(w2, axes = TRUE, col = 'grey')\nplot(xy, add = TRUE, cex = .5)\n\n\n\n\nFigure 11.1: Depending on the observation window (grey), the same point pattern can appear completely spatially random (left), or clustered (right)\n\n\n\n\nPoint patterns in spatstat are objects of class ppp that contain points and an observation window (an object of class owin). We can create a ppp from points by\n\nsuppressPackageStartupMessages(library(spatstat))\nas.ppp(xy)\n# Planar point pattern: 30 points\n# window: rectangle = [0.009, 0.999] x [0.103, 0.996] units\n\nwhere we see that the bounding box of the points is used as observation window when no window is specified. If we add a polygonal geometry as the first feature of the dataset, then this is used as observation window:\n\n(pp1 <- c(w1, st_geometry(xy)) |> as.ppp())\n# Planar point pattern: 30 points\n# window: polygonal boundary\n# enclosing rectangle: [0, 1] x [0, 1] units\nc1 <- st_buffer(st_centroid(w2), 1.2)\n(pp2 <- c(c1, st_geometry(xy)) |> as.ppp())\n# Planar point pattern: 30 points\n# window: polygonal boundary\n# enclosing rectangle: [-0.2, 2.2] x [-0.7, 1.7] units\n\nTo test for homogeneity, one could carry out a quadrat count, using an appropriate quadrat layout (a 3 x 3 layout is shown in Figure 11.2)\n\npar(mfrow = c(1, 2), mar = rep(0, 4))\nq1 <- quadratcount(pp1, nx=3, ny=3)\nq2 <- quadratcount(pp2, nx=3, ny=3)\nplot(q1, main = \"\")\nplot(xy, add = TRUE)\nplot(q2, main = \"\")\nplot(xy, add = TRUE)\n\n\n\n\nFigure 11.2: 3 x 3 quadrat counts for the two point patterns\n\n\n\n\nand carry out a \\(\\chi^2\\) test on these counts:\n\nquadrat.test(pp1, nx=3, ny=3)\n# Warning: Some expected counts are small; chi^2 approximation may\n# be inaccurate\n# \n#   Chi-squared test of CSR using quadrat counts\n# \n# data:  pp1\n# X2 = 8, df = 8, p-value = 0.9\n# alternative hypothesis: two.sided\n# \n# Quadrats: 9 tiles (irregular windows)\nquadrat.test(pp2, nx=3, ny=3)\n# Warning: Some expected counts are small; chi^2 approximation may\n# be inaccurate\n# \n#   Chi-squared test of CSR using quadrat counts\n# \n# data:  pp2\n# X2 = 43, df = 8, p-value = 2e-06\n# alternative hypothesis: two.sided\n# \n# Quadrats: 9 tiles (irregular windows)\n\nwhere we should take the p-values with a large grain of salt because we have too small expected counts.\nKernel densities can be computed using density, where kernel shape and bandwidth can be controlled. Here, cross validation is used by function bw.diggle to specify the bandwidth parameter sigma; plots are shown in Figure 11.3 .\n\nden1 <- density(pp1, sigma = bw.diggle)\nden2 <- density(pp2, sigma = bw.diggle)\n\n\npar(mfrow = c(1, 2), mar = c(0,0,1.1,2))\nplot(den1)\nplot(pp1, add=TRUE)\nplot(den2)\nplot(pp1, add=TRUE)\n\n\n\n\nFigure 11.3: Kernel densities for both point patterns\n\n\n\n\nThe density maps created this way are obviously raster images, and we can convert them into stars object, e.g. by\n\nlibrary(stars)\n# Loading required package: abind\ns1 <- st_as_stars(den1)\n(s2 <- st_as_stars(den2))\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#        Min.  1st Qu. Median Mean 3rd Qu. Max. NA's\n# v  1.03e-14 0.000153  0.304 6.77    13.1 42.7 3492\n# dimension(s):\n#   from  to offset   delta refsys point values x/y\n# x    1 128   -0.2 0.01875     NA    NA   NULL [x]\n# y    1 128   -0.7 0.01875     NA    NA   NULL [y]\n\nand we can verify that the area under the density surface is similar to the sample size (30), by\n\nsum(s1[[1]], na.rm = TRUE)*st_dimensions(s1)$x$delta^2\n# [1] 29\nsum(s2[[1]], na.rm = TRUE)*st_dimensions(s2)$x$delta^2\n# [1] 30.7\n\nMore exciting applications involve e.g. modelling the density surface as a function of external variables. Suppose we want to model the density of pp2 as a Poisson point process (meaning that points do not interact with each other), where the intensity is a function of distance to the center of the “cluster”, and these distance are available in a stars object:\n\npt <- st_sfc(st_point(c(0.5, 0.5)))\ns2$dist <- st_distance(st_as_sf(s2, as_points = TRUE, na.rm = FALSE), pt)\n\nwe can then model the densities using ppm, where the name of the point pattern object is used as the left-hand-side of the formula:\n\n(m <- ppm(pp2 ~ dist, data = list(dist = as.im(s2[\"dist\"]))))\n# Nonstationary Poisson process\n# \n# Log intensity:  ~dist\n# \n# Fitted trend coefficients:\n# (Intercept)        dist \n#        4.54       -4.25 \n# \n#             Estimate  S.E. CI95.lo CI95.hi Ztest  Zval\n# (Intercept)     4.54 0.341    3.87    5.21   *** 13.32\n# dist           -4.25 0.701   -5.62   -2.88   *** -6.06\n\nThe returned object is of class ppm, and can be plotted: Figure 11.4 shows the predicted surface, the prediction standard error can also be plotted.\n\nplot(m, se = FALSE)\n\n\n\n\nFigure 11.4: Predicted densities of a ppm model\n\n\n\n\nThe model also has a predict method, which returns an im object that can be converted into a stars object by\n\npredict(m, covariates = list(dist = as.im(s2[\"dist\"]))) |>\n    st_as_stars()\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#      Min. 1st Qu. Median Mean 3rd Qu. Max. NA's\n# v  0.0694   0.527   2.12 6.62     7.3 89.9 3492\n# dimension(s):\n#   from  to offset   delta refsys point values x/y\n# x    1 128   -0.2 0.01875     NA    NA   NULL [x]\n# y    1 128   -0.7 0.01875     NA    NA   NULL [y]"
  },
  {
    "objectID": "13-PointPattern.html#coordinate-reference-systems",
    "href": "13-PointPattern.html#coordinate-reference-systems",
    "title": "11  Point Pattern Analysis",
    "section": "11.2 Coordinate reference systems",
    "text": "11.2 Coordinate reference systems\nAll routines in spatstat are layed out for two-dimensional data with Cartesian coordinates. If we try to convert an object with ellipsoidal coordinates, we get an error:\n\nsystem.file(\"gpkg/nc.gpkg\", package = \"sf\") |> \n    read_sf() |>\n    st_geometry() |>\n    st_centroid() |>\n    as.ppp()\n# Error: Only projected coordinates may be converted to spatstat class objects\n\nAlso, when converting to a spatstat data structure (e.g. to a ppp, create a density image, convert back to stars) we loose the coordinate reference system we started with. It can be set back e.g. by using st_set_crs."
  },
  {
    "objectID": "13-PointPattern.html#marked-point-patterns-points-on-linear-networks",
    "href": "13-PointPattern.html#marked-point-patterns-points-on-linear-networks",
    "title": "11  Point Pattern Analysis",
    "section": "11.3 Marked point patterns, points on linear networks",
    "text": "11.3 Marked point patterns, points on linear networks\nA few more data types can be converted to and from spatstat. Marked point patterns are point patterns that have a “mark”, which is either a categorical label or a numeric label for each point. A dataset available in spatstat with marks is the longleaf pines dataset, containing diameter at breast height as numeric mark:\n\nlongleaf\n# Marked planar point pattern: 584 points\n# marks are numeric, of storage type  'double'\n# window: rectangle = [0, 200] x [0, 200] metres\nll <- st_as_sf(longleaf)\nprint(ll, n = 5)\n# Simple feature collection with 585 features and 2 fields\n# Geometry type: GEOMETRY\n# Dimension:     XY\n# Bounding box:  xmin: 0 ymin: 0 xmax: 200 ymax: 200\n# CRS:           NA\n# First 5 features:\n#    spatstat.geom..marks.x.  label                           geom\n# NA                      NA window POLYGON ((0 0, 200 0, 200 2...\n# 1                     32.9  point                POINT (200 8.8)\n# 2                     53.5  point                 POINT (199 10)\n# 3                     68.0  point               POINT (194 22.4)\n# 4                     17.7  point               POINT (168 35.6)\n\nValues can be converted back to ppp with\n\nas.ppp(ll)\n# Warning in as.ppp.sf(ll): only first attribute column is used for\n# marks\n# Marked planar point pattern: 584 points\n# marks are numeric, of storage type  'double'\n# window: polygonal boundary\n# enclosing rectangle: [0, 200] x [0, 200] units\n\nLine segments, in spatstat objects of class psp can be converted back and forth to simple feature with LINESTRING geometries following a POLYGON feature with the observation window, as in\n\nprint(st_as_sf(copper$SouthLines), n = 5)\n# Simple feature collection with 91 features and 1 field\n# Geometry type: GEOMETRY\n# Dimension:     XY\n# Bounding box:  xmin: -0.335 ymin: 0.19 xmax: 35 ymax: 158\n# CRS:           NA\n# First 5 features:\n#     label                           geom\n# 1  window POLYGON ((-0.335 0.19, 35 0...\n# 2 segment LINESTRING (3.36 0.19, 10.4...\n# 3 segment LINESTRING (12.5 0.263, 11....\n# 4 segment LINESTRING (11.2 0.197, -0....\n# 5 segment LINESTRING (6.35 12.8, 16.5...\n\nFinally, point patterns on linear networks, in spatstat represented by lpp objects, can be converted to sf by\n\nprint(st_as_sf(chicago), n = 5)\n# Simple feature collection with 620 features and 4 fields\n# Geometry type: GEOMETRY\n# Dimension:     XY\n# Bounding box:  xmin: 0.389 ymin: 153 xmax: 1280 ymax: 1280\n# CRS:           NA\n# First 5 features:\n#     label seg tp marks                           geom\n# 1  window  NA NA  <NA> POLYGON ((0.389 153, 1282 1...\n# 2 segment  NA NA  <NA> LINESTRING (0.389 1254, 110...\n# 3 segment  NA NA  <NA> LINESTRING (110 1252, 111 1...\n# 4 segment  NA NA  <NA> LINESTRING (110 1252, 198 1...\n# 5 segment  NA NA  <NA> LINESTRING (198 1277, 198 1...\n\nwhere we only see the first five features; the points are also in this object, as variable label indicates\n\ntable(st_as_sf(chicago)$label)\n# \n#   point segment  window \n#     116     503       1\n\nPotential information about network structure, as of which LINESTRING is connected to others, is not present in the sf object. Package sfnetworks (van der Meer et al. 2022) would be a candidate package to hold such information, or e.g. to pass on network data imported from OpenStreetMaps to spatstat."
  },
  {
    "objectID": "13-PointPattern.html#spatial-sampling-and-simulating-a-point-process",
    "href": "13-PointPattern.html#spatial-sampling-and-simulating-a-point-process",
    "title": "11  Point Pattern Analysis",
    "section": "11.4 Spatial sampling and simulating a point process",
    "text": "11.4 Spatial sampling and simulating a point process\nPackage sf contains an st_sample method that samples points from MULTIPOINT, linear or polygonal geometries, using different spatial sampling strategies. It natively supports strategies “random”, “hexagonal” and “regular”, where “regular” refers to sampling on a square regular grid, and “hexagonal” essentially gives a triangular grid. For type “random”, it can return exactly the number of requested points, for other types this is approximate.\nst_sample also interfaces point process simulation functions of spatstat, when other values for sampling type are chosen. For instance the spatstat function rThomas is invoked when setting type = Thomas (Figure 11.5) :\n\nkappa <- 30 / st_area(w2) # intensity\nth <- st_sample(w2, kappa = kappa, mu = 3, scale = 0.05, type = \"Thomas\")\nnrow(th)\n# [1] 82\n\n\npar(mar = rep(0, 4))\nplot(w2)\nplot(th, add = TRUE)\n\n\n\n\nFigure 11.5: Thomas process with mu = 3 and scale = 0.05\n\n\n\n\nThe help function obtained by ?rThomas details the meaning of the parameters kappa, mu and scale. Simulating point processes means that the intensity is given, not the sample size. The sample size within the observation window obtained this way is a random variable."
  },
  {
    "objectID": "13-PointPattern.html#simulating-points-on-the-globe",
    "href": "13-PointPattern.html#simulating-points-on-the-globe",
    "title": "11  Point Pattern Analysis",
    "section": "11.5 Simulating points on the globe",
    "text": "11.5 Simulating points on the globe\nAnother spatial random sampling type supported by sf natively (in st_sample) is simulation of random points on the sphere. An example of this is shown in Figure 11.6 , where points were constrained to those in oceans.\n\n# example from plotting chapter:\npar(mar = rep(0, 4))\nlibrary(s2)\ng <- as_s2_geography(TRUE) # Earth\nco <- s2_data_countries()\noc <- s2_difference(g, s2_union_agg(co)) # oceans\nb <- s2_buffer_cells(as_s2_geography(\"POINT(-30 -10)\"), 9800000) # visible half\ni <- s2_intersection(b, oc) # visible ocean\nco <- s2_intersection(b, co)\nplot(st_transform(st_as_sfc(i), \"+proj=ortho +lat_0=-10 +lon_0=-30\"), \n     col = 'lightblue')\nplot(st_transform(st_as_sfc(co), \"+proj=ortho +lat_0=-10 +lon_0=-30\"), \n     col = NA, add = TRUE, border = 'grey')\n# sampling from globe:\nsf_use_s2(FALSE)\n# Spherical geometry (s2) switched off\nassign(\".sf.use_s2\", FALSE, envir=sf:::.sf_cache) # cheat!\npts <- suppressMessages( # cheat!\n   st_sample(st_as_sfc(st_bbox(st_as_stars())), 1000, exact = FALSE))\nsf_use_s2(TRUE)\n# Spherical geometry (s2) switched on\nassign(\".sf.use_s2\", TRUE, envir = sf:::.sf_cache) # cheat!\npts <- s2_intersection(i, pts) |> st_as_sfc()\nplot(st_transform(pts, \"+proj=ortho +lat_0=-10 +lon_0=-30\"), \n     add = TRUE, pch = 3, cex = .7)\n\n\n\n\nFigure 11.6: Points randomly sampled over the oceans"
  },
  {
    "objectID": "13-PointPattern.html#exercises",
    "href": "13-PointPattern.html#exercises",
    "title": "11  Point Pattern Analysis",
    "section": "11.6 Exercises",
    "text": "11.6 Exercises\n\nAfter loading spatstat, recreate the plot obtained by plot(longleaf) by using ggplot2 and geom_sf(), and by sf::plot().\nConvert the sample locations of the NO\\(_2\\) data used in Chapter 12 to a ppp object, with a proper window.\nCompute and plot the density of the NO\\(_2\\) dataset, import the density as a stars object and compute the volume under the surface.\n\n\n\n\n\n\n\n\nBaddeley, Adrian, Ege Rubak, and Rolf Turner. 2015. Spatial Point Patterns: Methodology and Applications with r. Chapman; Hall/CRC.\n\n\nBaddeley, Adrian, Rolf Turner, and Ege Rubak. 2022. Spatstat: Spatial Point Pattern Analysis, Model- Fitting, Simulation, Tests. http://spatstat.org/.\n\n\nGabriel, Edith, Barry Rowlingson, and Peter Diggle. 2013. “Stpp: An r Package for Plotting, Simulating and Analyzing Spatio-Temporal Point Patterns.” Journal of Statistical Software, Articles 53 (2): 1–29. https://doi.org/10.18637/jss.v053.i02.\n\n\nStoyan, Dietrich, Francisco J. Rodríguez-Cortés, Jorge Mateu, and Wilfried Gille. 2017. “Mark Variograms for Spatio-Temporal Point Processes.” Spatial Statistics 20: 125–47. https://doi.org/https://doi.org/10.1016/j.spasta.2017.02.006.\n\n\nvan der Meer, Lucas, Lorena Abad, Andrea Gilardi, and Robin Lovelace. 2022. Sfnetworks: Tidy Geospatial Networks. https://CRAN.R-project.org/package=sfnetworks."
  },
  {
    "objectID": "14-Interpolation.html",
    "href": "14-Interpolation.html",
    "title": "12  Spatial Interpolation",
    "section": "",
    "text": "Spatial interpolation is the activity of estimating values spatially continuous variables for spatial locations where they have not been observed, based on observations. The statistical methodology for spatial interpolation, called geostatistics, is concerned with the modelling, prediction and simulation of spatially continuous phenomena. The typical problem is a missing value problem: we observe a property of a phenomenon \\(Z(s)\\) at a limited number of sample locations \\(s_i, i = 1,...,n\\), and are interested in the property value at all locations \\(s_0\\) covering an area of interest, so we have to predict it for unobserved locations. This is also called kriging, or Gaussian Process prediction. In case \\(Z(s)\\) contains a white noise component \\(\\epsilon\\), as in \\(Z(s)=S(s)+\\epsilon(s)\\) (possibly reflecting measurement error) an alternative but similar goal is to predict \\(S(s)\\), which may be called spatial filtering or smoothing.\nIn this chapter we will show simple approaches for handling geostatistical data, will demonstrate simple interpolation methods, explore modelling spatial correlation, spatial prediction and simulation. We will use package gstat (Pebesma and Graeler 2022; Pebesma 2004), which offers a fairly wide palette of models and options for non-Bayesian geostatistical analysis. Bayesian methods with R implementations are found in e.g. Diggle, Tawn, and Moyeed (1998), Diggle and Ribeiro Jr. (2007), Blangiardo and Cameletti (2015), and Wikle, Zammit-Mangion, and Cressie (2019). An overview and comparisons of methods for large datasets is given in Heaton et al. (2018)."
  },
  {
    "objectID": "14-Interpolation.html#a-first-dataset",
    "href": "14-Interpolation.html#a-first-dataset",
    "title": "12  Spatial Interpolation",
    "section": "12.1 A first dataset",
    "text": "12.1 A first dataset\nWe can read NO\\(_2\\) data, which is prepared in Chapter 13, from package gstat using\n\nlibrary(tidyverse)\nno2 <- read_csv(system.file(\"external/no2.csv\", package = \"gstat\"))\n\nand convert it into an sf object using\n\nlibrary(sf)\n# Linking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.0; sf_use_s2() is TRUE\ncrs <- st_crs(\"EPSG:32632\")\nno2.sf <- st_as_sf(no2, coords = c(\"station_longitude_deg\",\n                    \"station_latitude_deg\"), crs = \"OGC:CRS84\") |>\n    st_transform(crs)\n\nNext, we can load country boundaries and plot these data using ggplot, shown in Figure 12.1 .\n\ndata(air, package = \"spacetime\") # loads boundaries into DE_NUTS1\nde <- st_transform(st_as_sf(DE_NUTS1), crs)\n# Loading required package: sp\n\n\nggplot() + geom_sf(data = de) +  geom_sf(data = no2.sf, mapping = aes(col = NO2))\n\n\n\n\nFigure 12.1: Mean NO\\(_2\\) concentrations in air for rural background stations in Germany over 2017\n\n\n\n\nIf we want to interpolate, we first need to decide where. This is typically done on a regular grid covering the area of interest. Starting with the country outline de we can create a regular grid with 10 km grid cells (pixels) over Germany by\n\nlibrary(stars)\n# Loading required package: abind\nst_bbox(de) |>\n  st_as_stars(dx = 10000) |>\n  st_crop(de) -> grd\ngrd\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#         Min. 1st Qu. Median Mean 3rd Qu. Max. NA's\n# values     0       0      0    0       0    0 2076\n# dimension(s):\n#   from to  offset  delta            refsys point values x/y\n# x    1 65  280741  10000 WGS 84 / UTM z...    NA   NULL [x]\n# y    1 87 6101239 -10000 WGS 84 / UTM z...    NA   NULL [y]\n\nHere, we chose grid cells to be not too fine, so that we still see them in plots.\nPerhaps the simplest interpolation method is inverse distance weighted interpolation, which is a weighted average, using weights inverse proportional to distances from the interpolation location:\n\\[\n\\hat{z}(s_0) = \\frac{\\sum_{i=1}^{n} w_i z(s_i)}{\\sum_{i=1}^n w_i}\n\\]\nwith \\(w_i = |s_0-s_i|^p\\), and the inverse distance power typically taken as 2, or optimized using cross validation. We can compute inverse distance interpolated values using gstat::idw,\n\nlibrary(gstat)\ni <- idw(NO2~1, no2.sf, grd)\n# [inverse distance weighted interpolation]\n\nand plot them in Figure 12.2 .\n\nggplot() + geom_stars(data = i, aes(fill = var1.pred, x = x, y = y)) + \n    geom_sf(data = st_cast(de, \"MULTILINESTRING\")) + \n    geom_sf(data = no2.sf)\n\n\n\n\nFigure 12.2: Inverse distance weighted interpolated values for NO\\(_2\\) over Germany"
  },
  {
    "objectID": "14-Interpolation.html#sample-variogram",
    "href": "14-Interpolation.html#sample-variogram",
    "title": "12  Spatial Interpolation",
    "section": "12.2 Sample variogram",
    "text": "12.2 Sample variogram\nIn order to make spatial predictions using geostatistical methods, we first need to identify a model for the mean and for the spatial correlation. In the simplest model, \\(Z(s) = m + e(s)\\), the mean is an unknown constant \\(m\\), and in this case the spatial correlation can be modelled using the variogram, \\(\\gamma(h) = 0.5 E (Z(s)-Z(s+h))^2\\). For processes with a finite variance \\(C(0)\\), the variogram is related to the covariogram or covariance function through \\(\\gamma(h) = C(0)-C(h)\\).\nThe sample variogram is obtained by computing estimates of \\(\\gamma(h)\\) for distance intervals, \\(h_i = [h_{i,0},h_{i,1}]\\):\n\\[\n\\hat{\\gamma}(h_i) = \\frac{1}{2N(h_i)}\\sum_{j=1}^{N(h_i)}(z(s_i)-z(s_i+h'))^2, \\ \\ h_{i,0} \\le h' < h_{i,1}\n\\]\nwith \\(N(h_i)\\) the number of sample pairs available for distance interval \\(h_i\\). Function gstat::variogram computes sample variograms,\n\nv <- variogram(NO2~1, no2.sf)\n\nand the result of plotting this is shown in Figure 12.3 .\n\nplot(v, plot.numbers = TRUE)\n\n\n\n\nFigure 12.3: Sample variogram plot\n\n\n\n\nFunction variogram chooses default for maximum distance (cutoff: one third of the length of the bounding box diagonal) and (constant) interval widths (width: cutoff divided by 15). These defaults can be changed, e.g. by\n\nlibrary(gstat)\nv0 <- variogram(NO2~1, no2.sf, cutoff = 100000, width = 10000)\n\nshown in Figure 12.4 .\n\nplot(v0, plot.numbers = TRUE)\n\n\n\n\nFigure 12.4: Sample variogram plot with adjusted cutoff and lag width\n\n\n\n\nNote that the formula NO2~1 is used to select the variable of interest from the data file (NO2), and to specify the mean model: ~1 refers to an intercept-only (unknown, constant mean) model."
  },
  {
    "objectID": "14-Interpolation.html#fitting-variogram-models",
    "href": "14-Interpolation.html#fitting-variogram-models",
    "title": "12  Spatial Interpolation",
    "section": "12.3 Fitting variogram models",
    "text": "12.3 Fitting variogram models\nIn order to progress toward spatial predictions, we need a variogram model \\(\\gamma(h)\\) for (potentially) all distances \\(h\\), rather than the set of estimates derived above: in case we would for instance connect these estimates with straight lines, or assume they reflect constant values over their respective distance intervals, this would lead to statistical models with non-positive covariance matrices, which is a complicated way of expressing that you are in a lot of trouble.\nTo avoid these troubles we fit parametric models \\(\\gamma(h)\\) to the estimates \\(\\hat{\\gamma}(h_i)\\), where we take \\(h_i\\) as the mean value of all the \\(h'\\) values involved in estimating \\(\\hat{\\gamma}(h_i)\\). For this, when we fit a model like the exponential variogram, fitted by\n\nv.m <- fit.variogram(v, vgm(1, \"Exp\", 50000, 1))\n\nand shown in Figure 12.5 .\n\nplot(v, v.m, plot.numbers = TRUE)\n\n\n\n\nFigure 12.5: Sample variogram with fitted model\n\n\n\n\nThe fitting is done by weighted least squares, minimizing \\(\\sum_{i=1}^{n}w_i(\\gamma(h_i)-\\hat{\\gamma}(h_i))^2\\), with \\(w_i\\) by default equal to \\(N(h_i)/h^2\\), other fitting schemes are available through argument fit.method."
  },
  {
    "objectID": "14-Interpolation.html#sec-kriging",
    "href": "14-Interpolation.html#sec-kriging",
    "title": "12  Spatial Interpolation",
    "section": "12.4 Kriging interpolation",
    "text": "12.4 Kriging interpolation\nTypically, when we interpolate a variable, we do that on points on a regular grid covering the target area. We first create a stars object with a raster covering the target area, and NA’s outside it.\nKriging involves the prediction of \\(Z(s_0)\\) at arbitrary locations \\(s_0\\). We can krige NO\\(_2\\) by using gstat::krige, with the model for the trend, the data, the prediction grid, and the variogram model (Figure 12.6) :\n\nk <- krige(NO2~1, no2.sf, grd, v.m)\n# [using ordinary kriging]\n\n\nggplot() + geom_stars(data = k, aes(fill = var1.pred, x = x, y = y)) + \n    geom_sf(data = st_cast(de, \"MULTILINESTRING\")) + \n    geom_sf(data = no2.sf) +\n    coord_sf(lims_method = \"geometry_bbox\")\n\n\n\n\nFigure 12.6: Kriged NO\\(_2\\) concentrations over Germany"
  },
  {
    "objectID": "14-Interpolation.html#sec-blockkriging",
    "href": "14-Interpolation.html#sec-blockkriging",
    "title": "12  Spatial Interpolation",
    "section": "12.5 Areal means: block kriging",
    "text": "12.5 Areal means: block kriging\nComputing areal means can be done in several ways. The simples is to take the average of point samples falling inside the target polygons:\n\na <- aggregate(no2.sf[\"NO2\"], by = de, FUN = mean)\n\nA more complicated way is to use block kriging (Journel and Huijbregts 1978), which uses all the data to estimate the mean of the variable over the target area. With krige, this can be done by giving the target areas (polygons) as the newdata argument:\n\nb <- krige(NO2~1, no2.sf, de, v.m)\n# [using ordinary kriging]\n\nwe can now merge the two maps into a single object to create a single plot (Figure 12.7) :\n\nb$sample <- a$NO2\nb$kriging <- b$var1.pred\n\n\nb |> select(sample, kriging) |> \n        pivot_longer(1:2, names_to = \"var\", values_to = \"NO2\") -> b2\nb2$var <- factor(b2$var, levels = c(\"sample\", \"kriging\"))\nggplot() + geom_sf(data = b2, mapping = aes(fill = NO2)) + facet_wrap(~var) +\n     scale_fill_gradientn(colors = sf.colors(20))\n\n\n\n\nFigure 12.7: Aggregated NO\\(_2\\) values from simple averaging (left) and block kriging (right)\n\n\n\n\nWe see that the signal is similar, but that the simple means are more variable than the block kriging values; this may be due to the smoothing effect of kriging: data points outside the target area are weighted, too.\nTo compare the standard errors of means, for the sample mean we can get a rough guess of the standard error by \\(\\sqrt{(\\sigma^2/n)}\\):\n\nSE <- function(x) sqrt(var(x)/length(x))\na <- aggregate(no2.sf[\"NO2\"], de, SE)\n\nwhich would have been the actual estimate in design-based inference if the sample was obtained by spatially random sampling. The block kriging variance is the model-based estimate, and is a by-product of kriging. We combine and rename the two:\n\nb$sample <- a$NO2\nb$kriging <- sqrt(b$var1.var)\n\n\nb |> select(sample, kriging) |> \n        pivot_longer(1:2, names_to = \"var\", \n                     values_to = \"Standard_error\") -> b2\nb2$var <- factor(b2$var, levels = c(\"sample\", \"kriging\"))\nggplot() +\n    geom_sf(data = b2, mapping = aes(fill = Standard_error)) +\n    facet_wrap(~var, as.table = FALSE) + \n    scale_fill_gradientn(colors = sf.colors(20))\n\n\n\n\nFigure 12.8: Standard errors for mean NO\\(_2\\) values obtained by simple averaging (left) and block kriging (right)\n\n\n\n\nwhere we see that the simple approach gives clearly more variability and mostly larger values for prediction errors of areal means, compared to block kriging."
  },
  {
    "objectID": "14-Interpolation.html#conditional-simulation",
    "href": "14-Interpolation.html#conditional-simulation",
    "title": "12  Spatial Interpolation",
    "section": "12.6 Conditional simulation",
    "text": "12.6 Conditional simulation\nIn case one or more conditional realisation of the field \\(Z(s)\\) are needed rather than their conditional mean, we can obtain this by conditional simulation. A reason for wanting this may be the need to estimate areal mean values of \\(g(Z(s))\\) with \\(g(\\cdot)\\) a non-linear function; a simple example is the areal fraction where \\(Z(s)\\) exceeds a threshold.\nThe standard approach used by gstat is to use the sequential simulation algorithm for this. This is a simple algorithm that randomly steps through the prediction locations and at each location:\n\ncarries out a kriging prediction\ndraws a random variable from the normal distribution with mean and variance equal to the kriging variance\nadds this value to the conditioning dataset\nfinds a new random simulation location\n\nuntil all locations have been visited.\nThis is carried out by gstat::krige when nsim is set to a positive value. In addition, it is good to constrain nmax, the (maximum) number of nearest neigbours to include in kriging estimation, because the dataset grows each step, leading otherwise quickly to very long computing times and large memory requirements (Figure 12.9):\n\ns <- krige(NO2~1, no2.sf, grd, v.m, nmax = 30, nsim = 6)\n# drawing 6 GLS realisations of beta...\n# [using conditional Gaussian simulation]\n\n\nlibrary(viridis)\ng <- ggplot() + coord_equal() +\n    scale_fill_viridis() +\n    theme_void() +\n    scale_x_discrete(expand=c(0,0)) +\n    scale_y_discrete(expand=c(0,0))\ng + geom_stars(data = s[,,,1:6]) + facet_wrap(~sample)\n\n\n\n\nFigure 12.9: Six conditional simulations for NO\\(_2\\) values\n\n\n\n\nAlternative methods for conditional simulation have recently been added to gstat, and include krigeSimCE implementing the circular embedding method (Davies and Bryant 2013), and krigeSTSimTB implementing the turning bands method (Schlather 2011). These are of particular of interest for larger datasets or conditional simulations of spatiotemporal data."
  },
  {
    "objectID": "14-Interpolation.html#trend-models",
    "href": "14-Interpolation.html#trend-models",
    "title": "12  Spatial Interpolation",
    "section": "12.7 Trend models",
    "text": "12.7 Trend models\nKriging and conditional simulation, as used so far in this chapter, assume that all spatial variability is a random process, characterized by a spatial covariance model. In case we have other variables that are meaningfully correlated with the target variable, we can use them in a linear regression model for the trend,\n\\[\nZ(s) = \\sum_{j=0}^p \\beta_j X_p(s) + e(s)\n\\]\nwith \\(X_0(s) = 1\\) and \\(\\beta_0\\) an intercept, but with the other \\(\\beta_j\\) regression coefficients. This typically reduces both the spatial correlation in the residual \\(e(s)\\), as well as its variance, and leads to more accurate predictions and more similar conditional simulations.\n\nA population grid\nAs a potential predictor for NO2 in the air, we use population density. NO2 is mostly caused by traffic, and traffic is stronger in more densely populated areas. Population density is obtained from the 2011 census, and is downloaded as a csv file with the number of inhabitants per 100 m grid cell. We can aggregate these data to the target grid cells by summing the inhabitants:\n\nv <- vroom::vroom(\"aq/pop/Zensus_Bevoelkerung_100m-Gitter.csv\")\nv |> filter(Einwohner > 0) |> \n    select(-Gitter_ID_100m) |>\n    st_as_sf(coords = c(\"x_mp_100m\", \"y_mp_100m\"), crs = 3035) |>\n    st_transform(st_crs(grd)) -> b\na <- aggregate(b, st_as_sf(grd, na.rm = FALSE), sum)\n\n\n\n\nNow we have the population counts per grid cell in a. To get to population density, we need to find the area of each cell; for cells crossing the country border, this will be less than 10 x 10 km:\n\ngrd$ID <- 1:prod(dim(grd)) # to find out which grid cell we have\nii <- st_intersects(grd[\"ID\"], \n                   st_cast(st_union(de), \"MULTILINESTRING\"))\n# Warning in st_intersects.stars(grd[\"ID\"], st_cast(st_union(de),\n# \"MULTILINESTRING\")): as_points is NA: assuming here that raster\n# cells are small polygons, not points\ngrd_sf <- st_as_sf(grd[\"ID\"], na.rm = FALSE)[lengths(ii) > 0,]\niii <- st_intersection(grd_sf, st_union(de))\n# Warning: attribute variables are assumed to be spatially constant\n# throughout all geometries\ngrd$area <- st_area(grd)[[1]] + units::set_units(grd$values, m^2)\ngrd$area[iii$ID] <- st_area(iii)\n\nInstead of doing the two-stage procedure above: first finding cells that have a border crossing it, then computing its area, we could also directly use st_intersection on all cells, but that takes considerably longer. From the counts and areas we can compute densities, and verify totals (Figure 12.10) :\n\ngrd$pop_dens <- a$Einwohner / grd$area\nsum(grd$pop_dens * grd$area, na.rm = TRUE) # verify\n# 80323301 [1]\nsum(b$Einwohner)\n# [1] 80324282\n\n\ng + geom_stars(data = grd, aes(fill = sqrt(pop_dens), x = x, y = y))\n\n\n\n\nFigure 12.10: Population density for 100 m $ imes$ 100 m grid cells\n\n\n\n\nWe need to divide the number of inhabitants by the number of 100 m grid points contributing to it, in order to convert population counts into population density.\nTo obtain population density values at monitoring network stations, we can use\n\n(a <- aggregate(grd[\"pop_dens\"], no2.sf, mean))\n# stars object with 1 dimensions and 1 attribute\n# attribute(s):\n#                      Min.  1st Qu.   Median     Mean  3rd Qu.\n# pop_dens [1/m^2] 3.37e-06 4.98e-05 8.93e-05 0.000195 0.000237\n#                     Max. NA's\n# pop_dens [1/m^2] 0.00224    1\n# dimension(s):\n#          from to offset delta            refsys point\n# geometry    1 74     NA    NA WGS 84 / UTM z...  TRUE\n#                                                     values\n# geometry POINT (545414 5930802),...,POINT (835252 5630738)\nno2.sf$pop_dens <- st_as_sf(a)[[1]]\nsummary(lm(NO2~sqrt(pop_dens), no2.sf))\n# \n# Call:\n# lm(formula = NO2 ~ sqrt(pop_dens), data = no2.sf)\n# \n# Residuals:\n#    Min     1Q Median     3Q    Max \n#  -7.96  -2.15  -0.50   1.60   8.10 \n# \n# Coefficients:\n#                Estimate Std. Error t value Pr(>|t|)    \n# (Intercept)       4.561      0.697    6.54  8.0e-09 ***\n# sqrt(pop_dens)  325.006     49.927    6.51  9.2e-09 ***\n# ---\n# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n# \n# Residual standard error: 3.15 on 71 degrees of freedom\n#   (1 observation deleted due to missingness)\n# Multiple R-squared:  0.374,   Adjusted R-squared:  0.365 \n# F-statistic: 42.4 on 1 and 71 DF,  p-value: 9.19e-09\n\nand the corresponding scatterplot is shown in Figure 12.11.\n\nplot(NO2 ~ sqrt(pop_dens), no2.sf)\nabline(lm(NO2 ~ sqrt(pop_dens), no2.sf))\n\n\n\n\nFigure 12.11: Scatter plot of 2017 annual mean NO2 concentration against population density, for rural background air quality stations\n\n\n\n\nPrediction under this new model involves first modelling a residual variogram (Figure 12.12) :\n\nno2.sf <- no2.sf[!is.na(no2.sf$pop_dens),]\nvr <- variogram(NO2~sqrt(pop_dens), no2.sf)\nvr.m <- fit.variogram(vr, vgm(1, \"Exp\", 50000, 1))\n\n\nplot(vr, vr.m, plot.numbers = TRUE)\n\n\n\n\nFigure 12.12: Residual variogram after subtracting population density trend\n\n\n\n\nand subsequently, kriging prediction is done by (Figure 12.13)\n\nkr <- krige(NO2 ~ sqrt(pop_dens), no2.sf, grd[\"pop_dens\"], vr.m)\n# [using universal kriging]\nk$kr1 <- k$var1.pred\nk$kr2 <- kr$var1.pred\nst_redimension(k[c(\"kr1\", \"kr2\")], \n    along = list(what = c(\"kriging\", \"residual kriging\"))) |>\n    setNames(\"NO2\") -> km\n\n\ng + geom_stars(data = km, aes(fill = NO2, x = x, y = y)) + \n    geom_sf(data = st_cast(de, \"MULTILINESTRING\")) + \n    geom_sf(data = no2.sf) + facet_wrap(~what) +\n    coord_sf(lims_method = \"geometry_bbox\")\n# Coordinate system already present. Adding new coordinate system, which will replace the existing one.\n\n\n\n\nFigure 12.13: Kriging NO\\(_2\\) values using population density as a trend variable\n\n\n\n\nwhere, critically, the pop_dens values are now available for prediction locations in object grd. We see some clear differences: the map with population density in the trend follows the extremes of the population density rather than those of the measurement stations, and has a range that extends that of the former. It should be taken with a large grain of salt however, since the stations used were filtered for the category “rural background”, indicating that they represent conditions of lower populations density. The scatter plot of Figure 12.11 reveals that the the population density at the locations of stations is much more limited than that in the population density map, and hence the right-hand side map is based on strongly extrapolating the relationship shown in Figure 12.11."
  },
  {
    "objectID": "14-Interpolation.html#exercises",
    "href": "14-Interpolation.html#exercises",
    "title": "12  Spatial Interpolation",
    "section": "12.8 Exercises",
    "text": "12.8 Exercises\n\nCreate a plot like the one in Figure 12.13 that has the inverse distance interpolated map of Figure 12.2 added on left side.\nCreate a scatter plot of the map values of the idw and kriging map, and a scatter plot of map values of idw and residual kriging.\nCarry out a block kriging, predicting block averages for blocks centered over grid cells, by setting the block argument in krige(), and do this for block sizes of 10 km (the grid cell size), 50 km and 200 km. Compare the resulting maps of estimates for these three blocks sizes with those obtained by point kriging, and do the same thing for all associated kriging standard errors.\nBased on the residual kriging results obtained above, compute maps of the lower and upper boundary of a 95% confidence interval, when assuming that the kriging error is normally distributed, and show them in a plot with a single (joint) legend\nCompute and show the map with the probabilities that NO2 point values exceed the level of 15 ppm, assuming normally distributed kriging errors.\n\n\n\n\n\nBlangiardo, Marta, and Michela Cameletti. 2015. Spatial and Spatio-Temporal Bayesian Models with r-INLA. John Wiley & Sons.\n\n\nDavies, Tilman, and David Bryant. 2013. “On Circulant Embedding for Gaussian Random Fields in r.” Journal of Statistical Software, Articles 55 (9): 1–21. https://doi.org/10.18637/jss.v055.i09.\n\n\nDiggle, P. J., and P. J. Ribeiro Jr. 2007. Model-Based Geostatistics. New York: Springer.\n\n\nDiggle, P. J., J. A. Tawn, and R. A. Moyeed. 1998. “Model-Based Geostatistics.” Applied Statistics, 299–350.\n\n\nHeaton, Matthew J., Abhirup Datta, Andrew O. Finley, Reinhard Furrer, Joseph Guinness, Rajarshi Guhaniyogi, Florian Gerber, et al. 2018. “A Case Study Competition Among Methods for Analyzing Large Spatial Data.” Journal of Agricultural, Biological and Environmental Statistics, December. https://doi.org/10.1007/s13253-018-00348-w.\n\n\nJournel, Andre G, and Charles J Huijbregts. 1978. Mining Geostatistics. Academic press London.\n\n\nPebesma, Edzer. 2004. “Multivariable Geostatistics in S: The Gstat Package.” Computers & Geosciences 30: 683–91.\n\n\nPebesma, Edzer, and Benedikt Graeler. 2022. Gstat: Spatial and Spatio-Temporal Geostatistical Modelling, Prediction and Simulation. https://github.com/r-spatial/gstat/.\n\n\nSchlather, Martin. 2011. “Construction of Covariance Functions and Unconditional Simulation of Random Fields.” In Porcu, e., Montero, j.m. And Schlather, m., Space-Time Processes and Challenges Related to Environmental Problems. New York: Springer.\n\n\nWikle, Christopher K, Andrew Zammit-Mangion, and Noel Cressie. 2019. Spatio-Temporal Statistics with r. CRC Press."
  },
  {
    "objectID": "16-Geostatistics.html",
    "href": "16-Geostatistics.html",
    "title": "13  Multivariate and Spatiotemporal Geostatistics",
    "section": "",
    "text": "Building on the simple interpolation methods presented in Chapter 12, this chapter works out a case study for spatiotemporal interpolation, using NO\\(_2\\) air quality data, and populations density as covariate."
  },
  {
    "objectID": "16-Geostatistics.html#sec-preparing",
    "href": "16-Geostatistics.html#sec-preparing",
    "title": "13  Multivariate and Spatiotemporal Geostatistics",
    "section": "13.1 Preparing the air quality dataset",
    "text": "13.1 Preparing the air quality dataset\nThe dataset we work with is an air quality dataset obtained from the European Environmental Agency (EEA). European member states report air quality measurements to this Agency. So-called validated data are quality controlled by member states, and are reported on a yearly basis. They form the basis for policy compliancy evaluations.\nThe EEA’s air quality e-reporting website gives access to the data reported by European member states. We decided to download hourly (time series) data, which is the data primarily measured. A web form helps convert simple selection criteria into an http GET request. The URL\\footnote{{} was created to select all validated (Source=E1a) \\(NO_2\\) (Pollutant=8) data for 2017 (Year_from, Year_to) from Germany (CountryCode=DE). It returns a text file with a set of URLs to CSV files, each containing the hourly values for the whole period for a single measurement station. These files were downloaded and converted to the right encoding using the dos2unix command line utility.\nIn the following, we will read all the files into a list,\n\nfiles <- list.files(\"aq\", pattern = \"*.csv\", full.names = TRUE)\nr <- lapply(files[-1], function(f) read.csv(f))\n\nthen convert the time variable into a POSIXct variable, and put them in time order by\n\nSys.setenv(TZ = \"UTC\") # don't use local time zone\nr <- lapply(r, function(f) {\n        f$t = as.POSIXct(f$DatetimeBegin) \n        f[order(f$t), ] \n    }\n)\n\nWe remove smaller subdatasets, which for this dataset have no hourly data:\n\nr <- r[sapply(r, nrow) > 1000]\nnames(r) <- sapply(r,\n               function(f) unique(f$AirQualityStationEoICode))\nlength(r) == length(unique(names(r)))\n\nand then combine all files using xts::cbind, so that they are matched based on matching times:\n\nlibrary(xts)\n# Loading required package: zoo\n# \n# Attaching package: 'zoo'\n# The following objects are masked from 'package:base':\n# \n#     as.Date, as.Date.numeric\nr <- lapply(r, function(f) xts(f$Concentration, f$t))\naq <- do.call(cbind, r)\n\nA usual further selection for this dataset is to select stations for which 75% of the hourly values measured are valid, i.e. drop those with more than 25% hourly values missing. Knowing that mean(is.na(x)) gives the fraction of missing values in a vector x, we can apply this function to the columns (stations):\n\nsel <- apply(aq, 2, function(x) mean(is.na(x)) < 0.25)\naqsel <- aq[, sel]\n\nNext, the station metadata was read and filtered for rural background stations in Germany (\"DE\") by\n\nlibrary(tidyverse)\n# ── Attaching packages ───────────────────────── tidyverse 1.3.1 ──\n# ✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n# ✔ tibble  3.1.7     ✔ dplyr   1.0.9\n# ✔ tidyr   1.2.0     ✔ stringr 1.4.0\n# ✔ readr   2.1.2     ✔ forcats 0.5.1\n# ── Conflicts ──────────────────────────── tidyverse_conflicts() ──\n# ✖ dplyr::filter() masks stats::filter()\n# ✖ dplyr::first()  masks xts::first()\n# ✖ dplyr::lag()    masks stats::lag()\n# ✖ dplyr::last()   masks xts::last()\nread.csv(\"aq/AirBase_v8_stations.csv\", sep = \"\\t\") |>\n    as_tibble() |> \n    filter(country_iso_code == \"DE\",\n           station_type_of_area == \"rural\",\n           type_of_station == \"Background\") -> a2\n\nThese stations contain coordinates, and an sf object with (static) station metadata is created by\n\nlibrary(sf)\n# Linking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.0; sf_use_s2() is TRUE\na2.sf <- st_as_sf(a2, coords = \n                 c(\"station_longitude_deg\",\n                   \"station_latitude_deg\"), crs = 'OGC:CRS84')\n\nWe now subset the air quality measurements to include only stations that are of type rural background:\n\nsel <-  colnames(aqsel) %in% a2$station_european_code\naqsel <- aqsel[, sel]\n\nWe can compute station means, and join these to stations locations by\n\ntb <- tibble(NO2 = apply(aqsel, 2, mean, na.rm = TRUE), \n            station_european_code = colnames(aqsel))\ncrs <- 'EPSG:32632'\nright_join(a2.sf, tb) |> st_transform(crs) -> no2.sf \n# load German boundaries\ndata(air, package = \"spacetime\")\nde <- st_transform(st_as_sf(DE_NUTS1), crs)\nggplot() + geom_sf(data = de) +\n        geom_sf(data = no2.sf, mapping = aes(col = NO2))\n\n\n\n\nFigure 13.1: ?(caption)\n\n\n\n\nStation mean NO\\(_2\\) concentrations, along with country borders, are shown in in Figure 12.1."
  },
  {
    "objectID": "16-Geostatistics.html#sec-cokriging",
    "href": "16-Geostatistics.html#sec-cokriging",
    "title": "13  Multivariate and Spatiotemporal Geostatistics",
    "section": "13.2 Multivariable geostatistics",
    "text": "13.2 Multivariable geostatistics\nMultivariable geostatics involves the joint modelling, prediction and simulation of multiple variables,\n\\[Z_1(s) = X_1 \\beta_1 + e_1(s)\\]\n\\[...\\]\n\\[Z_n(s) = X_n \\beta_n + e_n(s).\\]\nIn addition to having observations, trend models, and variograms for each variable, the cross variogram for each pair of residual variables, describing the covariance of \\(e_i(s), e_j(s+h)\\), is required. If this cross covariance is non-zero, knowledge of \\(e_j(s+h)\\) may help predict (or simulate) \\(e_i(s)\\). This is especially true if \\(Z_j(s)\\) is more densely sample than \\(Z_i(s)\\). Prediction and simulation under this model are called cokriging and cosimulation. Examples using gstat are found when running the demo scripts\n\nlibrary(gstat)\ndemo(cokriging)\ndemo(cosimulation)\n\nand are further illustrated and discussed in Bivand, Pebesma, and Gomez-Rubio (2013).\nIn case the different variables considered are observed at the same set of locations, for instance different air quality parameters, then the statistical gain of using cokriging as opposed to direct (univariable) kriging is often modest, when not negligible. A gain may however be that the prediction is truly multivariable: in addition to the prediction vector \\(\\hat{Z(s_0)}=(\\hat{Z}_1(s_0),...,\\hat{Z}_n(s_0))\\) we get the full covariance matrix of the prediction error (Ver Hoef and Cressie 1993). This means for instance that if we are interested in some linear combination of \\(\\hat{Z}(s_0)\\), such as \\(\\hat{Z}_2(s_0) - \\hat{Z}_1(s_0)\\), that we can get the standard error of that combination because we have the correlations between the prediction errors.\nAlthough sets of direct and cross variograms can be computed and fitted automatically, multivariable geostatistical modelling becomes quickly hard to manage when the number of variables gets large, because the number of direct and cross variograms required is \\(n(n+1)/2\\).\nIn case different variables refer to the same variable take at different time steps, one could use a multivariable (cokriging) prediction approach, but this would not allow for e.g. interpolation between two time steps. For this, and for handling the case of having data observed at many time instances, one can also model its variation as a function of continuous space and time, as of \\(Z(s,t)\\), which we will do in the next section."
  },
  {
    "objectID": "16-Geostatistics.html#spatiotemporal-geostatistics",
    "href": "16-Geostatistics.html#spatiotemporal-geostatistics",
    "title": "13  Multivariate and Spatiotemporal Geostatistics",
    "section": "13.3 Spatiotemporal geostatistics",
    "text": "13.3 Spatiotemporal geostatistics\nSpatiotemporal geostatistical processes are modelled as variables having a value everywhere in space and time, \\(Z(s,t)\\), with \\(s\\) and \\(t\\) the continuously indexed space and time index. Given observations \\(Z(s_i,t_j)\\) and a variogram (covariance) model \\(\\gamma(s,t)\\) we can predict \\(Z(s_0,t_0)\\) at arbitrary space/time locations \\((s_0,t_0)\\) using standard Gaussian process theory.\nSeveral books have been written recently about modern approaches to handling and modelling spatiotemporal geostatistical data, including Wikle, Zammit-Mangion, and Cressie (2019) and Blangiardo and Cameletti (2015). Here, we will use Gräler, Pebesma, and Heuvelink (2016) and give some simple examples using the dataset also used for the previous chapter.\n\nA spatiotemporal variogram model\nStarting with the spatiotemporal matrix of NO\\(_2\\) data in aq constructed at the beginning of this chapter, we will first select the measurements taken at rural background stations:\n\naqx <- aq[ , colnames(aq) %in% a2$station_european_code]\n\nThen we will select the spatial locations for these stations by\n\nsfc <- st_geometry(a2.sf)[match(colnames(aqx),\n                               a2.sf$station_european_code)]\n\nand finally build a stars object with time and station as dimensions:\n\nlibrary(stars)\n# Loading required package: abind\nst_as_stars(NO2 = as.matrix(aqx)) |>\n    st_set_dimensions(names = c(\"time\", \"station\")) |>\n    st_set_dimensions(\"time\", index(aqx)) |>\n    st_set_dimensions(\"station\", sfc) -> no2.st\n\nFrom this, we can compute the spatiotemporal variogram using\n\n\n\n\nlibrary(gstat)\n\n\nv.st <- variogramST(NO2~1, no2.st[,1:(24*31)], tlags = 0:48, \n    cores = getOption(\"mc.cores\", 2))\n\n\n\n\nwhich is shown in Figure 13.2.\n\nv1 <- plot(v.st)\nv2 <- plot(v.st, map = FALSE, legend = list())\nprint(v1, split = c(1,1,2,1), more = TRUE)\nprint(v2, split = c(2,1,2,1), more = FALSE)\n\n\n\n\nFigure 13.2: Spatiotemporal sample variogram for hourly NO\\(_2\\) concentrations at rural background stations in Germany over 2027; in the right-hand side plot color corresponds to time lag.\n\n\n\n\nTo this sample variogram, we can fit a variogram model. One relatively flexible model we try here is the product-sum model (Gräler, Pebesma, and Heuvelink 2016), fitted by\n\n# product-sum\nprodSumModel <- vgmST(\"productSum\",\n    space = vgm(150, \"Exp\", 200, 0),\n    time = vgm(20, \"Sph\", 40, 0),\n    k = 2)\nStAni <- estiStAni(v.st, c(0,200000))\n(fitProdSumModel <- fit.StVariogram(v.st, prodSumModel,\n    fit.method = 7, stAni = StAni, method = \"L-BFGS-B\",\n    control = list(parscale = c(1,10,1,1,0.1,1,10)),\n    lower = rep(0.0001, 7)))\n# space component: \n#   model psill range\n# 1   Nug  26.3     0\n# 2   Exp 140.5   432\n# time component: \n#   model psill range\n# 1   Nug  1.21   0.0\n# 2   Sph 15.99  40.1\n# k: 0.0322469094848839\n\nand shown in Figure 13.3.\n\nplot(v.st, fitProdSumModel, wireframe = FALSE, all = TRUE, scales = list(arrows=FALSE), zlim = c(0,150))\n\n\n\n\nFigure 13.3: Product-sum model, fitted to the spatiotemporal sample variogram\n\n\n\n\nwhich can also be plotted as wireframes, shown in Figure 13.4.\n\nplot(v.st, model = fitProdSumModel, wireframe = TRUE, all = TRUE, \n     scales = list(arrows = FALSE), zlim = c(0, 185))\n\n\n\n\nFigure 13.4: Wireframe plot of the fitted spatiotemporal variogram model\n\n\n\n\nHints about the fitting strategy and alternative models for spatiotemporal variograms are given in Gräler, Pebesma, and Heuvelink (2016).\nWith this fitted model, and given the observations, we can carry out kriging or simulation at arbitrary points in space and time. For instance, we could estimate (or simulate) values in the time series that are now missing: this occurs regularly, and in Section 12.4 we used means over time series based on simply ignoring up to 25% of the observations: substituting these with estimated or simulated values based on neigbouring (in space and time) observations before computing yearly mean values seems a more reasonable approach.\nMore in general, we can estimate at arbitrary locations and time points, and we will illustrate this with predicting time series at particular locations, and and predicting spatial slices (Gräler, Pebesma, and Heuvelink 2016). We can create a stars object for two randomly picked spatial points and all time instances by\n\npt <- st_sample(de, 2)\nt <- st_get_dimension_values(no2.st, 1)\nst_as_stars(list(pts = matrix(1, length(t), length(pt)))) |>\n    st_set_dimensions(names = c(\"time\", \"station\")) |>\n    st_set_dimensions(\"time\", t) |>\n    st_set_dimensions(\"station\", pt) -> new_pt\n\nand we obtain the spatiotemporal predictions at these two points using krigeST by\n\n\n\n\nno2.st <- st_transform(no2.st, crs)\nnew_ts <- krigeST(NO2~1, data = no2.st[\"NO2\"], newdata = new_pt,\n         nmax = 50, stAni = StAni, modelList = fitProdSumModel,\n         progress = FALSE)\n\n\n\n\nwhere the results are shown in Figure 13.5.\n\nplot(as.xts(new_ts[2]))\n\n\n\n\nFigure 13.5: Time series plot of spatiotemporal predictions for two points\n\n\n\n\nAlternatively, we can create spatiotemporal predictions for a set of time-stamped raster maps, evenly spaced over the year 2017, created by\n\ndata(air, package = \"spacetime\") # loads boundaries into DE_NUTS1\nde <- st_transform(st_as_sf(DE_NUTS1), crs)\nst_bbox(de) |>\n  st_as_stars(dx = 10000) |>\n  st_crop(de) -> grd\nd <- dim(grd)\nt4 <- t[(1:4 - 0.5) * (3*24*30)]\nst_as_stars(pts = array(1, c(d[1], d[2], time = length(t4)))) |>\n    st_set_dimensions(\"time\", t4) |>\n    st_set_dimensions(\"x\", st_get_dimension_values(grd, \"x\")) |>\n    st_set_dimensions(\"y\", st_get_dimension_values(grd, \"y\")) |>\n    st_set_crs(crs) -> grd.st\n\nand the subsequent predictions are obtained by\n\n\n\n\nnew_int <- krigeST(NO2~1, data = no2.st[\"NO2\"], newdata = grd.st,\n         nmax = 200, stAni = StAni, modelList = fitProdSumModel,\n         progress = FALSE)\nnames(new_int)[2] = \"NO2\"\n\n\n\n\n\nlibrary(viridis)\n# Loading required package: viridisLite\nlibrary(ggplot2)\ng <- ggplot() + coord_equal() +\n    scale_fill_viridis() +\n    theme_void() +\n    scale_x_discrete(expand=c(0,0)) +\n    scale_y_discrete(expand=c(0,0))\ng + geom_stars(data = new_int, aes(fill = NO2, x = x, y = y)) + \n    facet_wrap(~as.Date(time)) +\n    geom_sf(data = st_cast(de, \"MULTILINESTRING\")) + \n    geom_sf(data = no2.sf, col = 'grey', cex = .5) + \n    coord_sf(lims_method = \"geometry_bbox\")\n# Coordinate system already present. Adding new coordinate system, which will replace the existing one.\n\n\n\n\nFigure 13.6: Spatiotemporal predictions for four selected time slices\n\n\n\n\nand shown in 1.\nA larger value for nmax was needed here to decrease the visible disturbance (sharp edges) caused by discrete neighbourhood selections, which are now done in space and time."
  },
  {
    "objectID": "16-Geostatistics.html#exercises",
    "href": "16-Geostatistics.html#exercises",
    "title": "13  Multivariate and Spatiotemporal Geostatistics",
    "section": "13.4 Exercises",
    "text": "13.4 Exercises\n\nWhich fraction of the stations is removed in Section 13.1 when the criterion applied that a station must be 75% complete?\nFrom the hourly time series in no2.st, compute daily mean concentrations using aggregate, and compute the spatiotemporal variogram of this. How does it compare to the variogram of hourly values?\nCarry out a spatiotemporal interpolation for daily mean values for the days corresponding to those shown in 1, and compare the results.\nFollowing the example in the demo scripts pointed at in Section 13.2, carry out a cokriging on the daily mean station data for the four days shown in\n\n\nWhat are the differences of this approach to spatiotemporal kriging?\n\n\n\n\n\nBivand, Roger S., Edzer Pebesma, and Virgilio Gomez-Rubio. 2013. Applied Spatial Data Analysis with R, Second Edition. Springer, NY. http://www.asdar-book.org/.\n\n\nBlangiardo, Marta, and Michela Cameletti. 2015. Spatial and Spatio-Temporal Bayesian Models with r-INLA. John Wiley & Sons.\n\n\nGräler, Benedikt, Edzer Pebesma, and Gerard Heuvelink. 2016. “Spatio-Temporal Interpolation using gstat.” The R Journal 8 (1): 204–18. https://doi.org/10.32614/RJ-2016-014.\n\n\nVer Hoef, Jay M, and Noel Cressie. 1993. “Multivariable Spatial Prediction.” Mathematical Geology 25 (2): 219–40.\n\n\nWikle, Christopher K, Andrew Zammit-Mangion, and Noel Cressie. 2019. Spatio-Temporal Statistics with r. CRC Press."
  },
  {
    "objectID": "17-Areal.html",
    "href": "17-Areal.html",
    "title": "14  Proximity and Areal Data",
    "section": "",
    "text": "Areal units of observation are very often used when simultaneous observations are aggregated within non-overlapping boundaries. The boundaries may be those of administrative entities, and may be related to underlying spatial processes, such as commuting flows, but are usually arbitrary. If they do not match the underlying and unobserved spatial processes in one or more variables of interest, proximate areal units will contain parts of the underlying processes, engendering spatial autocorrelation. By proximity, we mean closeness in ways that make sense for the data generation processes thought to be involved. In cross-sectional geostatistical analysis with point support, measured distance makes sense for typical data generation processes. In similar analysis of areal data, sharing a border may make more sense, because that is what we do know, but we cannot measure the distance between the areas in as adequate a way.\nBy support of data we mean the physical size (length, area, volume) associated with an individual observational unit (measurement; see (featureattributes?)). It is possible to represent the support of areal data by a point, despite the fact that the data have polygonal support. The centroid of the polygon may be taken as a representative point, or the centroid of the largest polygon in a multi-polygon object. When data with intrinsic point support are treated as areal data, the change of support goes the other way, from the known point to a non-overlapping tessellation such as a Voronoi diagram or Dirichlet tessellation or Thiessen polygons often through a Delaunay triangulation using projected coordinates. Here, different metrics may also be chosen, or distances measured on a network rather than on the plane. There is also a literature using weighted Voronoi diagrams in local spatial analysis (see for example Boots and Okabe 2007; Okabe et al. 2008; She et al. 2015).\nWhen the intrinsic support of the data is represented as points, but the underlying process is between proximate observations rather than driven chiefly by distance however measured between observations, the data may be aggregate counts or totals (polling stations, retail turnover) or represent a directly observed characteristic of the observation (opening hours of the polling station). Obviously, the risk of mis-representing the footprint of the underlying spatial processes remains in all of these cases, not least because the observations are taken as encompassing the entirety of the underlying process in the case of tessellation of the whole area of interest. This is distinct from the geostatistical setting in which observations are rather samples taken using some scheme within the area of interest. It is also partly distinct from the practice of taking areal sample plots within the area of interest but covering only a small proportion of the area, typically used in ecological and environmental research.\nIn order to explore and analyse areal data of these kinds in Chapter 15, -Chapter 15 and -Chapter 16, methods are needed to represent the proximity of observations. This chapter considers a subset of the such methods, where the spatial processes are considered as working through proximity understood in the first instance as contiguity, as a graph linking observations taken as neighbours. This graph is typically undirected and unweighted, but may be directed and/or weighted in certain settings, which then leads to further issues with regard to symmetry. In principle, proximity would be expected to operate symmetrically in space, that is that the influence of \\(i\\) on \\(j\\) and of \\(j\\) on \\(i\\) based on their relative positions should be equivalent. Edge effects are not considered in standard treatments."
  },
  {
    "objectID": "17-Areal.html#representing-proximity-in-spdep",
    "href": "17-Areal.html#representing-proximity-in-spdep",
    "title": "14  Proximity and Areal Data",
    "section": "14.1 Representing proximity in spdep",
    "text": "14.1 Representing proximity in spdep\nHandling spatial autocorrelation using relationships to neighbours on a graph takes the graph as given, chosen by the analyst. This differs from the geostatistical approach in which the analyst chooses the binning of the empirical variogram and function used, and then the way the variogram is fitted. Both involve a priori choices, but represent the underlying correlation in different ways (Wall 2004). In Bavaud (1998) and work citing his contribution, attempts have been made to place graph-based neighbours in a broader context.\nOne issue arising in the creation of objects representing neighbourhood relationships is that of no-neighbour areal units (R. S. Bivand and Portnov 2004). Islands or units separated by rivers may not be recognised as neighbours when the units have areal support and when using topological relationships such as shared boundaries. In some settings, for example mrf (Markov Random Field) terms in mgcv::gam() and similar model fitting functions that require undirected connected graphs, a requirement which is violated when there are disconnected subgraphs.\nNo-neighbour observations can also occur when a distance threshold is used between points, where the threshold is smaller than the maximum nearest neighbour distance. Shared boundary contiguities are not affected by using geographical, unprojected coordinates, but all point-based approaches use distance in one way or another, and need to calculate distances in an appropriate way.\nThe spdep package provides an nb class for neighbours, a list of length equal to the number of observations, with integer vector components. No-neighbours are encoded as an integer vector with a single element 0L, and observations with neighbours as sorted integer vectors containing values in 1L:n pointing to the neighbouring observations. This is a typical row-oriented sparse representation of neighbours. spdep provides many ways of constructing nb objects, and the representation and construction functions are widely used in other packages.\nspdep builds on the nb representation (undirected or directed graphs) with the listw object, a list with three components, an nb object, a matching list of numerical weights, and a single element character vector containing the single letter name of the way in which the weights were calculated. The most frequently used approach in the social sciences is calculating weights by row standardization, so that all the non-zero weights for one observation will be the inverse of the cardinality of its set of neighbours (1/card(nb)[i]).\nWe will be using election data from the 2015 Polish Presidential election in this chapter, with 2495 municipalities and Warsaw boroughs (see Figure 14.1) for a tmap map (Section 9.5) of the municipality types , and complete count data from polling stations aggregated to these areal units. The data are an sf sf object:\n\nlibrary(sf)\n# Linking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.0; sf_use_s2() is TRUE\n\n\ndata(pol_pres15, package = \"spDataLarge\")\npol_pres15 |>\n    subset(select = c(TERYT, name, types)) |>\n    head()\n# Simple feature collection with 6 features and 3 fields\n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: 235000 ymin: 367000 xmax: 281000 ymax: 413000\n# Projected CRS: ETRS89 / Poland CS92\n#    TERYT                name       types\n# 1 020101         BOLESŁAWIEC       Urban\n# 2 020102         BOLESŁAWIEC       Rural\n# 3 020103            GROMADKA       Rural\n# 4 020104        NOWOGRODZIEC Urban/rural\n# 5 020105          OSIECZNICA       Rural\n# 6 020106 WARTA BOLESŁAWIECKA       Rural\n#                         geometry\n# 1 MULTIPOLYGON (((261089 3855...\n# 2 MULTIPOLYGON (((254150 3837...\n# 3 MULTIPOLYGON (((275346 3846...\n# 4 MULTIPOLYGON (((251770 3770...\n# 5 MULTIPOLYGON (((263424 4060...\n# 6 MULTIPOLYGON (((267031 3870...\n\n\nlibrary(tmap, warn.conflicts = FALSE)\ntm_shape(pol_pres15) + tm_fill(\"types\")\n\n\n\n\nFigure 14.1: Polish municipality types 2015\n\n\n\n\nFor safety’s sake, we impose topological validity:\n\nif (!all(st_is_valid(pol_pres15)))\n        pol_pres15 <- st_make_valid(pol_pres15)\n\nBetween early 2002 and April 2019, spdep contained functions for constructing and handling neighbour and spatial weights objects, tests for spatial autocorrelation, and model fitting functions. The latter have been split out into spatialreg, and will be discussed in the next chapter. spdep (R. Bivand 2022) now accommodates objects represented using sf classes and sp classes directly.\n\nlibrary(spdep)"
  },
  {
    "objectID": "17-Areal.html#contiguous-neighbours",
    "href": "17-Areal.html#contiguous-neighbours",
    "title": "14  Proximity and Areal Data",
    "section": "14.2 Contiguous neighbours",
    "text": "14.2 Contiguous neighbours\nThe poly2nb() function in spdep takes the boundary points making up the polygon boundaries in the object passed as the pl= argument, typically an \"sf\" or \"sfc\" object with \"POLYGON\" or \"MULTIPOLYGON\" geometries. For each observation, the function checks whether at least one (queen=TRUE, default), or at least two (rook, queen=FALSE) points are within snap= distance units of each other. The distances are planar in the raw coordinate units, ignoring geographical projections. Once the required number of sufficiently close points is found, the search is stopped.\n\nargs(poly2nb)\n# function (pl, row.names = NULL, snap = sqrt(.Machine$double.eps), \n#     queen = TRUE, useC = TRUE, foundInBox = NULL) \n# NULL\n\nFrom spdep 1.1-7, the GEOS interface of the sf package is used within poly2nb() if foundInBox=NULL to find the candidate neighbours and populate foundInBox internally. In this case, this use of spatial indexing (STRtree queries) in GEOS through sf is the default:\n\nsystem.time(pol_pres15 |> poly2nb(queen = TRUE) -> nb_q)\n#    user  system elapsed \n#   0.848   0.004   0.852\n\nThe foundInBox= argument originally accepted the output of the rgeos gUnarySTRtreeQuery() function to list candidate neighbours, that is polygons whose bounding boxes intersect the bounding boxes of other polygons, but is only retained to support legacy code. The print method shows the summary structure of the neighbour object:\n\nnb_q\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 14242 \n# Percentage nonzero weights: 0.229 \n# Average number of links: 5.71\n\nFrom sf version 1.0-0, the s2 package (Dunnington, Pebesma, and Rubak 2022) is used by default for spherical geometries, as st_intersects() used in poly2nb() passes calculation to s2::s2_intersects_matrix() (see Chapter 4). From spdep version 1.1-9, if sf_use_s2()is TRUE, spherical intersection is used to find candidate neighbours; as with GEOS, the underlying s2 library uses fast spatial indexing.\n\nold_use_s2 <- sf_use_s2()\n\n\nsf_use_s2(TRUE)\n\n\n(pol_pres15 |> st_transform(\"OGC:CRS84\") -> pol_pres15_ll) |> \n    poly2nb(queen = TRUE) -> nb_q_s2\n\nSpherical and planar intersection of the input polygons yield the same contiguity neighbours in this case; in both cases valid input geometries are desirable:\n\nall.equal(nb_q, nb_q_s2, check.attributes=FALSE)\n# [1] TRUE\n\nNote that nb objects record both symmetric neighbour relationships i to j and j to i, because these objects admit asymmetric relationships as well, but these duplications are not needed for object construction.\nMost of the spdep functions for constructing neighbour objects take a row.names= argument, the value of which is stored as a region.id attribute. If not given, the values are taken from row.names() of the first argument. These can be used to check that the neighbours object is in the same order as data. If nb objects are subsetted, the indices change to continue to be within 1:length(subsetted_nb), but the region.id attribute values point back to the object from which it was constructed. This is used in out-of-sample prediction from spatial regression models discussed briefly in Section 16.4.\nWe can also check that this undirected graph is connected using the n.comp.nb() function; while some model estimation techniques do not support graphs that are not connected, it is helpful to be aware of possible problems (Freni-Sterrantino, Ventrucci, and Rue 2018):\n\n(nb_q |> n.comp.nb())$nc\n# [1] 1\n\nThis approach is equivalent to treating the neighbour object as a graph and using graph analysis on that graph (Csardi and Nepusz 2006; file. 2022), by first coercing to a binary sparse matrix (Bates, Maechler, and Jagan 2022):\n\nlibrary(Matrix, warn.conflicts = FALSE)\nlibrary(spatialreg, warn.conflicts = FALSE)\nnb_q |> \n    nb2listw(style = \"B\") |> \n    as(\"CsparseMatrix\") -> smat\nlibrary(igraph, warn.conflicts = FALSE)\n(smat |> graph.adjacency() -> g1) |> \n    count_components()\n# [1] 1\n\nNeighbour objects may be exported and imported in GAL format for exchange with other software, using write.nb.gal() and read.gal():\n\ntf <- tempfile(fileext = \".gal\")\nwrite.nb.gal(nb_q, tf)"
  },
  {
    "objectID": "17-Areal.html#graph-based-neighbours",
    "href": "17-Areal.html#graph-based-neighbours",
    "title": "14  Proximity and Areal Data",
    "section": "14.3 Graph-based neighbours",
    "text": "14.3 Graph-based neighbours\nIf areal units are an appropriate representation, but only points on the plane have been observed, contiguity relationships may be approximated using graph-based neighbours. In this case, the imputed boundaries tessellate the plane such that points closer to one observation than any other fall within its polygon. The simplest form is by using triangulation, here using the deldir() function in the deldir package. Because the function returns from \\(i\\) and to \\(j\\) identifiers, it is easy to construct a long representation of a listw object, as used in the S-Plus SpatialStats module and the sn2listw() function internally to construct an nb object (ragged wide representation). Alternatives such as GEOS often fail to return sufficient information to permit the neighbours to be identified.\nThe output of these functions is then converted to the nb representation using graph2nb(), with the possible use of the sym= argument to coerce to symmetry. We take the centroids of the largest component polygon for each observation as the point representation; population-weighted centroids might have been a better choice if they were available:\n\npol_pres15 |> \n    st_geometry() |> \n    st_centroid(of_largest_polygon = TRUE) -> coords \n(coords |> tri2nb() -> nb_tri)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 14930 \n# Percentage nonzero weights: 0.24 \n# Average number of links: 5.98\n\nThe average number of neighbours is similar to the Queen boundary contiguity case, but if we look at the distribution of edge lengths using nbdists(), we can see that although the upper quartile is about 15 km, the maximum is almost 300 km, an edge along much of one side of the convex hull. The short minimum distance is also of interest, as many centroids of urban municipalities are very close to the centroids of their surrounding rural counterparts.\n\nnb_tri |> \n    nbdists(coords) |> \n    unlist() |> \n    summary()\n#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#     247    9847   12151   13485   14994  296974\n\nTriangulated neighbours also yield a connected graph:\n\n(nb_tri |> n.comp.nb())$nc\n# [1] 1\n\nGraph-based approaches include soi.graph() - discussed here, relativeneigh() and gabrielneigh().\nThe Sphere of Influence soi.graph() function takes triangulated neighbours and prunes off neighbour relationships represented by edges that are unusually long for each point, especially around the convex hull (Avis and Horton 1985).\n\n(nb_tri |> \n        soi.graph(coords) |> \n        graph2nb() -> nb_soi)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 12792 \n# Percentage nonzero weights: 0.205 \n# Average number of links: 5.13\n\nUnpicking the triangulated neighbours does however remove the connected character of the underlying graph:\n\n(nb_soi |> n.comp.nb() -> n_comp)$nc\n# [1] 16\n\nThe algorithm has stripped out longer edges leading to urban and rural municipality pairs where their centroids are very close to each other because the rural ones completely surround the urban, giving 15 pairs of neighbours unconnected to the main graph:\n\ntable(n_comp$comp.id)\n# \n#    1    2    3    4    5    6    7    8    9   10   11   12   13 \n# 2465    2    2    2    2    2    2    2    2    2    2    2    2 \n#   14   15   16 \n#    2    2    2\n\nThe largest length edges along the convex hull have been removed, but “holes” have appeared where the unconnected pairs of neighbours have appeared. The differences between nb_tri and nb_soi are shown in orange in Figure 14.2.\n\nopar <- par(mar = c(0,0,0,0)+0.5)\npol_pres15 |> \n    st_geometry() |> \n    plot(border = \"grey\", lwd = 0.5)\nnb_soi |> \n    plot(coords = coords, add = TRUE, points = FALSE, lwd = 0.5)\nnb_tri |> \n    diffnb(nb_soi) |> \n    plot(coords = coords, col = \"orange\", add = TRUE,\n         points = FALSE, lwd = 0.5)\npar(opar)\n\n\n\n\nFigure 14.2: Triangulated (orange + black) and sphere of influence neighbours (black)"
  },
  {
    "objectID": "17-Areal.html#distance-based-neighbours",
    "href": "17-Areal.html#distance-based-neighbours",
    "title": "14  Proximity and Areal Data",
    "section": "14.4 Distance-based neighbours",
    "text": "14.4 Distance-based neighbours\nDistance-based neighbours can be constructed using dnearneigh(), with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If spherical coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid, or if use_s2=TRUE, the default value if the version of s2 is greater than 1.0.7, using the spheroid (see Chapter 4) If dwithin= is FALSE and the version of s2 is greater than 1.0.7, s2_closest_edges() may be used, if TRUE and use_s2=TRUE, s2_dwithin_matrix() is used; both of these methods use fast spherical spatial indexing, but because s2_closest_edges() takes minumum and maximum bounds, it only needs one pass in the R code of dnearneigh().\nArguments have been added, to use functionality in the dbscan package (Hahsler and Piekenbrock 2022) for finding neighbours using planar spatial indexing in two or three dimensions by default, and not to test the symmetry of the output neighbour object. In addition, three arguments relate to the use of spherical geometry distance measurements.\nThe knearneigh() function for \\(k\\)-nearest neighbours returns a knn object, converted to an nb object using knn2nb(). It can also use great circle distances, not least because nearest neighbours may differ when uprojected coordinates are treated as planar. k= should be a small number. For projected coordinates, the dbscan package is used to compute nearest neighbours more efficiently. Note that nb objects constructed in this way are most unlikely to be symmetric, hence knn2nb() has a sym= argument to permit the imposition of symmetry, which will mean that all units have at least k= neighbours, not that all units will have exactly k= neighbours. When sf_use_s2() is TRUE, knearneigh() will use fast spherical spatial indexing when the input object is of class \"sf\" or \"sfc\".\nThe nbdists() function returns the length of neighbour relationship edges in the units of the coordinates if the coordinates are projected, in km otherwise. In order to set the upper limit for distance bands, one may first find the maximum first nearest neighbour distance, using unlist() to remove the list structure of the returned object. When sf_use_s2() is TRUE, nbdists() will use fast spherical distance calculations when the input object is of class \"sf\" or \"sfc\".\n\ncoords |> \n    knearneigh(k = 1) |> \n    knn2nb() |> \n    nbdists(coords) |> \n    unlist() |> \n    summary()\n#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#     247    6663    8538    8275   10124   17979\n\nHere the largest first nearest neighbour distance is just under 18 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour:\n\nsystem.time(coords |> dnearneigh(0, 18000) -> nb_d18)\n#    user  system elapsed \n#   0.182   0.004   0.186\n\nFor this moderate number of observations, use of spatial indexing does not yield advantages in run times:\n\nsystem.time(coords |> dnearneigh(0, 18000, use_kd_tree = FALSE) ->\n        nb_d18a)\n#    user  system elapsed \n#   0.182   0.000   0.182\n\nand the output objects are the same:\n\nall.equal(nb_d18, nb_d18a, check.attributes = FALSE)\n# [1] TRUE\n\n\nnb_d18\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 20358 \n# Percentage nonzero weights: 0.327 \n# Average number of links: 8.16\n\nHowever, even though there are no no-neighbour observations (their presence is reported by the print method for nb objects), the graph is not connected, as a pair of observations are each others’ only neighbours.\n\n(nb_d18 |> n.comp.nb() -> n_comp)$nc\n# [1] 2\n\n\ntable(n_comp$comp.id)\n# \n#    1    2 \n# 2493    2\n\nAdding 300 m to the threshold gives us a neighbour object with no no-neighbour units, and all units can be reached from all others across the graph.\n\n(coords |> dnearneigh(0, 18300) -> nb_d183)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 21086 \n# Percentage nonzero weights: 0.339 \n# Average number of links: 8.45\n\n\n(nb_d183 |> n.comp.nb())$nc\n# [1] 1\n\nOne characteristic of distance-based neighbours is that more densely settled areas, with units which are smaller in terms of area (Warsaw boroughs are much smaller on average, but have almost 30 neighbours). Having many neighbours smooths the neighbour relationship across more neighbours.\nFor use later, we also construct a neighbour object with no-neighbour units, using a threshold of 16 km:\n\n(coords |> dnearneigh(0, 16000) -> nb_d16)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 15850 \n# Percentage nonzero weights: 0.255 \n# Average number of links: 6.35 \n# 7 regions with no links:\n# 569 1371 1522 2374 2385 2473 2474\n\nIt is possible to control the numbers of neighbours directly using \\(k\\)-nearest neighbours, either accepting asymmetric neighbours:\n\n((coords |> knearneigh(k = 6) -> knn_k6) |> knn2nb() -> nb_k6)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 14970 \n# Percentage nonzero weights: 0.24 \n# Average number of links: 6 \n# Non-symmetric neighbours list\n\nor imposing symmetry:\n\n(knn_k6 |> knn2nb(sym = TRUE) -> nb_k6s)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 16810 \n# Percentage nonzero weights: 0.27 \n# Average number of links: 6.74\n\nHere the size of k= is sufficient to ensure connectedness, although the graph is not planar as edges cross at locations other than nodes, which is not the case for contiguous or graph-based neighbours.\n\n(nb_k6s |> n.comp.nb())$nc\n# [1] 1\n\nIn the case of points on the sphere (see Chapter 4), the output of st_centroid() will differ, so rather than inverse projecting the points, we extract points as geographical coordinates from the inverse projected polygon geometries:\n\nold_use_s2 <- sf_use_s2()\n\n\nsf_use_s2(TRUE)\n\n\npol_pres15_ll |> \n    st_geometry() |> \n    st_centroid(of_largest_polygon = TRUE) -> coords_ll\n\nFor spherical coordinates, distance bounds are in kilometres:\n\n(coords_ll |> dnearneigh(0, 18.3, use_s2=TRUE, dwithin=TRUE) ->\n        nb_d183_ll)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 21140 \n# Percentage nonzero weights: 0.34 \n# Average number of links: 8.47\n\nThese neighbours differ from the spherical 18.3 kilometre neighbours as would be expected:\n\nisTRUE(all.equal(nb_d183, nb_d183_ll, check.attributes = FALSE))\n# [1] FALSE\n\nIf s2 providing faster distance neighbour indexing is available, by default s2_closest_edges() will be used for geographical coordinates:\n\n(coords_ll |> dnearneigh(0, 18.3) -> nb_d183_llce)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 21140 \n# Percentage nonzero weights: 0.34 \n# Average number of links: 8.47\n\nwhere the two s2-based neighbour objects are the same:\n\nisTRUE(all.equal(nb_d183_llce, nb_d183_ll,\n                 check.attributes = FALSE))\n# [1] TRUE\n\nFast spherical spatial indexing in s2 is used to find \\(k\\) nearest neighbours:\n\n(coords_ll |> knearneigh(k = 6) |> knn2nb() -> nb_k6_ll)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 14970 \n# Percentage nonzero weights: 0.24 \n# Average number of links: 6 \n# Non-symmetric neighbours list\n\nThese neighbours differ from the planar k=6 nearest neighbours as would be expected, but will also differ slightly from legacy brute-force ellipsoid distances:\n\nisTRUE(all.equal(nb_k6, nb_k6_ll, check.attributes = FALSE))\n# [1] FALSE\n\nThe nbdists() function also uses s2 to find distances on the sphere when the \"sf\" or \"sfc\"input object is in geographical coordinates (distances returned in kilometres):\n\nnb_q |> nbdists(coords_ll) |> unlist() |> summary()\n#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#     0.2     9.8    12.2    12.6    15.1    33.0\n\nThese differ a little for the same weights object when planar coordinates are used (distances returned in the metric of the points for planar geometries and kilometres for ellipsoidal and spherical geometries):\n\nnb_q |> nbdists(coords) |> unlist() |> summary()\n#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#     247    9822   12173   12651   15117   33102\n\n\nsf_use_s2(old_use_s2)"
  },
  {
    "objectID": "17-Areal.html#weights-specification",
    "href": "17-Areal.html#weights-specification",
    "title": "14  Proximity and Areal Data",
    "section": "14.5 Weights specification",
    "text": "14.5 Weights specification\nOnce neighbour objects are available, further choices need to made in specifying the weights objects. The nb2listw() function is used to create a listw weights object with an nb object, a matching list of weights vectors, and a style specification. Because handling no-neighbour observations now begins to matter, the zero.policy= argument is introduced. By default, this is FALSE, indicating that no-neighbour observations will cause an error, as the spatially lagged value for an observation with no neighbours is not available. By convention, zero is substituted for the lagged value, as the cross product of a vector of zero-valued weights and a data vector, hence the name of zero.policy.\n\nargs(nb2listw)\n# function (neighbours, glist = NULL, style = \"W\", zero.policy = NULL) \n# NULL\n\nWe will be using the helper function spweights.constants() below to show some consequences of varying style choices. It returns constants for a listw object, \\(n\\) is the number of observations, n1 to n3 are \\(n-1, \\ldots\\), nn is \\(n^2\\) and \\(S_0\\), \\(S_1\\) and \\(S_2\\) are constants, \\(S_0\\) being the sum of the weights. There is a full discussion of the constants in Bivand and Wong (2018).\n\nargs(spweights.constants)\n# function (listw, zero.policy = NULL, adjust.n = TRUE) \n# NULL\n\nThe \"B\" binary style gives a weight of unity to each neighbour relationship, and typically upweights units with no boundaries on the edge of the study area, so having a higher count of neighbours.\n\n(nb_q |> \n        nb2listw(style = \"B\") -> lw_q_B) |> \n    spweights.constants() |> \n    data.frame() |> \n    subset(select = c(n, S0, S1, S2))\n#      n    S0    S1     S2\n# 1 2495 14242 28484 357280\n\nThe \"W\" row-standardized style upweights units around the edge of the study area that necessarily have fewer neighbours. This style first gives a weight of unity to each neighbour relationship, then divides these weights by the per unit sums of weights. Naturally this leads to division by zero where there are no neighbours, a not-a-number result, unless the chosen policy is to permit no-neighbour observations. We can see that \\(S_0\\) is now equal to \\(n\\).\n\n(nb_q |> \n        nb2listw(style = \"W\") -> lw_q_W) |> \n    spweights.constants() |> \n    data.frame() |> \n    subset(select = c(n, S0, S1, S2))\n#      n   S0  S1    S2\n# 1 2495 2495 958 10406\n\nInverse distance weights are used in a number of scientific fields. Some use dense inverse distance matrices, but many of the inverse distances are close to zero, so have little practical contribution, especially as the spatial process matrix is itself dense. Inverse distance weights may be constructed by taking the lengths of edges, changing units to avoid most weights being too large or small (here from m to km), taking the inverse, and passing through the glist= argument to nb2listw():\n\nnb_d183 |> \n    nbdists(coords) |> \n    lapply(function(x) 1/(x/1000)) -> gwts\n(nb_d183 |> nb2listw(glist=gwts, style=\"B\") -> lw_d183_idw_B) |> \n    spweights.constants() |> \n    data.frame() |> \n    subset(select=c(n, S0, S1, S2))\n#      n   S0  S1   S2\n# 1 2495 1841 534 7265\n\nNo-neighbour handling is by default to prevent the construction of a weights object, making the analyst take a position on how to proceed.\n\ntry(nb_d16 |> nb2listw(style=\"B\") -> lw_d16_B)\n# Error in nb2listw(nb_d16, style = \"B\") : Empty neighbour sets found\n\nUse can be made of the zero.policy= argument to many functions used with nb and listw objects.\n\nnb_d16 |> \n    nb2listw(style=\"B\", zero.policy=TRUE) |> \n    spweights.constants(zero.policy=TRUE) |> \n    data.frame() |> \n    subset(select=c(n, S0, S1, S2))\n#      n    S0    S1     S2\n# 1 2488 15850 31700 506480\n\nNote that by default the adjust.n= argument to spweights.constants() is set by default to TRUE, subtracting the count of no-neighbour observations from the observation count, so \\(n\\) is smaller with possible consequences for inference. The complete count can be retrieved by changing the argument."
  },
  {
    "objectID": "17-Areal.html#higher-order-neighbours",
    "href": "17-Areal.html#higher-order-neighbours",
    "title": "14  Proximity and Areal Data",
    "section": "14.6 Higher order neighbours",
    "text": "14.6 Higher order neighbours\nWe recall the characteristics of the neighbour object based on Queen contiguities:\n\nnb_q\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 14242 \n# Percentage nonzero weights: 0.229 \n# Average number of links: 5.71\n\nIf we wish to create an object showing \\(i\\) to \\(k\\) neighbours, where \\(i\\) is a neighbour of \\(j\\), and \\(j\\) in turn is a neighbour of \\(k\\), so taking two steps on the neighbour graph, we can use nblag(), which automatically removes \\(i\\) to \\(i\\) self-neighbours:\n\n(nb_q |> nblag(2) -> nb_q2)[[2]]\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 32930 \n# Percentage nonzero weights: 0.529 \n# Average number of links: 13.2\n\nThe nblag_cumul() function cumulates the list of neighbours for the whole list of lags:\n\nnblag_cumul(nb_q2)\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 47172 \n# Percentage nonzero weights: 0.758 \n# Average number of links: 18.9\n\nwhile the set operation union.nb() takes two objects, giving here the same outcome:\n\nunion.nb(nb_q2[[2]], nb_q2[[1]])\n# Neighbour list object:\n# Number of regions: 2495 \n# Number of nonzero links: 47172 \n# Percentage nonzero weights: 0.758 \n# Average number of links: 18.9\n\nReturning to the graph representation of the same neighbour object, we can ask how many steps might be needed to traverse the graph:\n\ndiameter(g1)\n# [1] 52\n\nWe step out from each observation across the graph to establish the number of steps needed to reach each other observation by the shortest path, once again finding the same count, and that the municipality is called Lutowiska, close to the Ukrainian border in the far south east of the country.\n\ng1 |> shortest.paths() -> sps\n(sps |> apply(2, max) -> spmax) |> max()\n# [1] 52\n\n\nmr <- which.max(spmax)\npol_pres15$name0[mr]\n# [1] \"Lutowiska\"\n\n\npol_pres15$sps1 <- sps[,mr]\ntm1 <- tm_shape(pol_pres15) +\n        tm_fill(\"sps1\", title = \"Shortest path\\ncount\")\n\n\ncoords[mr] |> \n    st_distance(coords) |> \n    c() |> \n    (function(x) x/1000)() |> \n    units::set_units(NULL) -> pol_pres15$dist_52\nlibrary(ggplot2)\ng1 <- ggplot(pol_pres15, aes(x = sps1, y = dist_52)) +\n        geom_point() +\n        xlab(\"Shortest path count\") +\n        ylab(\"km distance\")\n\nFigure 14.3 shows that contiguity neighbours represent the same kinds of relationships with other observations as distance. Some approaches prefer distance neighbours on the basis that, for example, inverse distance neighbours show clearly how all observations are related to each other. However, the development of tests for spatial autocorrelation and spatial regression models has involved the inverse of a spatial process model, which in turn can be represented as the sum of a power series of the product of a coefficient and a spatial weights matrix, so intrinsically acknowledging the relationships of all observations with all other. Sparse contiguity neighbour objects accommodate rich dependency structures without the need to make the structures explicit.\n\ngridExtra::grid.arrange(tmap_grob(tm1), g1, nrow=1)\n\n\n\n\nFigure 14.3: Relationship of shortest paths to distance for Lutowiska; left panel: shortest path counts from Lutowiska; right panel: plot of shortest paths from Lutowiska to other observations and distances (km) from Lutowiska to other observations"
  },
  {
    "objectID": "17-Areal.html#exercises",
    "href": "17-Areal.html#exercises",
    "title": "14  Proximity and Areal Data",
    "section": "14.7 Exercises",
    "text": "14.7 Exercises\n\nWhich kinds of geometry support are appropriate for which functions creating neighbour objects?\nWhich functions creating neighbour objects are only appropriate for planar representations?\nWhat difference might the choice of rook rather than queen contiguities make on a chessboard?\nWhat are the relationships between neighbour set cardinalities (neighbour counts) and row-standardized weights, and how do they open analyses up to edge effects? Use the chessboard you constructed in exercise 3 for both rook and queen neighbours."
  },
  {
    "objectID": "17-Areal.html#measures-and-process-mis-specification",
    "href": "17-Areal.html#measures-and-process-mis-specification",
    "title": "14  Proximity and Areal Data",
    "section": "15.1 Measures and process mis-specification",
    "text": "15.1 Measures and process mis-specification\nIt is not and has never been the case that Tobler’s first law of geography: “Everything is related to everything else, but near things are more related than distant things” always holds absolutely. This is and has always been an oversimplification, disguising possible underlying entitation, support and other mis-specification problems. Are the units of observation appropriate for the scale of the underlying spatial process? Could the spatial patterning of the variable of interest for the chosen entitation be accounted for by another variable?\nTobler (1970) was published in the same special issue of Economic Geography as Olsson (1970), but Olsson does grasp the important point that spatial autocorrelation is not inherent in spatial phenomena, but often is engendered by inappropriate entitation, by omitted variables and/or inappropriate functional form. The key quote from Olsson is on p. 228:\n\nThe existence of such autocorrelations makes it tempting to agree with Tobler (1970, 236 [the original refers to the pagination of a conference paper]) that ‘everything is related to everything else, but near things are more related than distant things.’ On the other hand, the fact that the autocorrelations seem to hide systematic specification errors suggests that the elevation of this statement to the status of ‘the first law of geography’ is at best premature. At worst, the statement may represent the spatial variant of the post hoc fallacy, which would mean that coincidence has been mistaken for a causal relation.\n\nThe status of the “first law” is very similar to the belief that John Snow induced the cause of cholera as water-borne from a map. It may be a good way of selling GIS, but it is inaccurate; Snow had a strong working hypothesis prior to visiting Soho, and the map was prepared after the Broad street pump was disabled as documentation that his hypothesis held (Brody et al. 2000).\nMeasures of spatial autocorrelation unfortunately pick up other mis-specifications in the way that we model data (Schabenberger and Gotway 2005; McMillen 2003). For reference, Moran’s \\(I\\) is given as (Cliff and Ord 1981, 17):\n\\[\nI = \\frac{n \\sum_{(2)} w_{ij} z_i z_j}{S_0 \\sum_{i=1}^{n} z_i^2}\n\\]\nwhere \\(x_i, i=1, \\ldots, n\\) are \\(n\\) observations on the numeric variable of interest, \\(z_i = x_i - \\bar{x}\\), \\(\\bar{x} = \\sum_{i=1}^{n} x_i / n\\), \\(\\sum_{(2)} = \\stackrel{\\sum_{i=1}^{n} \\sum_{j=1}^{n}}{i \\neq j}\\), \\(w_{ij}\\) are the spatial weights, and \\(S_0 = \\sum_{(2)} w_{ij}\\). First we test a random variable using the Moran test, here under the normality assumption (argument randomisation=FALSE, default TRUE). Inference is made on the statistic \\(Z(I) = \\frac{I - E(I)}{\\sqrt{\\mathrm{Var}(I)}}\\), the z-value compared with the Normal distribution for \\(E(I)\\) and \\(\\mathrm{Var}(I)\\) for the chosen assumptions; this x does not show spatial autocorrelation with these spatial weights:\n\nglance_htest <- function(ht) c(ht$estimate, \n    \"Std deviate\" = unname(ht$statistic), \n    \"p.value\" = unname(ht$p.value))\nset.seed(1)\n(pol_pres15 |> \n        nrow() |> \n        rnorm() -> x) |> \n    moran.test(lw_q_B, randomisation = FALSE,\n               alternative = \"two.sided\") |> \n    glance_htest()\n# Moran I statistic       Expectation          Variance \n#         -0.004772         -0.000401          0.000140 \n#       Std deviate           p.value \n#         -0.369320          0.711889\n\nThe test however detects quite strong positive spatial autocorrelation when we insert a gentle trend into the data, but omit to include it in the mean model, thus creating a missing variable problem but finding spatial autocorrelation instead:\n\nbeta <- 0.0015\ncoords |> \n    st_coordinates() |> \n    subset(select = 1, drop = TRUE) |> \n    (function(x) x/1000)() -> t\n(x + beta * t -> x_t) |> \n    moran.test(lw_q_B, randomisation = FALSE,\n               alternative = \"two.sided\") |> \n    glance_htest()\n# Moran I statistic       Expectation          Variance \n#          0.043403         -0.000401          0.000140 \n#       Std deviate           p.value \n#          3.701491          0.000214\n\nIf we test the residuals of a linear model including the trend, the apparent spatial autocorrelation disappears:\n\nlm(x_t ~ t) |> \n    lm.morantest(lw_q_B, alternative = \"two.sided\") |> \n    glance_htest()\n# Observed Moran I      Expectation         Variance \n#        -0.004777        -0.000789         0.000140 \n#      Std deviate          p.value \n#        -0.337306         0.735886\n\nA comparison of implementations of measures of spatial autocorrelation shows that a wide range of measures is available in R in a number of packages, chiefly in the spdep package (R. Bivand 2022), and that differences from other implementations can be attributed to design decisions (Roger S. Bivand and Wong 2018). The spdep package also includes the only implementations of exact and saddlepoint approximations to global and local Moran’s I for regression residuals (Tiefelsdorf 2002; R. S. Bivand, Müller, and Reder 2009)."
  },
  {
    "objectID": "17-Areal.html#global-measures",
    "href": "17-Areal.html#global-measures",
    "title": "14  Proximity and Areal Data",
    "section": "15.2 Global measures",
    "text": "15.2 Global measures\nGlobal measures consider the average level of spatial autocorrelation across all observations; they can of course be biassed (as most spatial statistics) by edge effects where important spatial process components fall outside the study area.\n\nJoin-count tests for categorical data\nWe will begin by examining join count statistics, where joincount.test() takes a \"factor\" vector of values fx= and a listw object, and returns a list of htest (hypothesis test) objects defined in the stats package, one htest object for each level of the fx= argument. The observed counts are of neighbours with the same factor levels, known as same-colour joins.\n\nargs(joincount.test)\n# function (fx, listw, zero.policy = NULL, alternative = \"greater\", \n#     sampling = \"nonfree\", spChk = NULL, adjust.n = TRUE) \n# NULL\n\nThe function takes an alternative= argument for hypothesis testing, a sampling= argument showing the basis for the construction of the variance of the measure, where the default \"nonfree\" choice corresponds to analytical permutation; the spChk= argument is retained for backward compatibility. For reference, the counts of factor levels for the type of municipality or Warsaw borough are:\n\n(pol_pres15 |> \n        st_drop_geometry() |> \n        subset(select = types, drop = TRUE) -> Types) |> \n    table()\n# \n#          Rural          Urban    Urban/rural Warsaw Borough \n#           1563            303            611             18\n\nSince there are four levels, we re-arrange the list of htest objects to give a matrix of estimated results. The observed same-colour join counts are tabulated with their expectations based on the counts of levels of the input factor, so that few joins would be expected between for example Warsaw boroughs, because there are very few of them. The variance calculation uses the underlying constants of the chosen listw object and the counts of levels of the input factor. The z-value is obtained in the usual way by dividing the difference between the observed and expected join counts by the square root of the variance.\nThe join count test was subsequently adapted for multi-colour join counts (Upton and Fingleton 1985). The implementation as joincount.mult() in spdep returns a table based on nonfree sampling, and does not report p-values.\n\nTypes |> joincount.multi(listw = lw_q_B)\n#                               Joincount Expected Variance z-value\n# Rural:Rural                    3087.000 2793.920 1126.534    8.73\n# Urban:Urban                     110.000  104.719   93.299    0.55\n# Urban/rural:Urban/rural         656.000  426.526  331.759   12.60\n# Warsaw Borough:Warsaw Borough    41.000    0.350    0.347   68.96\n# Urban:Rural                     668.000 1083.941  708.209  -15.63\n# Urban/rural:Rural              2359.000 2185.769 1267.131    4.87\n# Urban/rural:Urban               171.000  423.729  352.190  -13.47\n# Warsaw Borough:Rural             12.000   64.393   46.460   -7.69\n# Warsaw Borough:Urban              9.000   12.483   11.758   -1.02\n# Warsaw Borough:Urban/rural        8.000   25.172   22.354   -3.63\n# Jtot                           3227.000 3795.486 1496.398  -14.70\n\nSo far, we have used binary weights, so the sum of join counts multiplied by the weight on that join remains integer. If we change to row standardised weights, where the weights are almost always fractions of 1, the counts, expectations and variances change, but there are few major changes in the z-values.\nUsing an inverse distance based listw object does, however, change the z-values markedly, because closer centroids are upweighted relatively strongly:\n\nTypes |> joincount.multi(listw = lw_d183_idw_B)\n#                               Joincount Expected Variance z-value\n# Rural:Rural                    3.46e+02 3.61e+02 4.93e+01   -2.10\n# Urban:Urban                    2.90e+01 1.35e+01 2.23e+00   10.39\n# Urban/rural:Urban/rural        4.65e+01 5.51e+01 9.61e+00   -2.79\n# Warsaw Borough:Warsaw Borough  1.68e+01 4.53e-02 6.61e-03  206.38\n# Urban:Rural                    2.02e+02 1.40e+02 2.36e+01   12.73\n# Urban/rural:Rural              2.25e+02 2.83e+02 3.59e+01   -9.59\n# Urban/rural:Urban              3.65e+01 5.48e+01 8.86e+00   -6.14\n# Warsaw Borough:Rural           5.65e+00 8.33e+00 1.73e+00   -2.04\n# Warsaw Borough:Urban           9.18e+00 1.61e+00 2.54e-01   15.01\n# Warsaw Borough:Urban/rural     3.27e+00 3.25e+00 5.52e-01    0.02\n# Jtot                           4.82e+02 4.91e+02 4.16e+01   -1.38\n\n\n\nMoran’s \\(I\\)\nThe implementation of Moran’s \\(I\\) in spdep in the moran.test() function has similar arguments to those of joincount.test(), but sampling= is replaced by randomisation= to indicate the underlying analytical approach used for calculating the variance of the measure. It is also possible to use ranks rather than numerical values (Cliff and Ord 1981, 46). The drop.EI2= argument may be used to reproduce results where the final component of the variance term is omitted as found in some legacy software implementations.\n\nargs(moran.test)\n# function (x, listw, randomisation = TRUE, zero.policy = NULL, \n#     alternative = \"greater\", rank = FALSE, na.action = na.fail, \n#     spChk = NULL, adjust.n = TRUE, drop.EI2 = FALSE) \n# NULL\n\nThe default for the randomisation= argument is TRUE, but here we will simply show that the test under normality is the same as a test of least squares residuals with only the intercept used in the mean model; the analysed variable is first round turnout proportion of registered voters in municipalities and Warsaw boroughs in the 2015 Polish presidential election. The spelling of randomisation is that of Cliff and Ord (1973).\n\npol_pres15 |> \n        st_drop_geometry() |> \n        subset(select = I_turnout, drop = TRUE) -> I_turnout\n\n\nI_turnout |> moran.test(listw = lw_q_B, randomisation = FALSE) |> \n    glance_htest()\n# Moran I statistic       Expectation          Variance \n#          0.691434         -0.000401          0.000140 \n#       Std deviate           p.value \n#         58.461349          0.000000\n\nThe lm.morantest() function also takes a resfun= argument to set the function used to extract the residuals used for testing, and clearly lets us model other salient features of the response variable (Cliff and Ord 1981, 203). To compare with the standard test, we are only using the intercept here and, as can be seen, the results are the same.\n\nlm(I_turnout ~ 1, pol_pres15) |> \n    lm.morantest(listw = lw_q_B) |> \n    glance_htest()\n# Observed Moran I      Expectation         Variance \n#         0.691434        -0.000401         0.000140 \n#      Std deviate          p.value \n#        58.461349         0.000000\n\nThe only difference between tests under normality and randomisation is that an extra term is added if the kurtosis of the variable of interest indicates a flatter or more peaked distribution, where the measure used is the classical measure of kurtosis. Under the default randomisation assumption of analytical randomisation, the results are largely unchanged.\n\n(I_turnout |> \n    moran.test(listw = lw_q_B) -> mtr) |> \n    glance_htest()\n# Moran I statistic       Expectation          Variance \n#          0.691434         -0.000401          0.000140 \n#       Std deviate           p.value \n#         58.459835          0.000000\n\nFrom the very beginning in the early 1970s, interest was shown in Monte Carlo tests, also known as Hope-type tests and as permutation bootstrap. By default, moran.mc() returns a \"htest\" object, but may simply use boot::boot() internally and return a \"boot\" object when return_boot=TRUE. In addition the number of simulations needs to be given as nsim=; that is the number of times the values of the observations are shuffled at random.\n\nset.seed(1)\nI_turnout |> \n    moran.mc(listw = lw_q_B, nsim = 999, return_boot = TRUE) -> mmc\n\nThe bootstrap permutation retains the outcomes of each of the random permutations, reporting the observed value of the statistic, here Moran’s \\(I\\), the difference between this value and the mean of the simulations under randomisation (equivalent to \\(E(I)\\)), and the standard deviation of the simulations under randomisation.\nIf we compare the Monte Carlo and analytical variances of \\(I\\) under randomisation, we typically see few differences, arguably rendering Monte Carlo testing unnecessary.\n\nc(\"Permutation bootstrap\" = var(mmc$t), \n  \"Analytical randomisation\" = unname(mtr$estimate[3]))\n#    Permutation bootstrap Analytical randomisation \n#                 0.000144                 0.000140\n\nGeary’s global \\(C\\) is implemented in geary.test() largely following the same argument structure as moran.test(). The Getis-Ord \\(G\\) test includes extra arguments to accommodate differences between implementations, as Bivand and Wong (2018) found multiple divergences from the original definitions, often to omit no-neighbour observations generated when using distance band neighbours. It is given by (Getis and Ord 1992, 194). For \\(G^*\\), the \\(\\sum_{(2)}\\) constraint is relaxed by including \\(i\\) as a neighbour of itself (thereby also removing the no-neighbour problem, because all observations have at least one neighbour).\nFinally, the empirical Bayes Moran’s \\(I\\) takes account of the denominator in assessing spatial autocorrelation in rates data (Assunção and Reis 1999). Until now, we have considered the proportion of valid votes cast in relation to the numbers entitled to vote by spatial entity, but using EBImoran.mc() we can try to accommodate uncertainty in extreme rates in entities with small numbers entitled to vote. There is, however, little impact on the outcome in this case.\nGlobal measures of spatial autocorrelation using spatial weights objects based on graphs of neighbours are, as we have seen, rather blunt tools, which for interpretation depend critically on a reasoned mean model of the variable in question. If the mean model is just the intercept, the global measures will respond to all kinds of mis-specification, not only spatial autocorrelation. The choice of entities for aggregation of data will typically be a key source of mis-specification."
  },
  {
    "objectID": "17-Areal.html#local-measures",
    "href": "17-Areal.html#local-measures",
    "title": "14  Proximity and Areal Data",
    "section": "15.3 Local measures",
    "text": "15.3 Local measures\nBuilding on insights from the weaknesses of global measures, local indicators of spatial association began to appear in the first half of the 1990s (L. Anselin 1995; Getis and Ord 1992, 1996).\nIn addition, the Moran plot was introduced, plotting the values of the variable of interest against their spatially lagged values, typically using row-standardised weights to make the axes more directly comparable (L. Anselin 1996). The moran.plot() function also returns an influence measures object used to label observations exerting more than proportional influence on the slope of the line representing global Moran’s \\(I\\). In Figure 15.1), we can see that there are many spatial entities exerting such influence. These pairs of observed and lagged observed values make up in aggregate the global measure, but can also be explored in detail. The quadrants of the Moran plot also show low-low pairs in the lower left quadrant, high-high in the upper right quadrant, and fewer low-high and high-low pairs in the upper left and lower right quadrants. In moran.plot(, the quadrants are split on the means of the variable and its spatial lag; alternative splits are on zero for the centred variable and the spatial lag of the centred variable.\n\nI_turnout |> \n    moran.plot(listw = lw_q_W, labels = pol_pres15$TERYT, cex = 1, \n               pch = \".\", xlab = \"I round turnout\", \n               ylab = \"lagged turnout\") -> infl_W\n\n\n\n\nFigure 15.1: Moran plot of I round turnout, row standardised weights\n\n\n\n\nIf we extract the hat value influence measure from the returned object, Figure 15.2) suggests that some edge entities exert more than proportional influence (perhaps because of row standardisation , as do entities in or near larger urban areas.\n\npol_pres15$hat_value <- infl_W$hat\ntm_shape(pol_pres15) + tm_fill(\"hat_value\")\n\n\n\n\nFigure 15.2: Moran plot hat values, row standardised neighbours\n\n\n\n\n\nLocal Moran’s \\(I_i\\)\nBivand and Wong (2018) discuss issues impacting the use of local indicators, such as local Moran’s \\(I_i\\) and local Getis-Ord \\(G_i\\). Some issues affect the calculation of the local indicators, others inference from their values. Because \\(n\\) statistics may be being calculated from the same number of observations, there are multiple comparison problems that need to be addressed. Caldas de Castro and Singer (2006) conclude, based on a typical data set and a simulation exercise, that the false discovery rate (FDR) adjustment of probability values will certainly give a better picture of interesting clusters than no adjustment. Following this up, Luc Anselin (2019) explores the combination of FDR adjustments with the use of redefined “significance” cutoffs (Benjamin et al. 2018), for example \\(0.01\\), \\(0.005\\) and \\(0.001\\) instead of \\(0.1\\), \\(0.05\\) and \\(0.01\\); the use of the term interesting rather than significant is also preferred. As in the global case, miss-specification remains a source of confusion, and, further, interpreting local spatial autocorrelation in the presence of global spatial autocorrelation is challenging (Ord and Getis 2001; Tiefelsdorf 2002; R. S. Bivand, Müller, and Reder 2009).\n\nargs(localmoran)\n# function (x, listw, zero.policy = NULL, na.action = na.fail, \n#     conditional = TRUE, alternative = \"two.sided\", mlvar = TRUE, \n#     spChk = NULL, adjust.x = FALSE) \n# NULL\n\nIn an important clarification, Sauer et al. (2021) show that the comparison of standard deviates for local Moran’s \\(I_i\\) based on analytical formulae and conditional permutation in Roger S. Bivand and Wong (2018) was based on a misunderstanding. Sokal, Oden, and Thomson (1998) provide alternative analytical formulae for standard deviates of local Moran’s \\(I_i\\) based either on total or conditional permutation, but the analytical formulae used in Roger S. Bivand and Wong (2018), based on earlier practice, only use total permutation, and consequently do not match the simulation conditional permutations. Thanks to a timely pull request, localmoran() now has a conditional= argument (default TRUE) using alternative formulae from the appendix of Sokal, Oden, and Thomson (1998). The mlvar= and adjust.x= arguments to localmoran() are discussed in Roger S. Bivand and Wong (2018), and permit matching with other implementations. Taking \"two.sided\" probability values (the default), we obtain:\n\nI_turnout |> \n    localmoran(listw = lw_q_W) -> locm\n\nThe \\(I_i\\) local indicators when summed and divided by the sum of the spatial weights equal global Moran’s \\(I\\), showing the possible presence of positive and negative local spatial autocorrelation:\n\nall.equal(sum(locm[,1])/Szero(lw_q_W), \n          unname(moran.test(I_turnout, lw_q_W)$estimate[1]))\n# [1] TRUE\n\nUsing stats::p.adjust() to adjust for multiple comparisons, we see that over 15% of the 2495 local measures have p-values < 0.005 if no adjustment is applied, but only 1.5% using Bonferroni adjustment to control the familywise error rate, with two other choices shown: \"fdr\" is the Benjamini and Hochberg (1995) false discovery rate (almost 6%) and \"BY\" (Benjamini and Yekutieli 2001), another false discovery rate adjustment (about 2.5%):\n\npva <- function(pv) cbind(\"none\" = pv, \"FDR\" = p.adjust(pv, \"fdr\"),\n    \"BY\" = p.adjust(pv, \"BY\"),\n    \"Bonferroni\" = p.adjust(pv, \"bonferroni\"))\nlocm |> \n    subset(select = \"Pr(z != E(Ii))\", drop = TRUE) |> \n    pva() -> pvsp\nf <- function(x) sum(x < 0.005)\napply(pvsp, 2, f)\n#       none        FDR         BY Bonferroni \n#        385        149         64         38\n\nIn the global measure case, bootstrap permutations may be used as an alternative to analytical methods for possible inference, where both the theoretical development of the analytical variance of the measure, and the permutation scheme, shuffle all of the observed values. In the local case, conditional permutation should be used, fixing the value at observation \\(i\\) and randomly sampling from the remaining \\(n-1\\) values to find randomised values at neighbours, and is provided as localmoran_perm(), which may use multiple compute nodes to sample in parallel if provided, and permits the setting of a seed for the random number generator across the compute nodes. The number of simulations nsim= also controls the precision of the ranked estimates of the probability value based on the rank of observed \\(I_i\\) among the simulated values:\n\nlibrary(parallel)\ninvisible(spdep::set.coresOption(ifelse(detectCores() == 1, 1,\n                                        detectCores() - 1L)))\nsystem.time(I_turnout |> \n        localmoran_perm(listw = lw_q_W, nsim = 9999, iseed = 1) ->\n                locm_p)\n#    user  system elapsed \n#   150.3   292.3    66.9\n\nThe outcome is that over 15% of observations have two sided p-values < 0.005 without multiple comparison adjustment, and about 1.5% with Bonferroni adjustment, when the p-values are calculated using the standard deviate of the permutation samples and the normal distribution.\n\nlocm_p |> \n    subset(select = \"Pr(z != E(Ii))\", drop = TRUE) |> \n    pva() -> pvsp\napply(pvsp, 2, f)\n#       none        FDR         BY Bonferroni \n#        379        149         63         40\n\nSince the variable under analysis may not be normally distributed, the p-values can also be calculated by finding the rank of the observed \\(I_i\\) among the rank-based simulated values, and looking up the probability value from the uniform distribution taking the alternative= choice into account:\n\nlocm_p |> \n    subset(select = \"Pr(z != E(Ii)) Sim\", drop = TRUE) |> \n    pva() -> pvsp\napply(pvsp, 2, f)\n#       none        FDR         BY Bonferroni \n#        394        125          0          0\n\nNow the \"BY\" and Bonferroni counts of interesting locations are zero with 9999 samples, but may be recovered by increasing the sample count to 999999 if required; the FDR adjustment and interesting cutoff 0.005 yields about 5% locations.\n\npol_pres15$locm_pv <- p.adjust(locm[, \"Pr(z != E(Ii))\"], \"fdr\")\npol_pres15$locm_std_pv <- p.adjust(locm_p[, \"Pr(z != E(Ii))\"], \n                                   \"fdr\")\npol_pres15$locm_p_pv <- p.adjust(locm_p[, \"Pr(z != E(Ii)) Sim\"],\n                                 \"fdr\")\ntm_shape(pol_pres15) +\n        tm_fill(c(\"locm_pv\", \"locm_std_pv\", \"locm_p_pv\"), \n                breaks=c(0, 0.0005, 0.001, 0.005, 0.01, \n                         0.05, 0.1, 0.2, 0.5, 0.75, 1), \n                title = \"Pseudo p-values\\nLocal Moran's I\",\n                palette=\"-YlOrBr\") +\n    tm_facets(free.scales = FALSE, ncol = 2) +\n    tm_layout(panel.labels = c(\"Analytical conditional\",\n                               \"Permutation std. dev.\",\n                               \"Permutation rank\"))\n\n\n\n\nFigure 15.3: Local Moran’s I FDR probability values: left panel upper: analytical conditional p-values; right upper panel: permutation standard deviate conditional p-values; left lower panel: permutation rank conditional p-values, first round turnout, row-standardised neighbours\n\n\n\n\nProceeding using the FDR adjustment and an interesting location cutoff of \\(0.005\\), we can see from Figure 15.3 that the adjusted probability values for the analytical conditional approach, the approach using the moments of the sampled values from permutation sampling, and the approach using the ranks of observed values among permutation samples all yield similar maps, as the input variable is quite close to normal.\nIn presenting local Moran’s \\(I\\), use is often made of “hotspot” maps. Because \\(I_i\\) takes high values both for strong positive autocorrelation of low and high values of the input variable, it is hard to show where “clusters” of similar neighbours with low or high values of the input variable occur. The quadrants of the Moran plot are used, by creating a categorical quadrant variable interacting the input variable and its spatial lag split at their means. The quadrant categories are then set to NA if, for the chosen probability value and adjustment, \\(I_i\\) would not be considered interesting. Here, for the FDR adjusted conditional analytical probability values (Figure 15.3) upper left panel), 53 observations belong to \"Low-Low\" cluster cores, and 96 to \"High-High\" cluster cores, similarly for the standard deviate-based permutation p-values (Figure 15.3 upper right panel), but the rank-based permutation p-values reduce the \"High-High\" count and increase the \"Low-Low\" count Figure 15.3 lower left panel :\n\nquadr <- attr(locm, \"quadr\")$mean\na <- table(addNA(quadr))\npol_pres15$hs_an_q <- pol_pres15$hs_ac_q <-\n        pol_pres15$hs_cp_q <- quadr\nis.na(pol_pres15$hs_an_q) <- pol_pres15$locm_pv >= 0.005\nb <- table(addNA(pol_pres15$hs_an_q))\nis.na(pol_pres15$hs_ac_q) <- pol_pres15$locm_std_pv >= 0.005\nc <- table(addNA(pol_pres15$hs_ac_q))\nis.na(pol_pres15$hs_cp_q) <- pol_pres15$locm_p_pv >= 0.005\nd <- table(addNA(pol_pres15$hs_cp_q))\nt(rbind(\"Moran plot quadrants\" = a, \"Analytical cond.\" = b, \n    \"Permutation std. cond.\" = c, \"Permutation rank cond.\" = d))\n#           Moran plot quadrants Analytical cond.\n# Low-Low                   1040               53\n# High-Low                   264                0\n# Low-High                   213                0\n# High-High                  978               96\n# <NA>                         0             2346\n#           Permutation std. cond. Permutation rank cond.\n# Low-Low                       53                     55\n# High-Low                       0                      0\n# Low-High                       0                      0\n# High-High                     96                     70\n# <NA>                        2346                   2370\n\n\npol_pres15$hs_an_q <- droplevels(pol_pres15$hs_an_q)\npol_pres15$hs_ac_q <- droplevels(pol_pres15$hs_ac_q)\npol_pres15$hs_cp_q <- droplevels(pol_pres15$hs_cp_q)\n\n\ntm_shape(pol_pres15) +\n    tm_fill(c(\"hs_an_q\", \"hs_ac_q\", \"hs_cp_q\"),\n        colorNA = \"grey95\", textNA=\"Not \\\"interesting\\\"\",\n        title = \"Turnout hotspot status\\nLocal Moran's I\",\n        palette = RColorBrewer::brewer.pal(4, \"Set3\")[-c(2,3)]) +\n    tm_facets(free.scales = FALSE, ncol = 2) +\n    tm_layout(panel.labels = c(\"Analytical conditional\",\n                               \"Permutation std. cond.\",\n                               \"Permutation rank cond.\"))\n\n\n\n\nFigure 15.4: Local Moran's I FDR hotspot cluster core maps \\(\\alpha = 0.005\\): left panel upper: analytical conditional p-values; right upper panel: permutation standard deviate conditional p-values; left lower panel: permutation rank conditional p-values, first round turnout, row-standardised neighbours\n\n\n\n\nFigure 15.4 shows that there is very little difference between the FDR-adjusted interesting clusters with a choice of an \\(\\alpha=0.005\\) probability value cutoff for the three approaches of analytical conditional standard deviates, permutation-based standard deviates, and rank-based probability values; the \"High-High\" cluster cores are metropolitan areas.\nTiefelsdorf (2002) argues that standard approaches to the calculation of the standard deviates of local Moran’s \\(I_i\\) should be supplemented by numerical estimates, and shows that Saddlepoint approximations are a computationally efficient way of achieving this goal. The localmoran.sad() function takes a fitted linear model as its first argument, so we first fit a null (intercept only) model, but use case weights because the numbers entitled to vote vary greatly between observations:\n\nlm(I_turnout ~ 1) -> lm_null\n\nSaddlepoint approximation is as computationally intensive as conditional permutation, because, rather than computing a simple measure on many samples, a good deal of numerical calculation is needed for each local approximation:\n\ninvisible(spdep::set.coresOption(ifelse(detectCores() == 1, 1, \n                                        detectCores() - 1L)))\nsystem.time(lm_null |> localmoran.sad(nb = nb_q, style = \"W\",\n                                  alternative = \"two.sided\") |>\n        summary() -> locm_sad_null)\n#    user  system elapsed \n#   58.16    2.65   10.31\n\nThe chief advantage of the Saddlepoint approximation is that it takes a fitted linear model rather than simply a numerical variable, so the residuals are analysed. With an intercept-only model, the results are similar to local Moran’s \\(I_i\\), but we can weight the observations, here by the count of those entitled to vote, which should down-weight small units of observation:\n\nlm(I_turnout ~ 1, weights = pol_pres15$I_entitled_to_vote) ->\n        lm_null_weights\ninvisible(spdep::set.coresOption(ifelse(detectCores() == 1, 1,\n                                        detectCores() - 1L)))\nsystem.time(lm_null_weights |>\n            localmoran.sad(nb = nb_q, style = \"W\",\n                           alternative = \"two.sided\") |>\n        summary() -> locm_sad_null_weights)\n#    user  system elapsed \n#   62.14    3.94   10.89\n\nNext we add the categorical variable distinguishing between rural, urban and other types of observational unit:\n\nlm(I_turnout ~ Types, weights=pol_pres15$I_entitled_to_vote) ->\n        lm_types\ninvisible(spdep::set.coresOption(ifelse(detectCores() == 1, 1,\n                                        detectCores() - 1L)))\nsystem.time(lm_types |> localmoran.sad(nb = nb_q, style = \"W\",\n                                  alternative = \"two.sided\") |>\n        summary() -> locm_sad_types)\n#    user  system elapsed \n#    63.7     4.3    11.3\n\n\npol_pres15$locm_sad0 <- pol_pres15$locm_sad1 <-\n        pol_pres15$locm_sad2 <- quadr\nis.na(pol_pres15$locm_sad0) <-\n        p.adjust(locm_sad_null[, \"Pr. (Sad)\"], \"fdr\")  >= 0.005\npol_pres15$locm_sad0 <- droplevels(pol_pres15$locm_sad0)\nis.na(pol_pres15$locm_sad1) <- p.adjust(locm_sad_null_weights[,\n    \"Pr. (Sad)\"], \"fdr\") >= 0.005\npol_pres15$locm_sad1 <- droplevels(pol_pres15$locm_sad1)\nis.na(pol_pres15$locm_sad2) <-\n        p.adjust(locm_sad_types[, \"Pr. (Sad)\"], \"fdr\") >= 0.005\npol_pres15$locm_sad2 <- droplevels(pol_pres15$locm_sad2)\ntm_shape(pol_pres15) +\n    tm_fill(c(\"hs_cp_q\", \"locm_sad0\", \"locm_sad1\",  \"locm_sad2\"),\n        colorNA = \"grey95\", textNA = \"Not \\\"interesting\\\"\",\n        title = \"Turnout hotspot status\\nLocal Moran's I\",\n        palette = RColorBrewer::brewer.pal(4, \"Set3\")[c(1, 4, 2)]) +\n    tm_facets(free.scales = FALSE, ncol = 2) + \n    tm_layout(panel.labels = c(\"Permutation rank\", \"Saddlepoint null\",\n                               \"Saddlepoint weighted null\",\n                               \"Saddlepoint weighted types\"))\n\n\n\n\nFigure 15.5: Local Moran's I FDR hotspot cluster core maps, two-sided, interesting cutoff \\(\\alpha = 0.005\\): left panel upper: permutation rank conditional p-values; right upper panel: null (intercept only) model Saddlepoint p-values; left lower panel: weighted null (intercept only) model Saddlepoint p-values; right lower panel: weighted types model Saddlepoint p-values, for first round turnout, row-standardised neighbours\n\n\n\n\n\nrbind(null = append(table(addNA(pol_pres15$locm_sad0)),\n                    c(\"Low-High\" = 0), 1),\n      weighted = append(table(addNA(pol_pres15$locm_sad1)),\n                        c(\"Low-High\" = 0), 1),\n      type_weighted = table(addNA(pol_pres15$locm_sad2)))\n#               Low-Low Low-High High-High <NA>\n# null               19        0        55 2421\n# weighted            9        0        52 2434\n# type_weighted      10        3        81 2401\n\n\nincludes the permutation rank cluster cores for comparison (upper left panel). Because Saddlepoint approximation permits richer mean models to be used, and possibly because the approximation approach is inherently local, relating regression residual values at \\(i\\) to those of its neighbours, the remaining three panels diverge somewhat. The intercept-only (null model is fairly similar to standard local Moran’s \\(I_i\\), but weighting by counts of eligible voters removes most of the \"Low-Low\" cluster cores. Adding the type categorical variable strengthens the urban \"High-High\" cluster cores, but removes the Warsaw boroughs as interesting cluster cores. The central boroughs are surrounded by other boroughs, all with high turnout, not driven by autocorrelation but by being metropolitan boroughs. It is also possible to use Saddlepoint approximation where the global spatial process has been incorporated, removing the conflation of global and local spatial autocorrelation in standard approaches.\n\nThe same can also be accomplished using exact methods, but may require more tuning as numerical integration may fail, returning NaN rather than the exact estimate of the standard deviate (R. S. Bivand, Müller, and Reder 2009):\n\ninvisible(spdep::set.coresOption(ifelse(detectCores() == 1, 1,\n                                        detectCores() - 1L)))\nsystem.time(lm_types |> localmoran.exact(nb = nb_q, style = \"W\", \n        alternative = \"two.sided\", useTP=TRUE, truncErr=1e-8) |> \n        as.data.frame() -> locm_ex_types)\n#    user  system elapsed \n#   66.23    4.25   11.71\n\n\npol_pres15$locm_ex <- quadr\nis.na(pol_pres15$locm_ex) <-\n      p.adjust(locm_ex_types[, \"Pr. (exact)\"], \"fdr\") >= 0.005\npol_pres15$locm_ex <- droplevels(pol_pres15$locm_ex)\ntm_shape(pol_pres15) +\n    tm_fill(c(\"locm_sad2\", \"locm_ex\"), colorNA = \"grey95\",\n        textNA = \"Not \\\"interesting\\\"\", \n        title = \"Turnout hotspot status\\nLocal Moran's I\",\n        palette = RColorBrewer::brewer.pal(4, \"Set3\")[c(1, 2, 4)]) +\n    tm_facets(free.scales = FALSE, ncol = 2) +\n    tm_layout(panel.labels = c(\"Saddlepoint weighted types\",\n                               \"Exact weighted types\"))\n\n\n\n\nFigure 15.6: ?(caption)\n\n\n\n\nAs Figure 15.6 shows, the exact and Saddlepoint approximation methods yield almost identical cluster classifications from the same regression residuals, multiple comparison adjustment method and cutoff level, with the exact method returning four more interesting observations:\n\ntable(Saddlepoint = addNA(pol_pres15$locm_sad2),\n      exact = addNA(pol_pres15$locm_ex))\n#            exact\n# Saddlepoint Low-Low Low-High High-High <NA>\n#   Low-Low        10        0         0    0\n#   Low-High        0        3         0    0\n#   High-High       0        0        81    0\n#   <NA>            2        0         2 2397\n\n\n\nLocal Getis-Ord \\(G_i\\)\nThe local Getis-Ord \\(G_i\\) measure (Getis and Ord 1992, 1996) is reported as a standard deviate, and may also take the \\(G^*_i\\) form where self-neighbours are inserted into the neighbour object using include.self(). The observed and expected values of local \\(G\\) with their analytical variances may also be returned if return_internals=TRUE.\n\nsystem.time(I_turnout |> \n        localG(lw_q_W, return_internals = TRUE) -> locG)\n#    user  system elapsed \n#   0.009   0.000   0.008\n\nPermutation inference is also available for this measure:\n\ninvisible(spdep::set.coresOption(ifelse(detectCores() == 1, 1,\n                                        detectCores() - 1L)))\nsystem.time(I_turnout |> \n        localG_perm(lw_q_W, nsim = 9999, iseed = 1) -> locG_p)\n#    user  system elapsed \n#   149.7   290.5    65.5\n\nThe correlation between the two-sided probability values for analytical and permutation-based standard deviates (first two columns and rows) and permutation rank-based probability values are very strong:\n\ncor(cbind(localG=attr(locG, \"internals\")[, \"Pr(z != E(Gi))\"], \n    attr(locG_p, \"internals\")[, c(\"Pr(z != E(Gi))\", \n                                  \"Pr(z != E(Gi)) Sim\")]))\n#                    localG Pr(z != E(Gi)) Pr(z != E(Gi)) Sim\n# localG                  1              1                  1\n# Pr(z != E(Gi))          1              1                  1\n# Pr(z != E(Gi)) Sim      1              1                  1\n\n\n\nLocal Geary’s \\(C_i\\)\nLuc Anselin (2019) extends L. Anselin (1995), and has been recently added to spdep thanks to contributions by Josiah Parry (pull request https://github.com/r-spatial/spdep/pull/66 and subsequent). The conditional permutation framework used for \\(I_i\\) and \\(G_i\\) is also used for \\(C_i\\):\n\ninvisible(spdep::set.coresOption(ifelse(detectCores() == 1, 1,\n                                        detectCores() - 1L)))\nsystem.time(I_turnout |> \n        localC_perm(lw_q_W, nsim=9999, iseed=1) -> locC_p)\n#    user  system elapsed \n#   128.3   245.7    68.3\n\nThe permutation standard deviate-based and rank-based probability values are not as highly correlated as for \\(G_i\\), in part reflecting the difference in view of autocorrelation in \\(C_i\\) as represented by a function of the differences between values rather than the products of values:\n\ncor(attr(locC_p, \"pseudo-p\")[, c(\"Pr(z != E(Ci))\",\n                                 \"Pr(z != E(Ci)) Sim\")])\n#                    Pr(z != E(Ci)) Pr(z != E(Ci)) Sim\n# Pr(z != E(Ci))              1.000              0.966\n# Pr(z != E(Ci)) Sim          0.966              1.000\n\n\npol_pres15$hs_C <- attr(locC_p, \"cluster\")\nis.na(pol_pres15$hs_C) <-\n    p.adjust(attr(locC_p, \"pseudo-p\")[,\"Pr(z != E(Ci)) Sim\"], \n             \"fdr\") >= 0.005\npol_pres15$hs_C <- droplevels(pol_pres15$hs_C)\n\n\npol_pres15$hs_G <- cut(I_turnout, c(-Inf, mean(I_turnout), Inf), \n    labels = c(\"Low\", \"High\"))\nis.na(pol_pres15$hs_G) <-\n    p.adjust(attr(locG_p, \"internals\")[,\"Pr(z != E(Gi))\"], \n             \"fdr\") >= 0.005\npol_pres15$hs_G <- droplevels(pol_pres15$hs_G)\n\n\nm1 <- tm_shape(pol_pres15) +\n    tm_fill(\"hs_cp_q\", \n            palette = RColorBrewer::brewer.pal(4, \"Set3\")[-c(2,3)],\n            colorNA = \"grey95\", textNA = \"Not \\\"interesting\\\"\",\n            title = \"Turnout hotspot status\\nLocal Moran I\")\nm2 <- tm_shape(pol_pres15) +\n    tm_fill(\"hs_G\",\n            palette = RColorBrewer::brewer.pal(4, \"Set3\")[-c(2,3)],\n            colorNA = \"grey95\", textNA=\"Not \\\"interesting\\\"\",\n            title = \"Turnout hotspot status\\nLocal Getis/Ord G\")\nm3 <- tm_shape(pol_pres15) +\n    tm_fill(\"hs_C\",\n            palette = RColorBrewer::brewer.pal(4, \"Set3\")[c(4, 1)],\n            colorNA = \"grey95\", textNA=\"Not \\\"interesting\\\"\",\n            title = \"Turnout hotspot status\\nLocal Geary C\")\ntmap_arrange(m1, m2, m3, nrow=1)\n# Some legend labels were too wide. These labels have been resized to 0.49. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n# Some legend labels were too wide. These labels have been resized to 0.49. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n# Some legend labels were too wide. These labels have been resized to 0.49. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\nFigure 15.7: FDR hotspot cluster core maps, two-sided, interesting cutoff \\(\\alpha = 0.005\\): left panel: local Moran's \\(I_i\\); centre panel: local Getis-Ord \\(G_i\\); right panel: local Geary's \\(C_i\\); first round turnout, row-standardised neighbours\n\n\n\n\n\nshows that the cluster cores identified as interesting using \\(I_i\\), \\(G_i\\) and \\(C_i\\) for the same variable, first round turnout, and the same spatial weights, for rank-based permutation FDR adjusted probability values and an \\(\\alpha = 0.005\\) cutoff, are very similar. In most cases, the \"High-High\" cluster cores are urban areas, and \"Low-Low\" cores are sparsely populated rural areas in the North, in addition to the German national minority areas close to the southern border. The three measures use slightly different strategies for naming cluster cores: \\(I_i\\) uses quadrants of the Moran scatterplot, \\(G_i\\) splits into \"Low\" and \"High\" on the mean of the input variable (which is the same as the first component in the \\(I_i\\) tuple , and univariate \\(C_i\\) on the mean of the input variable and zero for its lag. As before, cluster categories that do not occur are dropped.\n\nFor comparison, and before moving to multivariate \\(C_i\\), let us take the univariate \\(C_i\\) for the second (final) round turnout. One would expect that the run-off between the two top candidates from the first round might mobilise some voters who did not have a clear first-round preference, but discourage some of those with strong loyalty to a candidate eliminated after the first round:\n\ninvisible(spdep::set.coresOption(ifelse(detectCores() == 1, 1,\n                                        detectCores() - 1L)))\nsystem.time(pol_pres15 |> \n        st_drop_geometry() |> \n        subset(select = II_turnout) |> \n        localC_perm(lw_q_W, nsim=9999, iseed=1) -> locC_p_II)\n#    user  system elapsed \n#   172.8   315.0    73.1\n\n\npol_pres15$hs_C_II <- attr(locC_p_II, \"cluster\")\nis.na(pol_pres15$hs_C_II) <-\n    p.adjust(attr(locC_p_II, \"pseudo-p\")[,\"Pr(z != E(Ci)) Sim\"],\n             \"fdr\") >= 0.005\npol_pres15$hs_C_II <- droplevels(pol_pres15$hs_C_II)\n\nMultivariate \\(C_i\\) (Luc Anselin 2019) is taken as the sum of univariate \\(C_i\\) divided by the number of variables, but permutation is fixed so that the correlation between the variables is unchanged:\n\ninvisible(spdep::set.coresOption(ifelse(detectCores() == 1, 1,\n                                        detectCores() - 1L)))\nsystem.time(pol_pres15 |> \n        st_drop_geometry() |> \n        subset(select = c(I_turnout, II_turnout)) |>\n        localC_perm(lw_q_W, nsim=9999, iseed=1) -> locMvC_p)\n#    user  system elapsed \n#     174     341      77\n\nLet us check that the multivariate \\(C_i\\) is equal to the mean of the univariate \\(C_i\\):\n\nall.equal(locMvC_p, (locC_p+locC_p_II)/2,\n          check.attributes = FALSE)\n# [1] TRUE\n\n\npol_pres15$hs_MvC <- attr(locMvC_p, \"cluster\")\nis.na(pol_pres15$hs_MvC) <-\n    p.adjust(attr(locMvC_p, \"pseudo-p\")[,\"Pr(z != E(Ci)) Sim\"],\n             \"fdr\") >= 0.005\npol_pres15$hs_MvC <- droplevels(pol_pres15$hs_MvC)\n\n\nm3 <- tm_shape(pol_pres15) +\n  tm_fill(\"hs_C\", \n    palette = RColorBrewer::brewer.pal(4, \"Set3\")[c(4, 1)],\n    colorNA = \"grey95\", textNA = \"Not \\\"interesting\\\"\",\n    title = \"First round turnout\\nLocal Geary C\")\nm4 <- tm_shape(pol_pres15) +\n  tm_fill(\"hs_C_II\", \n    palette = RColorBrewer::brewer.pal(4, \"Set3\")[c(4, 1, 3, 2)], \n    colorNA = \"grey95\", textNA = \"Not \\\"interesting\\\"\",\n    title=\"Second round turnout\\nLocal Geary C\")\nm5 <- tm_shape(pol_pres15) +\n  tm_fill(\"hs_MvC\", \n    palette = RColorBrewer::brewer.pal(4, \"Set3\")[c(4, 1)],\n    colorNA = \"grey95\", textNA = \"Not \\\"interesting\\\"\",\n    title = \"Both rounds turnout\\nLocal Multivariate Geary C\")\ntmap_arrange(m3, m4, m5, nrow=1)\n# Some legend labels were too wide. These labels have been resized to 0.49. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n# Some legend labels were too wide. These labels have been resized to 0.56, 0.49. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n# Some legend labels were too wide. These labels have been resized to 0.49. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\nFigure 15.8: FDR hotspot cluster core maps, two-sided, interesting cutoff \\(\\alpha = 0.005\\): left panel: local \\(C_i\\), first round turnout; centre panel: local \\(C_i\\), second round turnout; right panel: local multivariate \\(C_i\\), both turnout rounds; row-standardised neighbours\n\n\n\n\nFigure 15.8 indicates that the multivariate measure picks up aggregated elements of observations found interesting in the two univariate measures. We can break this down by interacting the first and second round univariate measures, and tabulating against the multivariate measure.\n\ntable(droplevels(interaction(addNA(pol_pres15$hs_C),\n                             addNA(pol_pres15$hs_C_II), sep=\":\")), \n      addNA(pol_pres15$hs_MvC))\n#                      \n#                       Positive <NA>\n#   High-High:High-High       79    1\n#   NA:High-High              49   20\n#   Low-Low:Low-Low           31    0\n#   NA:Low-Low                36   27\n#   NA:Other Positive          1    0\n#   High-High:NA              11    1\n#   Low-Low:NA                11    2\n#   NA:NA                     37 2189\n\nFor these permutation outcomes, 47 observations in the multivariate case are found interesting where neither of the univariate \\(C_i\\) were found interesting (FDR, cutoff \\(0.005\\)). Almost all of the observations found interesting in both first and second round are also interesting in the multivariate case, but outcomes are more mixed when observations were only found interesting in one of the two rounds.\n\n\nThe rgeoda package\nGeoda has been wrapped for R as rgeoda (Li and Anselin 2022), and provides very similar functionalities for the exploration of spatial autocorrelation in areal data as matching parts of spdep. The active objects are kept as pointers to a compiled code workspace; using compiled code for all operations (as in Geoda itself) makes rgeoda perform fast, but is less flexible when modifications or enhancements are desired.\n\nlibrary(rgeoda)\nsystem.time(Geoda_w <- queen_weights(pol_pres15))\n#    user  system elapsed \n#   0.104   0.000   0.104\nsummary(Geoda_w)\n#                      name               value\n# 1 number of observations:                2495\n# 2          is symmetric:                 TRUE\n# 3               sparsity: 0.00228786229774178\n# 4        # min neighbors:                   1\n# 5        # max neighbors:                  13\n# 6       # mean neighbors:    5.70821643286573\n# 7     # median neighbors:                   6\n# 8           has isolates:               FALSE\n\nFor comparison, let us take the multivariate \\(C_i\\) measure of turnout in the two rounds of the 2015 Polish presidential election as above:\n\nsystem.time(lisa <- local_multigeary(Geoda_w, \n    pol_pres15[c(\"I_turnout\", \"II_turnout\")], \n    cpu_threads = ifelse(parallel::detectCores() == 1, 1,\n                         parallel::detectCores() - 1L),\n    permutations = 99999, seed = 1))\n#    user  system elapsed \n# 133.061   0.003  20.938\n\nThe contiguity neighbours are the same as those found by poly2nb():\n\nall.equal(card(nb_q), lisa_num_nbrs(lisa), \n          check.attributes = FALSE)\n# [1] TRUE\n\nas are the multivariate \\(C_i\\) values the same as those found above:\n\nall.equal(lisa_values(lisa), c(locMvC_p),\n          check.attributes = FALSE)\n# [1] TRUE\n\nOne difference is that the range of the folded two-sided rank-based permutation probability values used by rgeoda is \\([0, 0.5]\\), also reported in spdep:\n\napply(attr(locMvC_p, \"pseudo-p\")[,c(\"Pr(z != E(Ci)) Sim\", \n                                    \"Pr(folded) Sim\")], 2, range)\n#      Pr(z != E(Ci)) Sim Pr(folded) Sim\n# [1,]             0.0002         0.0001\n# [2,]             0.9978         0.4989\n\nThis means that the cutoff corresponding to \\(0.005\\) over \\([0, 1]\\) is \\(0.0025\\) over \\([0, 0.5]\\):\n\nhs_MvCa <- attr(locMvC_p, \"cluster\")\nis.na(hs_MvCa) <-\n  p.adjust(attr(locMvC_p, \"pseudo-p\")[,\"Pr(folded) Sim\"], \n           \"fdr\") >= 0.0025\npol_pres15$hs_MvCa <- droplevels(hs_MvCa)\n\nSo although local_multigeary() used the default cutoff of \\(0.05\\) in setting cluster core classes, we can sharpen the cutoff and apply the FDR adjustment on output components of the lisa object in the compiled code workspace:\n\nmvc <- factor(lisa_clusters(lisa), levels=0:2,\n              labels = lisa_labels(lisa)[1:3])\nis.na(mvc) <- p.adjust(lisa_pvalues(lisa), \"fdr\") >= 0.0025\npol_pres15$geoda_mvc <- droplevels(mvc)\n\nAbout 80 more observations are found interesting in the rgeoda permutation, and further analysis of implementation details is still in progress:\n\naddmargins(table(spdep = addNA(pol_pres15$hs_MvCa),\n                 rgeoda = addNA(pol_pres15$geoda_mvc)))\n#           rgeoda\n# spdep      Positive <NA>  Sum\n#   Positive      249    6  255\n#   <NA>           78 2162 2240\n#   Sum           327 2168 2495\n\n\nm5 <- tm_shape(pol_pres15) +\n    tm_fill(\"hs_MvCa\", \n            palette = RColorBrewer::brewer.pal(4, \"Set3\")[c(4, 1)],\n            colorNA = \"grey95\", textNA = \"Not \\\"interesting\\\"\",\n  title = \"Both rounds turnout (spdep)\\nLocal Multivariate Geary C\")\nm6 <- tm_shape(pol_pres15) +\n    tm_fill(\"geoda_mvc\", \n            palette = RColorBrewer::brewer.pal(4, \"Set3\")[c(4, 1)],\n            colorNA = \"grey95\", textNA = \"Not \\\"interesting\\\"\",\n  title=\"Both rounds turnout (rgeoda)\\nLocal Multivariate Geary C\")\ntmap_arrange(m5, m6, nrow=1)\n\n\n\n\nFigure 15.9: FDR local multivariate \\(C_i\\) hotspot cluster core maps, two-sided, interesting cutoff \\(\\alpha = 0.0025\\) over \\([0, 0.5]\\): left panel: spdep, both turnout rounds; right panel: rgeoda, both turnout rounds; row-standardised neighbours\n\n\n\n\nFigure 15.9 shows that while almost all of the 242 observations found interesting in the spdep implementation were also interesting for rgeoda, the latter found a further 86 interesting. Of course, permutation outcomes are bound to vary, but it remains to establish whether either or both of the implementations require revision."
  },
  {
    "objectID": "17-Areal.html#exercises-1",
    "href": "17-Areal.html#exercises-1",
    "title": "14  Proximity and Areal Data",
    "section": "15.4 Exercises",
    "text": "15.4 Exercises\n\nWhy are join-count measures on a chessboard so different between rook and queen neighbours?\nPlease repeat the simulation shown in section 15.1 using the chessboard polygons and the row-standardized queen contiguity neighbours. Why is it important to understand that spatial autocorrelation usually signals (unavoidable) mis-specification in our data?\nWhy is false discovery rate adjustment recommended for local measures of spatial autocorrelation?\nCompare the local Moran’s \\(I_i\\) standard deviate values for the simulated data from exercise 15.2 for the analytical conditional approach, and Saddlepoint approximation. Consider the advantages and disadvantages of the Saddlepoint approximation approach.\n\n\n\n\n\nAnselin, L. 1995. “Local indicators of spatial association - LISA.” Geographical Analysis 27 (2): 93–115.\n\n\n———. 1996. “The Moran Scatterplot as an ESDA Tool to Assess Local Instability in Spatial Association.” In Spatial Analytical Perspectives on GIS, edited by M. M. Fischer, H. J. Scholten, and D. Unwin, 111–25. London: Taylor & Francis.\n\n\nAnselin, Luc. 2019. “A Local Indicator of Multivariate Spatial Association: Extending Geary’s c.” Geographical Analysis 51 (2): 133–50. https://doi.org/10.1111/gean.12164.\n\n\nAnselin, Luc, Xun Li, and Julia Koschinsky. 2021. “GeoDa, from the Desktop to an Ecosystem for Exploring Spatial Data.” Geographical Analysis. https://doi.org/10.1111/gean.12311.\n\n\nAssunção, R. M., and E. A. Reis. 1999. “A New Proposal to Adjust Moran’s \\(I\\) for Population Density.” Statistics in Medicine 18: 2147–62.\n\n\nAvis, D., and J. Horton. 1985. “Remarks on the Sphere of Influence Graph.” In Discrete Geometry and Convexity, edited by J. E. Goodman, 323–27. New York: New York Academy of Sciences, New York.\n\n\nBates, Douglas, Martin Maechler, and Mikael Jagan. 2022. Matrix: Sparse and Dense Matrix Classes and Methods. https://CRAN.R-project.org/package=Matrix.\n\n\nBavaud, F. 1998. “Models for Spatial Weights: A Systematic Look.” Geographical Analysis 30: 153–71. https://doi.org/10.1111/j.1538-4632.1998.tb00394.x.\n\n\nBenjamin, Daniel J., James O. Berger, Johannesson Magnus, Brian A. Nosek, Wagenmakers E-J, Richard Berk, Kenneth A. Bollen, et al. 2018. “Redefine Statistical Significance.” Nature Human Behaviour 2 (1): 6–10.\n\n\nBenjamini, Yoav, and Yosef Hochberg. 1995. “Controlling the False Discovery Rate: A Practical and Powerful Approach to Multiple Testing.” Journal of the Royal Statistical Society. Series B (Methodological) 57 (1): 289–300. https://doi.org/10.1111/j.2517-6161.1995.tb02031.x.\n\n\nBenjamini, Yoav, and Daniel Yekutieli. 2001. “The control of the false discovery rate in multiple testing under dependency.” The Annals of Statistics 29 (4): 1165–88. https://doi.org/10.1214/aos/1013699998.\n\n\nBivand, R. S., W. Müller, and M. Reder. 2009. “Power Calculations for Global and Local Moran’s \\(I\\).” Computational Statistics and Data Analysis 53: 2859–72.\n\n\nBivand, R. S., and B. A. Portnov. 2004. “Exploring Spatial Data Analysis Techniques Using R: The Case of Observations with No Neighbours.” In Advances in Spatial Econometrics: Methodology, Tools, Applications, edited by L. Anselin, R. J. G. M. Florax, and S. J. Rey, 121–42. Berlin: Springer.\n\n\nBivand, Roger. 2022. Spdep: Spatial Dependence: Weighting Schemes, Statistics. https://CRAN.R-project.org/package=spdep.\n\n\nBivand, Roger S., and David W. S. Wong. 2018. “Comparing Implementations of Global and Local Indicators of Spatial Association.” TEST 27 (3): 716–48. https://doi.org/10.1007/s11749-018-0599-x.\n\n\nBoots, B., and A. Okabe. 2007. “Local Statistical Spatial Analysis: Inventory and Prospect.” International Journal of Geographical Information Science 21 (4): 355–75. https://doi.org/10.1080/13658810601034267.\n\n\nBrody, Howard, Michael Russell Rip, Peter Vinten-Johansen, Nigel Paneth, and Stephen Rachman. 2000. “Map-Making and Myth-Making in Broad Street: The London Cholera Epidemic, 1854.” The Lancet 356 (9223): 64–68. https://doi.org/https://doi.org/10.1016/S0140-6736(00)02442-9.\n\n\nCaldas de Castro, Marcia, and Burton H. Singer. 2006. “Controlling the False Discovery Rate: A New Application to Account for Multiple and Dependent Tests in Local Statistics of Spatial Association.” Geographical Analysis 38 (2): 180–208. https://doi.org/10.1111/j.0016-7363.2006.00682.x.\n\n\nCliff, A. D., and J. K. Ord. 1973. Spatial Autocorrelation. London: Pion.\n\n\n———. 1981. Spatial Processes. London: Pion.\n\n\nCsardi, Gabor, and Tamas Nepusz. 2006. “The Igraph Software Package for Complex Network Research.” InterJournal Complex Systems: 1695. https://igraph.org.\n\n\nDuncan, O. D., R. P. Cuzzort, and B. Duncan. 1961. Statistical Geography: Problems in Analyzing Areal Data. Glencoe, IL: Free Press.\n\n\nDunnington, Dewey, Edzer Pebesma, and Ege Rubak. 2022. S2: Spherical Geometry Operators Using the S2 Geometry Library.\n\n\nfile., See AUTHORS. 2022. Igraph: Network Analysis and Visualization. https://CRAN.R-project.org/package=igraph.\n\n\nFreni-Sterrantino, Anna, Massimo Ventrucci, and Håvard Rue. 2018. “A Note on Intrinsic Conditional Autoregressive Models for Disconnected Graphs.” Spatial and Spatio-Temporal Epidemiology 26: 25–34. https://doi.org/https://doi.org/10.1016/j.sste.2018.04.002.\n\n\nGeary, R. C. 1954. “The Contiguity Ratio and Statistical Mapping.” The Incorporated Statistician 5: 115–45.\n\n\nGetis, A., and J. K. Ord. 1992. “The Analysis of Spatial Association by the Use of Distance Statistics.” Geographical Analysis 24 (2): 189–206.\n\n\n———. 1996. “Local Spatial Statistics: An Overview.” In Spatial Analysis: Modelling in a GIS Environment, edited by P. Longley and M Batty, 261–77. Cambridge: GeoInformation International.\n\n\nHahsler, Michael, and Matthew Piekenbrock. 2022. Dbscan: Density-Based Spatial Clustering of Applications with Noise (DBSCAN) and Related Algorithms. https://github.com/mhahsler/dbscan.\n\n\nLi, Xun, and Luc Anselin. 2021. Rgeoda: R Library for Spatial Data Analysis. https://CRAN.R-project.org/package=rgeoda.\n\n\n———. 2022. Rgeoda: R Library for Spatial Data Analysis. https://CRAN.R-project.org/package=rgeoda.\n\n\nMcMillen, Daniel P. 2003. “Spatial Autocorrelation or Model Misspecification?” International Regional Science Review 26: 208–17.\n\n\nMoran, P. A. P. 1948. “The Interpretation of Statistical Maps.” Journal of the Royal Statistical Society, Series B (Methodological) 10 (2): 243–51.\n\n\nOkabe, A., T. Satoh, T. Furuta, A. Suzuki, and K. Okano. 2008. “Generalized Network Voronoi Diagrams: Concepts, Computational Methods, and Applications.” International Journal of Geographical Information Science 22 (9): 965–94. https://doi.org/10.1080/13658810701587891.\n\n\nOlsson, Gunnar. 1970. “Explanation, Prediction, and Meaning Variance: An Assessment of Distance Interaction Models.” Economic Geography 46: 223–33. https://doi.org/10.2307/143140.\n\n\nOrd, J. K., and A. Getis. 2001. “Testing for Local Spatial Autocorrelation in the Presence of Global Autocorrelation.” Journal of Regional Science 41 (3): 411–32.\n\n\nSauer, Jeffery, Taylor Oshan, Sergio Rey, and Levi John Wolf. 2021. “The Importance of Null Hypotheses: Understanding Differences in Local Moran’s \\(I_i\\) Under Heteroskedasticity.” Geographical Analysis. https://doi.org/https://doi.org/10.1111/gean.12304.\n\n\nSchabenberger, O., and C. A. Gotway. 2005. Statistical Methods for Spatial Data Analysis. Boca Raton/London: Chapman & Hall/CRC.\n\n\nShe, Bing, Xinyan Zhu, Xinyue Ye, Wei Guo, Kehua Su, and Jay Lee. 2015. “Weighted Network Voronoi Diagrams for Local Spatial Analysis.” Computers, Environment and Urban Systems 52: 70–80. https://doi.org/https://doi.org/10.1016/j.compenvurbsys.2015.03.005.\n\n\nSokal, R. R, N. L. Oden, and B. A. Thomson. 1998. “Local Spatial Autocorrelation in a Biological Model.” Geographical Analysis 30: 331–54.\n\n\nTiefelsdorf, M. 2002. “The Saddlepoint Approximation of Moran’s I and Local Moran’s \\({I}_i\\) Reference Distributions and Their Numerical Evaluation.” Geographical Analysis 34: 187–206.\n\n\nTobler, W. R. 1970. “A Computer Movie Simulating Urban Growth in the Detroit Region.” Economic Geography 46: 234–40. https://doi.org/10.2307/143141.\n\n\nUpton, G., and B. Fingleton. 1985. Spatial Data Analysis by Example: Point Pattern and Qualitative Data. New York: Wiley.\n\n\nWall, M. M. 2004. “A Close Look at the Spatial Structure Implied by the CAR and SAR Models.” Journal of Statistical Planning and Inference 121: 311–24."
  },
  {
    "objectID": "18-SpatialRegression.html",
    "href": "18-SpatialRegression.html",
    "title": "15  Spatial Regression",
    "section": "",
    "text": "Even though it may be tempting to focus on interpreting the map pattern of an areal support response variable of interest, the pattern may largely derive from covariates (and their functional forms), as well as the respective spatial footprints of the variables in play. Spatial autoregressive models in two dimensions began without covariates and with clear links to time series (Whittle 1954). Extensions included tests for spatial autocorrelation in linear model residuals, and models applying the autoregressive component to the response or the residuals, where the latter matched the tests for residuals (A. Cliff and Ord 1972; A. D. Cliff and Ord 1973). These “lattice” models of areal data typically express the dependence between observations using a graph of neighbours in the form of a contiguity matrix.\nOf course, handling a spatial correlation structure in a generalised least squares model or a (generalized) linear or nonlinear mixed effects model such as those provided in the nlme and many other packages does not have to use a graph of neighbours (Pinheiro and Bates 2000). These models are also spatial regression models, using functions of the distance between observations, and fitted variograms to model the spatial autocorrelation present; such models have been held to yield a clearer picture of the underlying processes (Wall 2004), building on geostatistics. For example, the glmmTMB package successfully uses this approach to spatial regression (Brooks et al. 2017). Here we will only consider spatial regression using spatial weights matrices."
  },
  {
    "objectID": "18-SpatialRegression.html#markov-random-field-and-multilevel-models",
    "href": "18-SpatialRegression.html#markov-random-field-and-multilevel-models",
    "title": "15  Spatial Regression",
    "section": "15.1 Markov random field and multilevel models",
    "text": "15.1 Markov random field and multilevel models\nThere is a large literature in disease mapping using conditional autoregressive (CAR) and intrinsic CAR (ICAR) models in spatially structured random effects. These extend to multilevel models, in which the spatially structured random effects may apply at different levels of the model (Roger S. Bivand et al. 2017). In order to try out some of the variants, we need to remove the no-neighbour observations from the tract level, and from the model output zone aggregated level, in two steps as reducing the tract level induces a no-neighbour outcome at the model output zone level. Many of the model estimating functions take family= arguments, and fit generalized linear mixed effects models with per-observation spatial random effects structured using a Markov random field representation of relationships between neighbours. In the multilevel case, the random effects may be modelled at the group level, which is the case presented in the following examples.\nWe follow V. Gómez-Rubio (2019) in summarizing Pinheiro and Bates (2000) and McCulloch and Searle (2001) to describe the mixed-effects model representation of spatial regression models. In a Gaussian linear mixed model setting, a random effect \\(u\\) is added to the model, with response \\(Y\\), fixed covariates \\(X\\), their coefficients \\(\\beta\\) and error term \\(\\varepsilon_i \\sim N(0, \\sigma^2), i=1,\\dots, n\\):\n\\[\nY = X \\beta + Z u + \\varepsilon\n\\]\n\\(Z\\) is a fixed design matrix for the random effects. If there are \\(n\\) random effects, it will be an \\(n \\times n\\) identity matrix, if instead the observations are aggregated into \\(m\\) groups, so with \\(m < n\\) random effects, it will be an \\(n \\times m\\) matrix showing which group each observation belongs to. The random effects are modelled as a multivariate Normal distribution \\(u \\sim N(0, \\sigma^2_u \\Sigma)\\), and \\(\\Sigma\\) is the square variance-covariance matrix of the random effects.\nA division has grown up, possibly unhelpfully, between scientific fields using CAR models (Besag 1974), and simultaneous autoregressive models (SAR) (Ord 1975; Hepple 1976). Although CAR and SAR models are closely related, these fields have found it difficult to share experience of applying similar models, often despite referring to key work summarising the models (Ripley 1981, 1988; Cressie 1993). Ripley gives the SAR variance as (1981, 89), here shown as the inverse \\(\\Sigma^{-1}\\) (also known as the precision matrix):\n\\[\n\\Sigma^{-1} = [(I - \\rho W)'(I - \\rho W)]\n\\]\nwhere \\(\\rho\\) is a spatial autocorrelation parameter and \\(W\\) is a nonsingular spatial weights matrix that represents spatial dependence. The CAR variance is:\n\\[\n\\Sigma^{-1} = (I - \\rho W)\n\\]\nwhere \\(W\\) is a symmetric and strictly positive definite spatial weights matrix. In the case of the intrinsic CAR model, avoiding the estimation of a spatial autocorrelation parameter, we have:\n\\[\n\\Sigma^{-1} = M = \\mathrm{diag}(n_i) - W\n\\]\nwhere \\(W\\) is a symmetric and strictly positive definite spatial weights matrix as before and \\(n_i\\) are the row sums of \\(W\\). The Besag-York-Mollié model includes intrinsic CAR spatially structured random effects and an unstructured random effects. The Leroux model combines matrix components for unstructured and spatially structured random effects, where the spatially structured random effects are taken as following an intrinsic CAR specification:\n\\[\n\\Sigma^{-1} = [(1 - \\rho) I_n + \\rho M]\n\\]\nReferences to the definitions of these models may be found in V. Gómez-Rubio (2020), and estimation issues affecting the Besag-York-Mollié and Leroux models are reviewed by Gerber and Furrer (2015).\nMore recent books expounding the theoretical bases for modelling with areal data simply point out the similarities between SAR and CAR models in relevant chapters (Gaetan and Guyon 2010; Lieshout 2019); the interested reader is invited to consult these sources for background information.\n\nBoston house value data set\nHere we shall use the Boston housing data set, which has been restructured and furnished with census tract boundaries (R. Bivand 2017). The original data set used 506 census tracts and a hedonic model to try to estimate willingness to pay for clean air. The response was constructed from counts of ordinal answers to a 1970 census question about house value. The response is left and right censored in the census source and has been treated as Gaussian. The key covariate was created from a calibrated meteorological model showing the annual nitrogen oxides (NOX) level for a smaller number of model output zones. The numbers of houses responding also varies by tract and model output zone. There are several other covariates, some measured at the tract level, some by town only, where towns broadly correspond to the air pollution model output zones.\nWe can start by reading in the 506 tract data set from spData (R. Bivand, Nowosad, and Lovelace 2021), and creating a contiguity neighbour object and from that again a row standardized spatial weights object.\n\nlibrary(sf)\nlibrary(spData)\nboston_506 <- st_read(system.file(\"shapes/boston_tracts.shp\",\n                                  package = \"spData\")[1])\n# Reading layer `boston_tracts' from data source \n#   `/home/edzer/R/x86_64-pc-linux-gnu-library/4.0/spData/shapes/boston_tracts.shp' \n#   using driver `ESRI Shapefile'\n# Simple feature collection with 506 features and 36 fields\n# Geometry type: POLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -71.5 ymin: 42 xmax: -70.6 ymax: 42.7\n# Geodetic CRS:  NAD27\n\n\nnb_q <- spdep::poly2nb(boston_506)\nlw_q <- spdep::nb2listw(nb_q, style = \"W\")\n\nIf we examine the median house values, we find that those for censored values have been assigned as missing, and that 17 tracts are affected.\n\ntable(boston_506$censored)\n# \n#  left    no right \n#     2   489    15\n\n\nsummary(boston_506$median)\n#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n#    5600   16800   21000   21749   24700   50000      17\n\nNext, we can subset to the remaining 489 tracts with non-censored house values, and the neighbour object to match. The neighbour object now has one observation with no neighbours.\n\nboston_506$CHAS <- as.factor(boston_506$CHAS)\nboston_489 <- boston_506[!is.na(boston_506$median),]\nnb_q_489 <- spdep::poly2nb(boston_489)\nlw_q_489 <- spdep::nb2listw(nb_q_489, style = \"W\",\n                            zero.policy = TRUE)\n\nThe NOX_ID variable specifies the upper level aggregation, letting us aggregate the tracts to air pollution model output zones. We can create aggregate neighbour and row standardized spatial weights objects, and aggregate the NOX variable taking means, and the CHAS Charles River dummy variable for observations on the river. Here we follow the principles outlined in Section 5.3.1 for spatially extensive and intensive variables; neither NOX nor CHAS can be summed as they are not count variables.\n\nagg_96 <- list(as.character(boston_506$NOX_ID))\nboston_96 <- aggregate(boston_506[, \"NOX_ID\"], by = agg_96,\n                       unique)\nnb_q_96 <- spdep::poly2nb(boston_96)\nlw_q_96 <- spdep::nb2listw(nb_q_96)\nboston_96$NOX <- aggregate(boston_506$NOX, agg_96, mean)$x\nboston_96$CHAS <-\n    aggregate(as.integer(boston_506$CHAS)-1, agg_96, max)$x\n\nThe response is aggregated using the weightedMedian() function in matrixStats, and midpoint values for the house value classes. Counts of houses by value class were punched to check the published census values, which can be replicated using weightedMedian() at the tract level. Here we find two output zones with calculated weighted medians over the upper census question limit of USD 50,000, and remove them subsequently as they also are affected by not knowing the appropriate value to insert for the top class by value. This is a case of spatially extensive aggregation, for which the summation of counts is appropriate:\n\nnms <- names(boston_506)\nccounts <- 23:31\nfor (nm in nms[c(22, ccounts, 36)]) {\n  boston_96[[nm]] <- aggregate(boston_506[[nm]], agg_96, sum)$x\n}\nbr2 <- c(3.50, 6.25, 8.75, 12.5, 17.5, 22.5, 30, 42.5, 60) * 1000\ncounts <- as.data.frame(boston_96)[, nms[ccounts]]\nf <- function(x) matrixStats::weightedMedian(x = br2, w = x,\n                                             interpolate = TRUE)\nboston_96$median <- apply(counts, 1, f)\nis.na(boston_96$median) <- boston_96$median > 50000\nsummary(boston_96$median)\n#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n#    9009   20417   23523   25263   30073   49496       2\n\nBefore subsetting, we aggregate the remaining covariates by weighted mean using the tract population counts punched from the census (R. Bivand 2017); these are spatially intensive variables, not count data.\n\n\n\n\nboston_94 <- boston_96[!is.na(boston_96$median),]\nnb_q_94 <- spdep::subset.nb(nb_q_96, !is.na(boston_96$median))\nlw_q_94 <- spdep::nb2listw(nb_q_94, style=\"W\")\n\nWe now have two data sets at each level, at the lower, census tract level, and at the upper, air pollution model output zone level, one including the censored observations, the other excluding them.\n\nboston_94a <- aggregate(boston_489[,\"NOX_ID\"], \n                        list(boston_489$NOX_ID), unique)\nnb_q_94a <- spdep::poly2nb(boston_94a)\nNOX_ID_no_neighs <-\n        boston_94a$NOX_ID[which(spdep::card(nb_q_94a) == 0)]\nboston_487 <- boston_489[is.na(match(boston_489$NOX_ID,\n                                     NOX_ID_no_neighs)),]\nboston_93 <- aggregate(boston_487[, \"NOX_ID\"],\n                       list(ids = boston_487$NOX_ID), unique)\nrow.names(boston_93) <- as.character(boston_93$NOX_ID)\nnb_q_93 <- spdep::poly2nb(boston_93,\n        row.names = unique(as.character(boston_93$NOX_ID)))\n\nThe original model related the log of median house values by tract to the square of NOX values, including other covariates usually related to house value by tract, such as aggregate room counts, aggregate age, ethnicity, social status, distance to downtown and to the nearest radial road, a crime rate, and town-level variables reflecting land use (zoning, industry), taxation and education (R. Bivand 2017). This structure will be used here to exercise issues raised in fitting spatial regression models, including the presence of multiple levels."
  },
  {
    "objectID": "18-SpatialRegression.html#multilevel-models-of-the-boston-data-set",
    "href": "18-SpatialRegression.html#multilevel-models-of-the-boston-data-set",
    "title": "15  Spatial Regression",
    "section": "15.2 Multilevel models of the Boston data set",
    "text": "15.2 Multilevel models of the Boston data set\nThe ZN, INDUS, NOX, RAD, TAX and PTRATIO variables show effectively no variability within the TASSIM zones, so in a multilevel model the random effect may absorb their influence.\n\nform <- formula(log(median) ~ CRIM + ZN + INDUS + CHAS + \n                I((NOX*10)^2) + I(RM^2) + AGE + log(DIS) +\n                log(RAD) + TAX + PTRATIO + I(BB/100) + \n                log(I(LSTAT/100)))\n\n\nIID random effects with lme4\nThe lme4 package (Bates et al. 2022) lets us add an independent and identically distributed (IID) unstructured random effect at the model output zone level by updating the model formula with a random effects term:\n\nlibrary(Matrix)\nlibrary(lme4)\nMLM <- lmer(update(form, . ~ . + (1 | NOX_ID)), data = boston_487,\n            REML = FALSE)\n\nCopying the random effect into the \"sf\" object for mapping is performed below.\n\nboston_93$MLM_re <- ranef(MLM)[[1]][,1]\n\n\n\nIID and CAR random effects with hglm\nThe same model may be estimated using the hglm package (Alam, Ronnegard, and Shen 2019), which also permits the modelling of discrete responses, this time using an extra one-sided formula to express the random effects term:\n\nsuppressPackageStartupMessages(library(hglm))\nsuppressWarnings(HGLM_iid <- hglm(fixed = form,\n                                  random = ~1 | NOX_ID,\n                                  data = boston_487,\n                                  family = gaussian()))\nboston_93$HGLM_re <- unname(HGLM_iid$ranef)\n\nThe same package has been extended to spatially structured SAR and CAR random effects, for which a sparse spatial weights matrix is required (Alam, Rönnegård, and Shen 2015); we choose binary spatial weights:\n\nlibrary(spatialreg)\nW <- as(spdep::nb2listw(nb_q_93, style = \"B\"), \"CsparseMatrix\")\n\nWe fit a CAR model at the upper level, using the rand.family= argument, where the values of the indexing variable NOX_ID match the row names of \\(W\\):\n\nsuppressWarnings(HGLM_car <- hglm(fixed = form,\n                                  random = ~ 1 | NOX_ID,\n                                  data = boston_487,\n                                  family = gaussian(),\n                                  rand.family = CAR(D=W)))\nboston_93$HGLM_ss <- HGLM_car$ranef[,1]\n\n\n\nIID and ICAR random effects with R2BayesX\nThe R2BayesX package (Umlauf et al. 2022) provides flexible support for structured additive regression models, including spatial multilevel models. The models include an IID unstructured random effect at the upper level using the \"re\" specification in the sx() model term (Umlauf et al. 2015); we choose the \"MCMC\" method:\n\nsuppressPackageStartupMessages(library(R2BayesX))\n\n\nBX_iid <- bayesx(update(form, . ~ . + sx(NOX_ID, bs = \"re\")),\n                 family = \"gaussian\", data = boston_487,\n                 method = \"MCMC\", iterations = 12000,\n                 burnin = 2000, step = 2, seed = 123)\n\n\nboston_93$BX_re <- BX_iid$effects[\"sx(NOX_ID):re\"][[1]]$Mean\n\nand the \"mrf\" (Markov Random Field) spatially structured intrinsic CAR random effect specification based on a graph derived from converting a suitable \"nb\" object for the upper level. The \"region.id\" attribute of the \"nb\" object needs to contain values corresponding to the indexing variable in the sx() effects term, to facilitate the internal construction of design matrix \\(Z\\):\n\nRBX_gra <- nb2gra(nb_q_93)\nall.equal(row.names(RBX_gra), attr(nb_q_93, \"region.id\"))\n# [1] TRUE\n\nAs we saw above in the intrinsic CAR model definition, the counts of neighbours are entered on the diagonal, but the current implementation uses a dense, not sparse, matrix:\n\nall.equal(unname(diag(RBX_gra)), spdep::card(nb_q_93))\n# [1] TRUE\n\nThe sx() model term continues to include the indexing variable, and now passes through the intrinsic CAR precision matrix:\n\nBX_mrf <- bayesx(update(form, . ~ . + sx(NOX_ID, bs = \"mrf\",\n                                         map = RBX_gra)), \n                 family = \"gaussian\", data = boston_487,\n                 method = \"MCMC\", iterations = 12000,\n                 burnin = 2000, step = 2, seed = 123)\n\n\nboston_93$BX_ss <- BX_mrf$effects[\"sx(NOX_ID):mrf\"][[1]]$Mean\n\n\n\nIID, ICAR and Leroux random effects with INLA\nR. Bivand, Gómez-Rubio, and Rue (2015) and V. Gómez-Rubio (2020) present the use of the INLA package (Rue, Lindgren, and Teixeira Krainski 2022) and the inla() model fitting function with spatial regression models:\n\nsuppressPackageStartupMessages(library(INLA))\n\nAlthough differing in details, the approach by updating the fixed model formula with an unstructured random effects term is very similar to that seen above:\n\nINLA_iid <- inla(update(form, . ~ . + f(NOX_ID, model = \"iid\")),\n                 family = \"gaussian\", data = boston_487)\n\n\nboston_93$INLA_re <- INLA_iid$summary.random$NOX_ID$mean\n\nAs with most implementations, care is needed to match the indexing variable with the spatial weights; in this case using indices \\(1, \\dots, 93\\) rather than the NOX_ID variable directly:\n\nID2 <- as.integer(as.factor(boston_487$NOX_ID))\n\nThe same sparse binary spatial weights matrix is used, and the intrinsic CAR representation is constructed internally:\n\nINLA_ss <- inla(update(form, . ~ . + f(ID2, model = \"besag\",\n                                       graph = W)),\n                family = \"gaussian\", data = boston_487)\n\n\nboston_93$INLA_ss <- INLA_ss$summary.random$ID2$mean\n\nThe sparse Leroux representation as given by V. Gómez-Rubio (2020) can be constructed in the following way:\n\nM <- Diagonal(nrow(W), rowSums(W)) - W\nCmatrix <- Diagonal(nrow(M), 1) -  M\n\nThis model can be estimated using the \"generic1\" model with the specified precision matrix:\n\nINLA_lr <- inla(update(form, . ~ . + f(ID2, model = \"generic1\",\n                                       Cmatrix = Cmatrix)),\n                family = \"gaussian\", data = boston_487)\n\n\nboston_93$INLA_lr <- INLA_lr$summary.random$ID2$mean\n\n\n\nICAR random effects with mgcv::gam()\nIn a very similar way, the gam() function in the mgcv package (S. Wood 2022) can take an \"mrf\" term using a suitable \"nb\" object for the upper level. In this case the \"nb\" object needs to have the contents of the \"region.id\" attribute copied as the names of the neighbour list components, and the indexing variable needs to be a factor (S. N. Wood 2017):\n\nlibrary(mgcv)\nnames(nb_q_93) <- attr(nb_q_93, \"region.id\")\nboston_487$NOX_ID <- as.factor(boston_487$NOX_ID)\n\nThe specification of the spatially structured term again differs in details from those above, but achieves the same purpose. The \"REML\" method of bayesx() gives the same results as gam() using \"REML\" in this case:\n\nGAM_MRF <- gam(update(form, . ~ . + s(NOX_ID, bs = \"mrf\",\n                                      xt = list(nb = nb_q_93))),\n               data = boston_487, method = \"REML\")\n\nThe upper level random effects may be extracted by predicting terms; as we can see, the values in all lower-level tracts belonging to the same upper-level air pollution model output zones are identical:\n\nssre <- predict(GAM_MRF, type = \"terms\", \n                se = FALSE)[, \"s(NOX_ID)\"]\nall(sapply(tapply(ssre, list(boston_487$NOX_ID), c),\n           function(x) length(unique(x)) == 1))\n# [1] FALSE\n\nso we can return the first value for each upper-level unit:\n\nboston_93$GAM_ss <- aggregate(ssre, list(boston_487$NOX_ID), \n                              head, n=1)$x\n\n\n\nUpper level random effects: summary\nIn the cases of hglm(), bayesx(), inla() and gam(), we could also model discrete responses without further major difficulty, and bayesx(), inla() and gam() also facilitate the generalization of functional form fitting for included covariates.\nUnfortunately, the coefficient estimates for the air pollution variable for these multilevel models are not helpful. All are negative as expected, but the inclusion of the model output zone level effects, IID or spatially structured, makes it is hard to disentangle the influence of the scale of observation from that of covariates observed at that scale rather than at the tract level.\nFigure 15.1 shows that the air pollution model output zone level IID random effects are very similar across the four model fitting functions reported. In all the maps, the central downtown zones have stronger negative random effect values, but strong positive values are also found in close proximity; suburban areas take values closer to zero.\n\nlibrary(tmap, warn.conflicts=FALSE)\ntm_shape(boston_93) +\n    tm_fill(c(\"MLM_re\", \"HGLM_re\", \"INLA_re\", \"BX_re\"),\n            midpoint = 0, title = \"IID\") +\n    tm_facets(free.scales = FALSE) +\n    tm_borders(lwd = 0.3, alpha = 0.4) + \n    tm_layout(panel.labels = c(\"lmer\", \"hglm\", \"inla\", \"bayesx\"))\n\n\n\n\nFigure 15.1: Air pollution model output zone level IID random effects estimated using lme4, hglm, INLA and R2BayesX; the range of the response, log(median) is 2.1893\n\n\n\n\nFigure 15.2 shows that the spatially structured random effects are also very similar to each other, with the \"SAR\" spatial smooth being perhaps a little smoother than the \"CAR\" smooths when considering the range of values taken by the random effect term.\n\ntm_shape(boston_93) +\n    tm_fill(c(\"HGLM_ss\", \"INLA_lr\", \"INLA_ss\", \"BX_ss\", \"GAM_ss\"),\n            midpoint = 0, title = \"SSRE\") +\n    tm_facets(free.scales = FALSE) + \n    tm_borders(lwd = 0.3, alpha = 0.4) +\n    tm_layout(panel.labels = c(\"hglm CAR\", \"inla Leroux\",\n                               \"inla ICAR\", \"bayesx ICAR\",\n                               \"gam ICAR\"))\n\n\n\n\nFigure 15.2: Air pollution model output zone level spatially structured random effects estimated using hglm, HSAR, INLA, R2BayesX and mgcv\n\n\n\n\nAlthough there is still a great need for more thorough comparative studies of model fitting functions for spatial regression including multilevel capabilities, there has been much progress over recent years. Vranckx, Neyens, and Faes (2019) offer a recent comparative survey of disease mapping spatial regression, typically set in a Poisson regression framework offset by an expected count. In Roger S. Bivand and Gómez-Rubio (2021), methods for estimating spatial survival models using spatial weights matrices are compared with spatial probit models."
  },
  {
    "objectID": "18-SpatialRegression.html#exercises",
    "href": "18-SpatialRegression.html#exercises",
    "title": "15  Spatial Regression",
    "section": "15.3 Exercises",
    "text": "15.3 Exercises\n\nConstruct a multilevel dataset using the Athens housing data in HSAR, as in the vignette: https://cran.r-project.org/web/packages/HSAR/vignettes/PropertiesAthens.html. At which point do the municipality department attribute values get copied out to all the point observations within each municipality department?\nCreate neighbour objects at both levels. Test greensp for spatial autocorrelation at the upper level, and then at the lower level. What has been the chief consequence of copying out the area of green spaces in square meters for the municipality departments to the point support property level?\nUsing the formula object from the vignette, assess whether adding the copied out upper level variables seems sensible. Use mgcv::gam() to fit a linear mixed effects model (IID of num_dep identifying the municipality departments) using just the lower level variables and the lower and upper level variables. Do your conclusions differ?\nComplete the analysis by replacing the IID random effects with an \"mrf\" Markov random field and the contiguity neighbour object created above. Do you think that it is reasonable to for example draw any conclusions based on the municipality department level variables such as greensp?"
  },
  {
    "objectID": "18-SpatialRegression.html#spatial-econometric-models-definitions",
    "href": "18-SpatialRegression.html#spatial-econometric-models-definitions",
    "title": "15  Spatial Regression",
    "section": "16.1 Spatial econometric models: definitions",
    "text": "16.1 Spatial econometric models: definitions\nIn trying to model spatial processes, one of the earliiest spatial econometric representations is to model the spatial autocorrelation in the residual (spatial error model, SEM):\n\\[\n{\\mathbf y} = {\\mathbf X}{\\mathbf \\beta} + {\\mathbf u},\n\\qquad {\\mathbf u} = \\rho_{\\mathrm{Err}} {\\mathbf W} {\\mathbf u} + {\\mathbf \\varepsilon},\n\\]\nwhere \\({\\mathbf y}\\) is an \\((N \\times 1)\\) vector of observations on a response variable taken at each of \\(N\\) locations, \\({\\mathbf X}\\) is an \\((N \\times k)\\) matrix of covariates, \\({\\mathbf \\beta}\\) is a \\((k \\times 1)\\) vector of parameters, \\({\\mathbf u}\\) is an \\((N \\times 1)\\) spatially autocorrelated disturbance vector, \\({\\mathbf \\varepsilon}\\) is an \\((N \\times 1)\\) vector of independent and identically distributed disturbances and \\(\\rho_{\\mathrm{Err}}\\) is a scalar spatial parameter.\nThis model, and other spatial econometric models, do not fit into the mixed models framework. Here the modelled spatial process interacts directly with the response, covariates, and their coefficients. This modelling framework appears to draw on an older tradition extending time series to two dimensions:\n\\[\n{\\mathbf u} = ({\\mathbf I} - \\rho_{\\mathrm{Err}} {\\mathbf W})^{-1} {\\mathbf \\varepsilon},\n\\ \\ {\\mathbf y} = {\\mathbf X}{\\mathbf \\beta} + ({\\mathbf I} - \\rho_{\\mathrm{Err}} {\\mathbf W})^{-1} {\\mathbf \\varepsilon},\n\\ \\ ({\\mathbf I} - \\rho_{\\mathrm{Err}} {\\mathbf W}) {\\mathbf y} = ({\\mathbf I} - \\rho_{\\mathrm{Err}} {\\mathbf W}) {\\mathbf X}{\\mathbf \\beta} + {\\mathbf \\varepsilon}.\n\\]\nIf the processes in the covariates and the response match, we should find little difference between the coefficients of a least squares and a SEM, but very often they diverge, suggesting that a Hausman test for this condition should be employed (Pace and LeSage 2008). This may be related to earlier discussions of a spatial equivalent to the unit root and cointegration where spatial processes match (Fingleton 1999).\nA model with a spatial process in the response only is termed a spatial lag model (SLM, often SAR - spatial autoregressive) (James P. LeSage and Pace 2009). Durbin models add the spatially lagged covariates to the covariates included in the spatial model; spatial Durbin models are reviewed by Mur and Angulo (2006). If it is chosen to admit a spatial process in the residuals in addition to a spatial process in the response, again two models are formed, a general nested model (GNM) nesting all the others, and a model without spatially lagged covariates (SAC, also known as SARAR - Spatial AutoRegressive-AutoRegressive model). If neither the residuals nor the response are modelled with spatial processes, spatially lagged covariates may be added to a linear model, as a spatially lagged X model (SLX) (Elhorst 2010; Roger S. Bivand 2012; J. P. LeSage 2014; Halleck Vega and Elhorst 2015). We can write the general nested model (GNM) as:\n\\[\n{\\mathbf y} = \\rho_{\\mathrm{Lag}} {\\mathbf W}{\\mathbf y} + {\\mathbf X}{\\mathbf \\beta} + {\\mathbf W}{\\mathbf X}{\\mathbf \\gamma} + {\\mathbf u},\n\\qquad {\\mathbf u} = \\rho_{\\mathrm{Err}} {\\mathbf W} {\\mathbf u} + {\\mathbf \\varepsilon},\n\\]\nwhere \\({\\mathbf \\gamma}\\) is a \\((k' \\times 1)\\) vector of parameters. \\(k'\\) defines the subset of the intercept and covariates, often \\(k' = k-1\\) when using row standardised spatial weights and omitting the spatially lagged intercept.\nThis may be constrained to the double spatial coefficient model SAC/SARAR by setting \\({\\mathbf \\gamma} = 0\\), to the spatial Durbin (SDM) by setting \\(\\rho_{\\mathrm{Err}} = 0\\), and to the error Durbin model (SDEM) by setting \\(\\rho_{\\mathrm{Lag}} = 0\\). Imposing more conditions gives the spatial lag model (SLM) with \\({\\mathbf \\gamma} = 0\\) and \\(\\rho_{\\mathrm{Err}} = 0\\), the spatial error model (SEM) with \\({\\mathbf \\gamma} = 0\\) and \\(\\rho_{\\mathrm{Lag}} = 0\\), and the spatially lagged X model (SLX) with \\(\\rho_{\\mathrm{Lag}} = 0\\) and \\(\\rho_{\\mathrm{Err}} = 0\\).\nAlthough making predictions for new locations for which covariates are observed was raised as an issue some time ago, it has taken many years to make progress in reviewing the possibilities (R. S. Bivand 2002; Goulard, Laurent, and Thomas-Agnan 2017; Laurent and Margaretic 2021). The prediction methods for SLM, SDM, SEM, SDEM, SAC and GNM models fitted with maximum likelihood were contributed as a Google Summer of Coding project by Martin Gubri. This work, and work on similar models with missing data (Suesse 2018) is also relevant for exploring censored median house values in the Boston data set. Work on prediction also exposed the importance of the reduced form of these models, in which the spatial process in the response interacts with the regression coefficients in the SLM, SDM, SAC and GNM models.\nThe consequence of these interactions is that a unit change in a covariate will only impact the response as the value of the regression coefficient if the spatial coefficient of the lagged response is zero. Where it is non-zero, global spillovers, impacts, come into play, and these impacts should be reported rather than the regression coefficients (James P. LeSage and Pace 2009; Elhorst 2010; Roger S. Bivand 2012; J. P. LeSage 2014; Halleck Vega and Elhorst 2015). Local impacts may be reported for SDEM and SLX models, using linear combination to calculate standard errors for the total impacts of each covariate (sums of coefficients on the covariates and their spatial lags).\nThis can be seen from the GNM data generation process:\n\\[\n({\\mathbf I} - \\rho_{\\mathrm{Err}} {\\mathbf W})({\\mathbf I} - \\rho_{\\mathrm{Lag}} {\\mathbf W}){\\mathbf y} = ({\\mathbf I} - \\rho_{\\mathrm{Err}} {\\mathbf W})({\\mathbf X}{\\mathbf \\beta} + {\\mathbf W}{\\mathbf X}{\\mathbf \\gamma}) + {\\mathbf \\varepsilon},\n\\]\nre-writing:\n\\[\n{\\mathbf y} = ({\\mathbf I} - \\rho_{\\mathrm{Lag}} {\\mathbf W})^{-1}({\\mathbf X}{\\mathbf \\beta} + {\\mathbf W}{\\mathbf X}{\\mathbf \\gamma}) + ({\\mathbf I} - \\rho_{\\mathrm{Lag}} {\\mathbf W})^{-1}({\\mathbf I} - \\rho_{\\mathrm{Err}} {\\mathbf W})^{-1}{\\mathbf \\varepsilon}.\n\\]\nThere is interaction between the \\(\\rho_{\\mathrm{Lag}}\\) and \\({\\mathbf \\beta}\\) (and \\({\\mathbf \\gamma}\\) if present) coefficients. This can be seen from the partial derivatives: \\(\\partial y_i / \\partial x_{jr} = (({\\mathbf I} - \\rho_{\\mathrm{Lag}} {\\mathbf W})^{-1} ({\\mathbf I} \\beta_r + {\\mathbf W} \\gamma_r))_{ij}\\). This dense matrix \\(S_r({\\mathbf W}) = (({\\mathbf I} - \\rho_{\\mathrm{Lag}} {\\mathbf W})^{-1} ({\\mathbf I} \\beta_r + {\\mathbf W} \\gamma_r))\\) expresses the direct impacts (effects) on its principal diagonal, and indirect impacts in off-diagonal elements.\nPiras and Prucha (2014) revisit and correct Raymond J. G. M. Florax, Folmer, and Rey (2003) (see also comments by Hendry (2006) and Raymond J. G. M. Florax, Folmer, and Rey (2006)), finding that the common use of pre-test strategies for model selection probably ought to be replaced by the estimation of the most general model appropriate for the relationships being modelled. In the light of this finding, pre-test model selection will not be used here.\nCurrent work in the spatialreg package is focused on refining the handling of spatially lagged covariates using a consistent Durbin= argument taking either a logical value or a formula giving the subset of covariates to add in spatially lagged form. There is a speculation that some covariates, for example some dummy variables, should not be added in spatially lagged form. This then extends to handling these included spatially lagged covariates appropriately in calculating impacts. This work applies to cross-sectional models fitted using MCMC or maximum likelihood, and will offer facilities to spatial panel models.\nIt is worth mentioning the almost unexplored issues of functional form assumptions, for which flexible structures are useful, including spatial quantile regression presented in the McSpatial package (McMillen 2013). There are further issues with discrete response variables, covered by some functions in McSpatial, and in the spatialprobit and ProbitSpatial packages (Wilhelm and Matos 2013; Martinetti and Geniaux 2017); the MCMC implementations of the former are based on LeSage and Pace (2009). Finally, Wagner and Zeileis (2019) show how an SLM model may be used in the setting of recursive partitioning, with an implementation using spatialreg::lagsarlm() in the lagsarlmtree package.\nThe review of cross-sectional maximum likelihood and generalized method of moments (GMM) estimators in spatialreg (R. Bivand and Piras 2022) and sphet for spatial econometrics style spatial regression models by Bivand and Piras (2015) is still largely valid. In the review, estimators in these R packages were compared with alternative implementations available in other programming languages elsewhere. The review did not cover Bayesian spatial econometrics style spatial regression. More has changed with respect to spatial panel estimators described in Millo and Piras (2012), but will not be covered here.\nBecause R. Bivand, Millo, and Piras (2021) covers many of the features of R packages for spatial econometrics, updating Roger S. Bivand and Piras (2015), and including recent advances in General Method of Moments and spatial panel modelling, this chapter will be restricted to a small number of examples drawing on R. Bivand (2017) using the Boston house value data set."
  },
  {
    "objectID": "18-SpatialRegression.html#maximum-likelihood-estimation-in-spatialreg",
    "href": "18-SpatialRegression.html#maximum-likelihood-estimation-in-spatialreg",
    "title": "15  Spatial Regression",
    "section": "16.2 Maximum likelihood estimation in spatialreg",
    "text": "16.2 Maximum likelihood estimation in spatialreg\nFor models with single spatial coefficients (SEM and SDEM using errorsarlm(), SLM and SDM using lagsarlm()), the methods initially described by Ord (1975) are used. The following table shows the functions that can be used to estimate the models described above using maximum likelihood.\n\n\n\n\n\n\n\n\nmodel\nmodel name\nmaximum likelihood estimation function\n\n\n\n\nSEM\nspatial error\nerrorsarlm(..., Durbin=FALSE)\n\n\nSEM\nspatial error\nspautolm(..., family=\"SAR\")\n\n\nSDEM\nspatial Durbin error\nerrorsarlm(..., Durbin=TRUE)\n\n\nSLM\nspatial lag\nlagsarlm(..., Durbin=FALSE)\n\n\nSDM\nspatial Durbin\nlagsarlm(..., Durbin=TRUE)\n\n\nSAC\nspatial autoregressive combined\nsacsarlm(..., Durbin=FALSE)\n\n\nGNM\ngeneral nested\nsacsarlm(..., Durbin=TRUE)\n\n\n\nThe estimating functions errorsarlm() and lagsarlm() take similar arguments, where the first two, formula= and data= are shared by most model estimating functions. The third argument is a listw spatial weights object, while na.action= behaves as in other model estimating functions if the spatial weights can reasonably be subsetted to avoid observations with missing values. The weights= argument may be used to provide weights indicating the known degree of per-observation variability in the variance term - this is not available for lagsarlm().\nThe Durbin= argument replaces the earlier type= and etype= arguments, and if not given is taken as FALSE. If given, it may be FALSE, TRUE in which case all spatially lagged covariates are included, or a one-sided formula specifying which spatially lagged covariates should be included. The method= argument gives the method for calculating the log determinant term in the log likelihood function, and defaults to \"eigen\", suitable for moderately sized data sets. The interval= argument gives the bounds of the domain for the line search using stats::optimize() used for finding the spatial coefficient. The tol.solve() argument, passed through to base::solve(), was needed to handle data sets with differing numerical scales among the coefficients which hindered inversion of the variance-covariance matrix; the default value in base::solve() used to be much larger. The control= argument takes a list of control values to permit more careful adjustment of the running of the estimation function.\nThe sacsarlm() function may take second spatial weights and interval arguments if the spatial weights used to model the two spatial processes in the SAC and GNM specifications differ. By default, the same spatial weights are used. By default, stats::nlminb() is used for numerical optimization, using a heuristic to choose starting values. Like lagsarlm(), this function does not take a weights= argument.\nWhere larger data sets are used, a numerical Hessian approach is used to calculate the variance-covariance matrix of coefficients, rather than an analytical asymptotic approach.\n\nBoston house value data set examples\nThe examples use the objects read and created in Chapter 15, based on R. Bivand (2017).\n\neigs_489 <- eigenw(lw_q_489)\nSDEM_489 <- errorsarlm(form, data = boston_489, listw = lw_q_489,\n                       Durbin = TRUE, zero.policy = TRUE,\n                       control = list(pre_eig = eigs_489))\nSEM_489 <- errorsarlm(form, data = boston_489, listw = lw_q_489, \n                      zero.policy = TRUE,\n                      control = list(pre_eig = eigs_489))\n\nHere we are using the control= list argument to pass through pre-computed eigenvalues for the default \"eigen\" method.\n\ncbind(data.frame(model=c(\"SEM\", \"SDEM\")), \n      rbind(broom::tidy(Hausman.test(SEM_489)), \n            broom::tidy(Hausman.test(SDEM_489))))[,1:4]\n#   model statistic  p.value parameter\n# 1   SEM      52.0 2.83e-06        14\n# 2  SDEM      48.7 6.48e-03        27\n\nBoth Hausman test results for the 489 tract data set suggest that the regression coefficients do differ from their non-spatial counterparts, perhaps indicating that the footprints of the spatial processes do not match.\n\neigs_94 <- eigenw(lw_q_94)\nSDEM_94 <- errorsarlm(form, data=boston_94, listw=lw_q_94,\n                      Durbin = TRUE,\n                      control = list(pre_eig=eigs_94))\nSEM_94 <- errorsarlm(form, data = boston_94, listw = lw_q_94,\n                     control = list(pre_eig = eigs_94))\n\nFor the 94 air pollution model output zones, the Hausman tests find little difference between coefficients:\n\ncbind(data.frame(model=c(\"SEM\", \"SDEM\")), \n      rbind(broom::tidy(Hausman.test(SEM_94)), \n            broom::tidy(Hausman.test(SDEM_94))))[, 1:4]\n#   model statistic p.value parameter\n# 1   SEM     15.66   0.335        14\n# 2  SDEM      9.21   0.999        27\n\nThis is related to the fact that the SEM and SDEM models add little to least squares or SLX at the air pollution model output zone level, using likelihood ratio tests:\n\ncbind(data.frame(model=c(\"SEM\", \"SDEM\")),\n      rbind(broom::tidy(LR1.Sarlm(SEM_94)),\n            broom::tidy(LR1.Sarlm(SDEM_94))))[,c(1, 4:6)]\n#   model statistic p.value parameter\n# 1   SEM     2.593   0.107         1\n# 2  SDEM     0.216   0.642         1\n\nWe can use spatialreg::LR.Sarlm() to apply a likelihood ratio test between nested models, but here choose lmtest::lrtest(), which gives the same results, preferring models including spatially lagged covariates both for tracts and model output zones:\n\no <- lmtest::lrtest(SEM_489, SDEM_489)\nattr(o, \"heading\")[2] <- \"Model 1: SEM_489\\nModel 2: SDEM_489\"\no\n# Likelihood ratio test\n# \n# Model 1: SEM_489\n# Model 2: SDEM_489\n#   #Df LogLik Df Chisq Pr(>Chisq)    \n# 1  16    274                        \n# 2  29    311 13  74.4    1.2e-10 ***\n# ---\n# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\no <- lmtest::lrtest(SEM_94, SDEM_94)\nattr(o, \"heading\")[2] <- \"Model 1: SEM_94\\nModel 2: SDEM_94\"\no\n# Likelihood ratio test\n# \n# Model 1: SEM_94\n# Model 2: SDEM_94\n#   #Df LogLik Df Chisq Pr(>Chisq)    \n# 1  16   59.7                        \n# 2  29   81.3 13  43.2    4.2e-05 ***\n# ---\n# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThe SLX model is fitted using least squares, and also returns a log likelihood value, letting us test whether we need a spatial process in the residuals. In the tract data set we obviously do:\n\nSLX_489 <- lmSLX(form, data = boston_489, listw = lw_q_489,\n                 zero.policy = TRUE)\no <- lmtest::lrtest(SLX_489, SDEM_489)\nattr(o, \"heading\")[2] <- \"Model 1: SLX_489\\nModel 2: SDEM_489\"\no\n# Likelihood ratio test\n# \n# Model 1: SLX_489\n# Model 2: SDEM_489\n#   #Df LogLik Df Chisq Pr(>Chisq)    \n# 1  28    231                        \n# 2  29    311  1   159     <2e-16 ***\n# ---\n# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nbut in the output zone case we do not.\n\nSLX_94 <- lmSLX(form, data = boston_94, listw = lw_q_94)\no <- lmtest::lrtest(SLX_94, SDEM_94)\nattr(o, \"heading\")[2] <- \"Model 1: SLX_94\\nModel 2: SDEM_94\"\no\n# Likelihood ratio test\n# \n# Model 1: SLX_94\n# Model 2: SDEM_94\n#   #Df LogLik Df Chisq Pr(>Chisq)\n# 1  28   81.2                    \n# 2  29   81.3  1  0.22       0.64\n\nThese outcomes are sustained also when we use the counts of house units by tract and output zones as case weights:\n\nSLX_489w <- lmSLX(form, data = boston_489, listw = lw_q_489,\n                  weights = units, zero.policy = TRUE)\nSDEM_489w <- errorsarlm(form, data = boston_489,\n                        listw = lw_q_489, Durbin = TRUE,\n                        weights = units, zero.policy = TRUE,\n                        control = list(pre_eig = eigs_489))\no <- lmtest::lrtest(SLX_489w, SDEM_489w)\nattr(o, \"heading\")[2] <- \"Model 1: SLX_489w\\nModel 2: SDEM_489w\"\no\n# Likelihood ratio test\n# \n# Model 1: SLX_489w\n# Model 2: SDEM_489w\n#   #Df LogLik Df Chisq Pr(>Chisq)    \n# 1  28    311                        \n# 2  29    379  1   136     <2e-16 ***\n# ---\n# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nSLX_94w <- lmSLX(form, data = boston_94, listw = lw_q_94,\n                 weights = units)\nSDEM_94w <- errorsarlm(form, data = boston_94, listw = lw_q_94,\n                       Durbin = TRUE, weights = units,\n                       control = list(pre_eig = eigs_94))\no <- lmtest::lrtest(SLX_94w, SDEM_94w)\nattr(o, \"heading\")[2] <- \"Model 1: SLX_94w\\nModel 2: SDEM_94w\"\no\n# Likelihood ratio test\n# \n# Model 1: SLX_94w\n# Model 2: SDEM_94w\n#   #Df LogLik Df Chisq Pr(>Chisq)\n# 1  28   97.5                    \n# 2  29   98.0  1  0.92       0.34\n\nIn this case and based on arguments advanced in R. Bivand (2017), the use of weights is justified because tract counts of reported housing units underlying the weighted median values vary from 5 to 3,031, and air pollution model output zone counts vary from 25 to 12,411. Because of this, and because a weighted general nested model has not been developed, we cannot take the GNM as the starting point for general-to-simpler testing, but start rather from the SDEM model, and use the Hausman test to guide the choice of units of observation."
  },
  {
    "objectID": "18-SpatialRegression.html#impacts",
    "href": "18-SpatialRegression.html#impacts",
    "title": "15  Spatial Regression",
    "section": "16.3 Impacts",
    "text": "16.3 Impacts\nGlobal impacts have been seen as crucial for reporting results from fitting models including the spatially lagged response (SLM, SDM, SAC, GNM) for over ten years (James P. LeSage and Pace 2009). Extension to other models including spatially lagged covariates (SLX, SDEM) has followed (Elhorst 2010; Roger S. Bivand 2012; Halleck Vega and Elhorst 2015). For SLM, SDM, SAC and GNM models fitted with maximum likelihood or GMM, the variance-covariance matrix of the coefficients is available, and can be used to make random draws from a multivariate Normal distribution with mean set to coefficient values and variance to the estimated variance-covariance matrix. For these models fitted using Bayesian methods, draws are already available. In the SDEM case, the draws on the regression coefficients of the unlagged covariates represent direct impacts, and draws on the coefficients of the spatially lagged covariates represent indirect impacts, and their by-draw sums the total impacts.\nSince sampling is not required for inference for SLX and SDEM models, linear combination is used for models fitted using maximum likelihood; results are shown here for the air pollution variable only. The literature has not yet resolved the question of how to report model output, as each covariate is now represented by three impacts. Where spatially lagged covariates are included, two coefficients are replaced by three impacts, here for the air pollution variable of interest.\n\nsum_imp_94_SDEM <- summary(impacts(SDEM_94))\nrbind(Impacts = sum_imp_94_SDEM$mat[5,], \n      SE = sum_imp_94_SDEM$semat[5,])\n#           Direct Indirect   Total\n# Impacts -0.01276 -0.01845 -0.0312\n# SE       0.00235  0.00472  0.0053\n\nIn the SLX and SDEM models, the direct impacts are the consequences for the response of changes in air pollution in the same observational entity, and the indirect (local) impacts are the consequences for the response of changes in air pollution in neighbouring observational entities.\n\nsum_imp_94_SLX <- summary(impacts(SLX_94))\nrbind(Impacts = sum_imp_94_SLX$mat[5,], \n      SE = sum_imp_94_SLX$semat[5,])\n#          Direct Indirect    Total\n# Impacts -0.0128 -0.01874 -0.03151\n# SE       0.0028  0.00556  0.00611\n\nApplying the same approaches to the weighted spatial regressions, the total impacts of air pollution on house values are reduced, but remain significant:\n\nsum_imp_94_SDEMw <- summary(impacts(SDEM_94w))\nrbind(Impacts = sum_imp_94_SDEMw$mat[5,], \n      SE = sum_imp_94_SDEMw$semat[5,])\n#           Direct Indirect    Total\n# Impacts -0.00592 -0.01076 -0.01668\n# SE       0.00269  0.00531  0.00559\n\nOn balance, using a weighted spatial regression representation including only the spatially lagged covariates aggregated to the air pollution model output zone level seems to clear most of the mis-specification issues, and as R. Bivand (2017) discusses in more detail, gives a willingness to pay for pollution abatement that is much larger than mis-specified alternative models:\n\nsum_imp_94_SLXw <- summary(impacts(SLX_94w))\nrbind(Impacts = sum_imp_94_SLXw$mat[5,], \n      SE = sum_imp_94_SLXw$semat[5,])\n#           Direct Indirect    Total\n# Impacts -0.00620 -0.01221 -0.01842\n# SE       0.00326  0.00628  0.00629"
  },
  {
    "objectID": "18-SpatialRegression.html#sec-spateconpred",
    "href": "18-SpatialRegression.html#sec-spateconpred",
    "title": "15  Spatial Regression",
    "section": "16.4 Predictions",
    "text": "16.4 Predictions\nIn the Boston tracts data set, 17 observations of median house values, the response, are censored. We will use the predict() method for \"Sarlm\" objects to fill in these values; the method was re-written by Martin Gubri based on Goulard, Laurent, and Thomas-Agnan (2017; see also Laurent and Margaretic 2021). The pred.type= argument specifies the prediction strategy among those presented in the article.\nUsing these as an example and comparing some pred.type= variants for the SDEM model and predicting out-of-sample, we can see that there are differences, suggesting that this is a fruitful area for study. There have been a number of alternative proposals for handling missing variables (Virgilio Gómez-Rubio, Bivand, and Rue 2015; Suesse 2018). Another reason for increasing attention on prediction is that it is fundamental for machine learning approaches, in which prediction for validation and test data sets drives model specification choice. The choice of training and other data sets with dependent spatial data remains an open question, and is certainly not as simple as with independent data.\nHere, we’ll list the predictions for the censored tract observations using three different prediction types, taking the exponent to get back to the USD median house values. Note that the row.names() of the newdata= object are matched with the whole-data spatial weights matrix \"region.id\" attribute to make out-of-sample prediction possible:\n\nnd <- boston_506[is.na(boston_506$median),]\nt0 <- exp(predict(SDEM_489, newdata = nd, listw = lw_q, \n                  pred.type = \"TS\", zero.policy  =TRUE))\nsuppressWarnings(t1  <- exp(predict(SDEM_489, newdata = nd,\n                                    listw = lw_q,\n                                    pred.type = \"KP2\",\n                                    zero.policy = TRUE)))\nsuppressWarnings(t2  <- exp(predict(SDEM_489, newdata = nd,\n                                    listw = lw_q,\n                                    pred.type = \"KP5\",\n                                    zero.policy = TRUE)))\n\nWe can also use the \"slm\" model in INLA to predict missing response values as part of the model fitting function call. A certain amount of set-up code is required as the \"slm\" model is still experimental:\n\nlibrary(INLA)\nW <- as(lw_q, \"CsparseMatrix\")\nn <- nrow(W)\ne <- eigenw(lw_q)\nre.idx <- which(abs(Im(e)) < 1e-6)\nrho.max <- 1 / max(Re(e[re.idx]))\nrho.min <- 1 / min(Re(e[re.idx]))\nrho <- mean(c(rho.min, rho.max))\nboston_506$idx <- 1:n\nzero.variance = list(prec = list(initial = 25, fixed = TRUE))\nargs.slm <- list(rho.min = rho.min, rho.max = rho.max, W = W,\n                 X = matrix(0, n, 0), Q.beta = matrix(1,0,0))\nhyper.slm <- list(prec = list(prior = \"loggamma\", \n                              param = c(0.01, 0.01)),\n                  rho = list(initial = 0, prior = \"logitbeta\",\n                             param = c(1,1)))\nWX <- create_WX(model.matrix(update(form, CMEDV ~ .), \n                             data = boston_506), lw_q)\nSDEM_506_slm <- inla(update(form, \n                            . ~ . + WX + f(idx, model = \"slm\",\n                                         args.slm = args.slm,\n                                         hyper = hyper.slm)),\n                 data = boston_506, family = \"gaussian\",\n                 control.family = list(hyper = zero.variance),\n                 control.compute = list(dic = TRUE, cpo = TRUE))\nmv_mean <- exp(SDEM_506_slm$summary.fitted.values$mean[\n               which(is.na(boston_506$median))])\n\nINLA also provide gridded estimates of the marginal distributions of the predictions, offering a way to assess the uncertainty associated with the predicted values:\n\ndata.frame(fit_TS = t0[,1], fit_KP2 = c(t1), fit_KP5 = c(t2),\n    INLA_slm = mv_mean,\n    censored = boston_506$censored[as.integer(attr(t0, \n                                                   \"region.id\"))])\n#     fit_TS fit_KP2 fit_KP5 INLA_slm censored\n# 13   23912   29477   28147    31117    right\n# 14   28126   27001   28516    31376    right\n# 15   30553   36184   32476    41142    right\n# 17   18518   19621   18878    21113    right\n# 43    9564    6817    7561     6855     left\n# 50    8371    7196    7383     6888     left\n# 312  51477   53301   54173    56296    right\n# 313  45921   45823   47095    46509    right\n# 314  44196   44586   45361    42834    right\n# 317  43427   45707   45442    48004    right\n# 337  39879   42072   41127    41437    right\n# 346  44708   46694   46108    45831    right\n# 355  48188   49068   48911    49129    right\n# 376  42881   45883   44966    47705    right\n# 408  44294   44615   45670    46259    right\n# 418  38211   43375   41914    43860    right\n# 434  41647   41690   42398    41546    right\n\nThe spatial regression toolbox remains incomplete, and it will take time to fill in blanks. It remains unfortunate that the several traditions in spatial regression seldom seem to draw on each others’ understandings and advances."
  },
  {
    "objectID": "18-SpatialRegression.html#exercises-1",
    "href": "18-SpatialRegression.html#exercises-1",
    "title": "15  Spatial Regression",
    "section": "16.5 Exercises",
    "text": "16.5 Exercises\n\nReferring to Piras and Prucha (2014) and Raymond J. G. M. Florax, Folmer, and Rey (2003), if we choose to use a pre-test strategy, do linear models of the properties-only data set and the properties with added municipality department variables show residual spatial dependence? Which model specifications might the pre-tests indicate?\nCould the inclusion of municipality department dummies, or a municipality department regimes model assist in reducing residual spatial dependence?\nAttempt to fit a SEM specification by maximum likelihood (see R. Bivand, Millo, and Piras (2021) for GMM code examples) to the properties-only and the properties with added municipality department variables models; extend to an SDEM model. Repeat with SLX models; how might the changes in the tests of residual autocorrelation in the SLX models be interpreted? How might you interpret the highly significant outcomes of Hausman tests on the SEM and SDEM models?\nFit GNM specifications to the properties-only and the properties with added municipality department variables models; can these models be simplified to say SDM or SDEM representations?\nDo the model estimates reached in the chapter 16 exercises provide more clarity than those in this chapter?\n\n\n\n\n\nAlam, Moudud, Lars Ronnegard, and Xia Shen. 2019. Hglm: Hierarchical Generalized Linear Models. https://CRAN.R-project.org/package=hglm.\n\n\nAlam, Moudud, Lars Rönnegård, and Xia Shen. 2015. “Fitting Conditional and Simultaneous Autoregressive Spatial Models in Hglm.” The R Journal 7 (2): 5–18. https://doi.org/10.32614/RJ-2015-017.\n\n\nAnselin, L. 1988. Spatial Econometrics: Methods and Models. Kluwer Academic Publishers.\n\n\nBates, Douglas, Martin Maechler, Ben Bolker, and Steven Walker. 2022. Lme4: Linear Mixed-Effects Models Using Eigen and S4. https://github.com/lme4/lme4/.\n\n\nBesag, Julian. 1974. “Spatial Interaction and the Statistical Analysis of Lattice Systems.” Journal of the Royal Statistical Society. Series B (Methodological) 36: pp. 192–236.\n\n\nBivand, R. S. 2002. “Spatial Econometrics Functions in R: Classes and Methods.” Journal of Geographical Systems 4: 405–21.\n\n\nBivand, Roger. 2017. “Revisiting the Boston Data Set — Changing the Units of Observation Affects Estimated Willingness to Pay for Clean Air.” REGION 4 (1): 109–27. https://doi.org/10.18335/region.v4i1.107.\n\n\nBivand, Roger S. 2012. “After ’Raising the Bar’: Applied Maximum Likelihood Estimation of Families of Models in Spatial Econometrics.” Estadística Española 54: 71–88.\n\n\nBivand, Roger S, and Virgilio Gómez-Rubio. 2021. “Spatial Survival Modelling of Business Re-Opening After Katrina: Survival Modelling Compared to Spatial Probit Modelling of Re-Opening Within 3, 6 or 12 Months.” Statistical Modelling 21 (1-2): 137–60. https://doi.org/10.1177/1471082X20967158.\n\n\nBivand, Roger S., and Gianfranco Piras. 2015. “Comparing Implementations of Estimation Methods for Spatial Econometrics.” Journal of Statistical Software 63 (1): 1–36. https://doi.org/10.18637/jss.v063.i18.\n\n\nBivand, Roger S., Zhe Sha, Liv Osland, and Ingrid Sandvig Thorsen. 2017. “A Comparison of Estimation Methods for Multilevel Models of Spatially Structured Data.” Spatial Statistics. https://doi.org/10.1016/j.spasta.2017.01.002.\n\n\nBivand, Roger, Virgilio Gómez-Rubio, and Håvard Rue. 2015. “Spatial Data Analysis with r-INLA with Some Extensions.” Journal of Statistical Software, Articles 63 (20): 1–31. https://doi.org/10.18637/jss.v063.i20.\n\n\nBivand, Roger, Giovanni Millo, and Gianfranco Piras. 2021. “A Review of Software for Spatial Econometrics in R.” Mathematics 9 (11). https://doi.org/10.3390/math9111276.\n\n\nBivand, Roger, Jakub Nowosad, and Robin Lovelace. 2021. spData: Datasets for Spatial Analysis. https://nowosad.github.io/spData/.\n\n\nBivand, Roger, and Gianfranco Piras. 2022. Spatialreg: Spatial Regression Analysis. https://CRAN.R-project.org/package=spatialreg.\n\n\nBrooks, Mollie E., Kasper Kristensen, Koen J. van Benthem, Arni Magnusson, Casper W. Berg, Anders Nielsen, Hans J. Skaug, Martin Maechler, and Benjamin M. Bolker. 2017. “glmmTMB Balances Speed and Flexibility Among Packages for Zero-Inflated Generalized Linear Mixed Modeling.” The R Journal 9 (2): 378–400. https://journal.r-project.org/archive/2017/RJ-2017-066/index.html.\n\n\nCliff, A. D., and J. K. Ord. 1973. Spatial Autocorrelation. London: Pion.\n\n\n———. 1981. Spatial Processes. London: Pion.\n\n\nCliff, A., and J. K. Ord. 1972. “Testing for Spatial Autocorrelation Among Regression Residuals.” Geographical Analysis 4: 267–84.\n\n\nCressie, N. A. C. 1993. Statistics for Spatial Data. New York:Wiley.\n\n\nElhorst, J. Paul. 2010. “Applied Spatial Econometrics: Raising the Bar.” Spatial Economic Analysis 5: 9–28.\n\n\nFingleton, B. 1999. “Spurious spatial regression: Some Monte Carlo results with a spatial unit root and spatial cointegration.” Journal of Regional Science 9: 1–19.\n\n\nFlorax, Raymond J. G. M., Hendrik Folmer, and Sergio J. Rey. 2006. “A Comment on Specification Searches in Spatial Econometrics: The Relevance of Hendry’s Methodology: A Reply.” Regional Science and Urban Economics 36 (2): 300–308. https://doi.org/10.1016/j.regsciurbeco.2005.10.002.\n\n\nFlorax, Raymond J. G. M, Hendrik Folmer, and Sergio J Rey. 2003. “Specification Searches in Spatial Econometrics: The Relevance of Hendry’s Methodology.” Regional Science and Urban Economics 33 (5): 557–79. https://doi.org/10.1016/S0166-0462(03)00002-4.\n\n\nGaetan, Carlo, and Xavier Guyon. 2010. Spatial Statistics and Modeling. New York: Springer.\n\n\nGerber, Florian, and Reinhard Furrer. 2015. “Pitfalls in the Implementation of Bayesian Hierarchical Modeling of Areal Count Data: An Illustration Using BYM and Leroux Models.” Journal of Statistical Software, Code Snippets 63 (1): 1–32. https://doi.org/10.18637/jss.v063.c01.\n\n\nGómez-Rubio, V. 2019. “Spatial Data Analysis with INLA. Coding Club Uc3m Tutorial Series. Universidad Carlos III de Madrid.” https://codingclubuc3m.rbind.io/talk/2019-11-05/.\n\n\n———. 2020. Bayesian Inference with INLA. Boca Raton, FL: CRC Press.\n\n\nGómez-Rubio, Virgilio, Roger Bivand, and Håvard Rue. 2015. “A New Latent Class to Fit Spatial Econometrics Models with Integrated Nested Laplace Approximations.” Procedia Environmental Sciences 27: 116–18. https://doi.org/https://doi.org/10.1016/j.proenv.2015.07.119.\n\n\nGoulard, Michel, Thibault Laurent, and Christine Thomas-Agnan. 2017. “About Predictions in Spatial Autoregressive Models: Optimal and Almost Optimal Strategies.” Spatial Economic Analysis 12 (2-3): 304–25. https://doi.org/10.1080/17421772.2017.1300679.\n\n\nHalleck Vega, Solmaria, and J. Paul Elhorst. 2015. “The SLX Model.” Journal of Regional Science 55 (3): 339–63. https://doi.org/10.1111/jors.12188.\n\n\nHendry, David F. 2006. “A Comment on ‘Specification Searches in Spatial Econometrics: The Relevance of Hendry’s Methodology’.” Regional Science and Urban Economics 36 (2): 309–12. https://doi.org/10.1016/j.regsciurbeco.2005.10.001.\n\n\nHepple, Leslie W. 1976. “A Maximum Likelihood Model for Econometric Estimation with Spatial Series.” In Theory and Practice in Regional Science, edited by I. Masser, 90–104. London Papers in Regional Science. London: Pion.\n\n\nKelejian, Harry, and Gianfranco Piras. 2017. Spatial Econometrics. London: Academic Press.\n\n\nLaurent, Thibault, and Paula Margaretic. 2021. “Predictions in Spatial Econometric Models: Application to Unemployment Data.” In Advances in Contemporary Statistics and Econometrics: Festschrift in Honor of Christine Thomas-Agnan, edited by Abdelaati Daouia and Anne Ruiz-Gazen, 409–26. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-030-73249-3_21.\n\n\nLeSage, J. P. 2014. “What Regional Scientists Need to Know about Spatial Econometrics.” Review of Regional Studies 44: 13–32. https://journal.srsa.org/ojs/index.php/RRS/article/view/44.1.2.\n\n\nLeSage, James P., and Kelley R. Pace. 2009. Introduction to Spatial Econometrics. Boca Raton, FL: CRC Press.\n\n\nLieshout, M. N. M. van. 2019. Theory of Spatial Statistics. Boca Raton, FL: Chapman; Hall/CRC.\n\n\nMartinetti, Davide, and Ghislain Geniaux. 2017. “Approximate Likelihood Estimation of Spatial Probit Models.” Regional Science and Urban Economics 64: 30–45. https://doi.org/https://doi.org/10.1016/j.regsciurbeco.2017.02.002.\n\n\nMcCulloch, Charles E., and Shayle R. Searle. 2001. Generalized, Linear, and Mixed Models. New York: Wiley.\n\n\nMcMillen, D. P. 2013. Quantile Regression for Spatial Data. Heidelberg: Springer-Verlag.\n\n\nMillo, Giovanni, and Gianfranco Piras. 2012. “splm: Spatial Panel Data Models in R.” Journal of Statistical Software 47 (1): 1–38.\n\n\nMur, Jesús, and Ana Angulo. 2006. “The Spatial Durbin Model and the Common Factor Tests.” Spatial Economic Analysis 1 (2): 207–26. https://doi.org/10.1080/17421770601009841.\n\n\nOrd, J. K. 1975. “Estimation Methods for Models of Spatial Interaction.” Journal of the American Statistical Association 70 (349): 120–26.\n\n\nPace, RK, and JP LeSage. 2008. “A Spatial Hausman Test.” Economics Letters 101: 282–84.\n\n\nPinheiro, Jose C., and Douglas M. Bates. 2000. Mixed-Effects Models in S and S-Plus. New York: Springer.\n\n\nPiras, Gianfranco, and Ingmar R. Prucha. 2014. “On the Finite Sample Properties of Pre-Test Estimators of Spatial Models.” Regional Science and Urban Economics 46: 103–15. https://doi.org/10.1016/j.regsciurbeco.2014.03.002.\n\n\nRipley, B. D. 1981. Spatial Statistics. New York: Wiley.\n\n\n———. 1988. Statistical Inference for Spatial Processes. Cambridge: Cambridge University Press.\n\n\nRue, Havard, Finn Lindgren, and Elias Teixeira Krainski. 2022. INLA: Full Bayesian Analysis of Latent Gaussian Models Using Integrated Nested Laplace Approximations.\n\n\nSmith, T. E., and K. L. Lee. 2012. “The effects of spatial autoregressive dependencies on inference in ordinary least squares: a geometric approach.” Journal of Geographical Systems 14 (January): 91–124. https://doi.org/10.1007/s10109-011-0152-x.\n\n\nSmith, Tony E. 2009. “Estimation Bias in Spatial Models with Strongly Connected Weight Matrices.” Geographical Analysis 41 (3): 307–32. https://doi.org/10.1111/j.1538-4632.2009.00758.x.\n\n\nSuesse, Thomas. 2018. “Marginal Maximum Likelihood Estimation of SAR Models with Missing Data.” Computational Statistics & Data Analysis 120: 98–110. https://doi.org/https://doi.org/10.1016/j.csda.2017.11.004.\n\n\nUmlauf, Nikolaus, Daniel Adler, Thomas Kneib, Stefan Lang, and Achim Zeileis. 2015. “Structured Additive Regression Models: An R Interface to BayesX.” Journal of Statistical Software 63 (21): 1–46. http://www.jstatsoft.org/v63/i21/.\n\n\nUmlauf, Nikolaus, Thomas Kneib, Stefan Lang, and Achim Zeileis. 2022. R2BayesX: Estimate Structured Additive Regression Models with BayesX. https://CRAN.R-project.org/package=R2BayesX.\n\n\nVranckx, M., T. Neyens, and C. Faes. 2019. “Comparison of Different Software Implementations for Spatial Disease Mapping.” Spatial and Spatio-Temporal Epidemiology 31: 100302. https://doi.org/10.1016/j.sste.2019.100302.\n\n\nWagner, Martin, and Achim Zeileis. 2019. “Heterogeneity and Spatial Dependence of Regional Growth in the EU: A Recursive Partitioning Approach.” German Economic Review 20 (1): 67–82. https://doi.org/10.1111/geer.12146.\n\n\nWall, M. M. 2004. “A Close Look at the Spatial Structure Implied by the CAR and SAR Models.” Journal of Statistical Planning and Inference 121: 311–24.\n\n\nWaller, Lance A., and Carol A. Gotway. 2004. Applied Spatial Statistics for Public Health Data. Hoboken, NJ: John Wiley & Sons.\n\n\nWhittle, P. 1954. “On Stationary Processes in the Plane.” Biometrika 41 (3-4): 434–49. https://doi.org/10.1093/biomet/41.3-4.434.\n\n\nWilhelm, Stefan, and Miguel Godinho de Matos. 2013. “Estimating Spatial Probit Models in R.” The R Journal 5 (1): 130–43. https://doi.org/10.32614/RJ-2013-013.\n\n\nWood, S. N. 2017. Generalized Additive Models: An Introduction with r. 2nd ed. Chapman; Hall/CRC.\n\n\nWood, Simon. 2022. Mgcv: Mixed GAM Computation Vehicle with Automatic Smoothness Estimation. https://CRAN.R-project.org/package=mgcv."
  },
  {
    "objectID": "30-sp-raster.html",
    "href": "30-sp-raster.html",
    "title": "16  Older R Spatial Packages",
    "section": "",
    "text": "R users who have been around a bit longer, in particular before packages like sf and stars were developed, may be more familiar with older packages like maptools, sp, rgeos, and rgdal. A fair question is whether they should migrate existing code and/or existing R packages depending on these packages. The answer is: yes.\nUnless someone steps up to volunteer maintaining packages maptools, rgdal and rgeos, the plan is to retire packages by the end of 2023. Retirement means that maintenance will halt, and that as a consequence the packages will sooner or later disappear from CRAN. One reason for retirement is that their maintainer has retired, another that their role has been superseded by the newer packages. We hold it not for very likely that a new maintainer will take over, in part because much of the code of these packages has over a few decades gradually evolved along with developments in the GEOS, GDAL and PROJ libraries, and now contains numerous constructs that are no longer necessary and make it hard to read.\nBefore rgeos and rgdal retire, existing ties that package sp has to rgdal and rgeos can and will be replaced by ties to package sf. This only involves validation of coordinate reference system identifiers, and checking whether rings are holes or exterior rings. Theoretically one could replace rgdal and rgeos with packages that would call into sf for their ties to the GEOS, GDAL and PROJ libraries but that would involve a major effort."
  },
  {
    "objectID": "30-sp-raster.html#links-and-differences-between-sf-and-sp",
    "href": "30-sp-raster.html#links-and-differences-between-sf-and-sp",
    "title": "16  Older R Spatial Packages",
    "section": "16.2 Links and differences between sf and sp",
    "text": "16.2 Links and differences between sf and sp\nThere are a number of differences between sf and sp. The most notable is that sp classes are formal, S4 classes where sf uses the (more) informal S3 class hierarchy. sf objects are derived from data.frames or tibbles and because of that are more readily interfaceable with much of the existing R ecosystem, especially with the tidyverse package family. sf objects keep geometry in a list-column, meaning that a geometry is always a list element. Package sp used data structures much less strictly, and for instance all coordinates of SpatiaPoints or SpatialPixels are kept in matrices, which is much more performant for certain problems but is not possible with a list-column. Conversion from an sf object x to its sp equivalent is done by\n\nlibrary(sp)\ny = as(x, \"Spatial\")\n\nand the conversion the other way around is done by\n\nx0 = st_as_sf(y)\n\nThere are some limitations to conversions like this:\n\nsp does not distinguish between LINESTRING and MULTILINESTRING geometries, or between POLYGON or MULTIPOLYGON, so e.g. a LINESTRING will after conversion to sp come back as a MULTILINESTRING\nsp does have no representation for GEOMETRYCOLLECTION geometries, or sf objects with geometries not in the “big seven”\n\n\n\n\n\nsf or sfc objects of geometry type GEOMETRY, with mixed geometry types, cannot be converted into sp objects\nattribute-geometry relationship attributes get lost when converting to sp\nsf objects with more than one geometry list-column will, when converting to sp, loose their secondary list-column(s)."
  },
  {
    "objectID": "30-sp-raster.html#migration-code-and-packages",
    "href": "30-sp-raster.html#migration-code-and-packages",
    "title": "16  Older R Spatial Packages",
    "section": "16.3 Migration code and packages",
    "text": "16.3 Migration code and packages\nThe wiki page of the GitHub site for sf, found at\nhttps://github.com/r-spatial/sf/wiki/Migrating\ncontains a list of methods and functions in rgeos, rgdal and sp and the corresponding sf method or function. This may help converting existing code or packages.\nA simple approach to migrate code is when only rgdal::readOGR is used to read file. As an alternative, one might use\n\nx = as(sf::read_sf(\"file\"), \"Spatial\")\n\nhowever possible arguments to readOGR, when used, would need more care.\nAn effort by us is underway to convert all code of our earlier book “Applied Spatial Data Analysis with R” (with Virgilio Gomez-Rubio, Bivand, Pebesma, and Gomez-Rubio (2013)) to run entirely without rgdal, rgeos and maptools and where possible without sp. The scripts are found at https://github.com/rsbivand/sf_asdar2ed ."
  },
  {
    "objectID": "30-sp-raster.html#package-raster-and-terra",
    "href": "30-sp-raster.html#package-raster-and-terra",
    "title": "16  Older R Spatial Packages",
    "section": "16.4 Package raster and terra",
    "text": "16.4 Package raster and terra\nPackage raster has been a workhorse package for analysing raster data with R since 2010, and has since then grown into a package for “Geographic Data Analysis and Modeling” (Hijmans 2022a), indicating that it is used for all kinds of spatial data. The raster package uses sp objects for vector data, and rgdal to read and write data to formats served by the GDAL library. Its successor package terra, for “Spatial Data Analysis” (Hijmans 2022b), “is very similar to the raster package; but […] can do more, is easier to use, and […] is faster”. The terra package comes with its own classes for vector data, but accepts many sf objects, with similar restrictions as listed above for conversion to sp. Package terra has its own direct links to GDAL, GEOS and PROJ so no longer needs other packages for that.\nRaster maps, or stacks of them from package raster or terra can be converted to stars objects using st_as_stars(). Package sf contains an st_as_sf() method for SpatVector objects from package terra. Migration from raster to terra may become more important once rgdal is no longer easily installable (Section 16.1).\nThe online book “Spatial Data Science with R”, written by Robert Hijmans and found at https://rspatial.org/terra details the terra approach to spatial data analysis. Package sf and stars and several other r-spatial packages discussed in this book reside on the r-spatial GitHub organisation (note the hyphen between r and spatial, which is absent on Hijmans’ organisation), which has a blog site, with links to this book, found at https://r-spatial.org/ .\nPackages sf and stars on one hand and terra on the other have many goals in common, but try to reach them in slightly different ways, emphasizing different aspects of data analysis, software engineering, and community management. Although this may confuse some users, we believe that these differences enrich the R package ecosystem, are beneficial to users, encourage diversity and choice, and hopefully work as an encouragement for others to continue trying out new ideas when using R for spatial data problems, and to help carrying the R spatial flag.\n\n\n\n\nBivand, Roger S., Edzer Pebesma, and Virgilio Gomez-Rubio. 2013. Applied Spatial Data Analysis with R, Second Edition. Springer, NY. http://www.asdar-book.org/.\n\n\nHijmans, Robert J. 2022a. Raster: Geographic Data Analysis and Modeling. https://rspatial.org/raster.\n\n\n———. 2022b. Terra: Spatial Data Analysis. https://rspatial.org/terra/."
  },
  {
    "objectID": "97-allcode.html",
    "href": "97-allcode.html",
    "title": "All R code in this book",
    "section": "",
    "text": "# All R code in this book {-}"
  },
  {
    "objectID": "98-rbascis.html",
    "href": "98-rbascis.html",
    "title": "R basics",
    "section": "",
    "text": "This chapter provides some minimal R basics that may make it easier to read this book. A more comprehensive book on R basics is given in (Wickham 2014), chapter 2."
  },
  {
    "objectID": "98-rbascis.html#pipes",
    "href": "98-rbascis.html#pipes",
    "title": "R basics",
    "section": "Pipes",
    "text": "Pipes\nThe |> (pipe) symbols should be read as then: we read\n\na |> b() |> c() |> d(n = 10)\n\nas with a do b then c then d with n being 10, and that is just alternative syntax for\n\nd(c(b(a)), n = 10)\n\nor\n\ntmp1 <- b(a)\ntmp2 <- c(tmp1)\ntmp3 <- d(tmp2, n = 10)\n\nTo many, the pipe-form is easier to read because execution order follows reading order, from left to right. Like nested function calls, it avoids the need to choose names for intermediate results, as with nested function calls it is hard to debug intermediate results that diverge from our expectations. Note that the intermediate results do exist in memory, so neither form saves memory allocation. The |> native pipe that appeared in R 4.1.0 as used in this book, can be savely substituted by the %>% pipe of package magrittr."
  },
  {
    "objectID": "98-rbascis.html#data-structures",
    "href": "98-rbascis.html#data-structures",
    "title": "R basics",
    "section": "Data structures",
    "text": "Data structures\nAs pointed out by (Chambers 2016), everything that exists in R is an object. This includes objects that make things happen, such as language objects or functions, but also the more basic “things”, such as data objects. Some basic R data structures will now be discussed.\n\nHomogeneous vectors\nData objects contain data, and possibly metadata. Data is always in the form of a vector, which can have different type. We can find the type by typeof, and vector length by length. Vectors are created by c, which combines individual elements:\n\ntypeof(1:10)\n# [1] \"integer\"\nlength(1:10)\n# [1] 10\ntypeof(1.0)\n# [1] \"double\"\nlength(1.0)\n# [1] 1\ntypeof(c(\"foo\", \"bar\"))\n# [1] \"character\"\nlength(c(\"foo\", \"bar\"))\n# [1] 2\ntypeof(c(TRUE, FALSE))\n# [1] \"logical\"\n\nVectors of this kind can only have a single type.\nNote that vectors can have zero length, e.g. in,\n\ni <- integer(0)\ntypeof(i)\n# [1] \"integer\"\ni\n# integer(0)\nlength(i)\n# [1] 0\n\nWe can retrieve (or in assignments: replace) elements in a vector using [ or [[:\n\na <- c(1,2,3)\na[2]\n# [1] 2\na[[2]]\n# [1] 2\na[2:3]\n# [1] 2 3\na[2:3] <- c(5,6)\na\n# [1] 1 5 6\na[[3]] <- 10\na\n# [1]  1  5 10\n\nwhere the difference is that [ can operate on an index range (or multiple indexes), and [[ operates on a single vector value.\n\n\nHeterogeneous vectors: list\nAn additional vector type is the list, which can combine any types in its elements:\n\nl <- list(3, TRUE, \"foo\")\ntypeof(l)\n# [1] \"list\"\nlength(l)\n# [1] 3\n\nFor lists, there is a further distinction between [ and [[: the single [ returns always a list, and [[ returns the contents of a list element:\n\nl[1]\n# [[1]]\n# [1] 3\nl[[1]]\n# [1] 3\n\nFor replacement, one case use [ when providing a list, and [[ when providing a new value:\n\nl[1:2] <- list(4, FALSE)\nl\n# [[1]]\n# [1] 4\n# \n# [[2]]\n# [1] FALSE\n# \n# [[3]]\n# [1] \"foo\"\nl[[3]] <- \"bar\"\nl\n# [[1]]\n# [1] 4\n# \n# [[2]]\n# [1] FALSE\n# \n# [[3]]\n# [1] \"bar\"\n\nIn case list elements are named, as in\n\nl <- list(first = 3, second = TRUE, third = \"foo\")\nl\n# $first\n# [1] 3\n# \n# $second\n# [1] TRUE\n# \n# $third\n# [1] \"foo\"\n\nwe can use names as in l[[\"second\"]] and this can be abbreviated to\n\nl$second\n# [1] TRUE\nl$second <- FALSE\nl\n# $first\n# [1] 3\n# \n# $second\n# [1] FALSE\n# \n# $third\n# [1] \"foo\"\n\nThis is convenient, but also requires name look-up in the names attribute (see below).\n\nNULL and removing list elements\nNULL is the null value in R; it is special in the sense that it doesn’t work in simple comparisons:\n\n3 == NULL # not FALSE!\n# logical(0)\nNULL == NULL # not even TRUE!\n# logical(0)\n\nbut has to be treated specially, using is.null:\n\nis.null(NULL)\n# [1] TRUE\n\nWhen we want to remove one or more list elements, we can do so by creating a new list that does not contain the elements that needed removal, as in\n\nl <- l[c(1,3)] # remove second, implicitly\nl\n# $first\n# [1] 3\n# \n# $third\n# [1] \"foo\"\n\nbut we can also assign NULL to the element we want to eliminate:\n\nl$second <- NULL\nl\n# $first\n# [1] 3\n# \n# $third\n# [1] \"foo\"\n\n\n\n\nAttributes\nWe can glue arbitrary metadata objects to data objects, as in\n\na <- 1:3\nattr(a, \"some_meta_data\") = \"foo\"\na\n# [1] 1 2 3\n# attr(,\"some_meta_data\")\n# [1] \"foo\"\n\nand this can be retrieved, or replaced by\n\nattr(a, \"some_meta_data\")\n# [1] \"foo\"\nattr(a, \"some_meta_data\") <- \"bar\"\nattr(a, \"some_meta_data\")\n# [1] \"bar\"\n\nIn essence, the attribute of an object is a named list, and we can get or set the complete list by\n\nattributes(a)\n# $some_meta_data\n# [1] \"bar\"\nattributes(a) = list(some_meta_data = \"foo\")\nattributes(a)\n# $some_meta_data\n# [1] \"foo\"\n\nA number of attributes are treated specially by R, see e.g. ?attributes.\n\nobject class and class attribute\nEvery object in R “has a class”, meaning that class(obj) returns a character vector with the class of obj. Some objects have an implicit class, e.g. vectors\n\nclass(1:3)\n# [1] \"integer\"\nclass(c(TRUE, FALSE))\n# [1] \"logical\"\nclass(c(\"TRUE\", \"FALSE\"))\n# [1] \"character\"\n\nbut we can also set the class explicit, either by using attr or by using class in the left-hand side of an expression:\n\na <- 1:3\nclass(a) <- \"foo\"\na\n# [1] 1 2 3\n# attr(,\"class\")\n# [1] \"foo\"\nclass(a)\n# [1] \"foo\"\nattributes(a)\n# $class\n# [1] \"foo\"\n\nin which case the newly set class overrides the earlier implicit class. This way, we can add methods for class foo, e.g. by\n\nprint.foo <- function(x, ...) { \n    print(paste(\"an object of class foo with length\", length(x)))\n}\nprint(a)\n# [1] \"an object of class foo with length 3\"\n\nProviding such methods are generally intended to create more usable software, but at the same time they may make the objects more opaque. It is sometimes useful to see what an object “is made of” by printing it after the class attribute is removed, as in\n\nunclass(a)\n# [1] 1 2 3\n\nAs a more elaborate example, consider the case where a polygon is made using package sf:\n\nlibrary(sf)\n# Linking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.0; sf_use_s2() is TRUE\np <- st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,0))))\np\n# POLYGON ((0 0, 1 0, 1 1, 0 0))\n\nwhich prints the well-known-text form; to understand what the data structure is like, we can use\n\nunclass(p)\n# [[1]]\n#      [,1] [,2]\n# [1,]    0    0\n# [2,]    1    0\n# [3,]    1    1\n# [4,]    0    0\n\n\n\nthe dim attribute\nThe dim attribute sets the matrix or array dimensions:\n\na <- 1:8\nclass(a)\n# [1] \"integer\"\nattr(a, \"dim\") <- c(2,4) # or: dim(a) = c(2,4)\nclass(a)\n# [1] \"matrix\" \"array\"\na\n#      [,1] [,2] [,3] [,4]\n# [1,]    1    3    5    7\n# [2,]    2    4    6    8\nattr(a, \"dim\") <- c(2,2,2) # or: dim(a) = c(2,2,2)\nclass(a)\n# [1] \"array\"\na\n# , , 1\n# \n#      [,1] [,2]\n# [1,]    1    3\n# [2,]    2    4\n# \n# , , 2\n# \n#      [,1] [,2]\n# [1,]    5    7\n# [2,]    6    8\n\n\n\n\nvarious names attributes\nNamed vectors carry their names in a names attribute. We saw examples for lists above, an example for a numeric vector is:\n\na <- c(first = 3, second = 4, last = 5)\na[\"second\"]\n# second \n#      4\nattributes(a)\n# $names\n# [1] \"first\"  \"second\" \"last\"\n\nMore name attributes are e.g. dimnames of matrices or arrays, which not only names dimensions, but also the labels associated with each of the dimensions:\n\na <- matrix(1:4, 2, 2)\ndimnames(a) <- list(rows = c(\"row1\", \"row2\"),\n                    cols = c(\"col1\", \"col2\"))\na\n#       cols\n# rows   col1 col2\n#   row1    1    3\n#   row2    2    4\nattributes(a)\n# $dim\n# [1] 2 2\n# \n# $dimnames\n# $dimnames$rows\n# [1] \"row1\" \"row2\"\n# \n# $dimnames$cols\n# [1] \"col1\" \"col2\"\n\nData.frame objects have rows and columns, and each have names:\n\ndf <- data.frame(a = 1:3, b = c(TRUE, FALSE, TRUE))\nattributes(df)\n# $names\n# [1] \"a\" \"b\"\n# \n# $class\n# [1] \"data.frame\"\n# \n# $row.names\n# [1] 1 2 3\n\n\n\nusing structure\nWhen programming, the pattern of adding or modifying attributes before returning an object is extremely common, an example being:\n\nf <- function(x) {\n   a <- create_obj(x) # call some other function\n   attributes(a) <- list(class = \"foo\", meta = 33)\n   a\n}\n\nThe last two statements can be contracted in\n\nf <- function(x) {\n   a <- create_obj(x) # call some other function\n   structure(a, class = \"foo\", meta = 33)\n}\n\nwhere function structure adds, replaces, or (in case of value NULL) removes attributes from the object in its first argument."
  },
  {
    "objectID": "98-rbascis.html#dissecting-a-multipolygon",
    "href": "98-rbascis.html#dissecting-a-multipolygon",
    "title": "R basics",
    "section": "dissecting a MULTIPOLYGON",
    "text": "dissecting a MULTIPOLYGON\nWe can use the above examples to dissect an sf object with MULTIPOLYGONs into pieces. Suppose we use the nc dataset,\n\nlibrary(sf)\nsystem.file(\"gpkg/nc.gpkg\", package = \"sf\") %>%\n    read_sf() -> nc\n\nwe can see from the attributes of nc,\n\nattributes(nc)\n# $names\n#  [1] \"AREA\"      \"PERIMETER\" \"CNTY_\"     \"CNTY_ID\"   \"NAME\"     \n#  [6] \"FIPS\"      \"FIPSNO\"    \"CRESS_ID\"  \"BIR74\"     \"SID74\"    \n# [11] \"NWBIR74\"   \"BIR79\"     \"SID79\"     \"NWBIR79\"   \"geom\"     \n# \n# $row.names\n#   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n#  [16]  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n#  [31]  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45\n#  [46]  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60\n#  [61]  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75\n#  [76]  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n#  [91]  91  92  93  94  95  96  97  98  99 100\n# \n# $class\n# [1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n# \n# $sf_column\n# [1] \"geom\"\n# \n# $agr\n#      AREA PERIMETER     CNTY_   CNTY_ID      NAME      FIPS \n#      <NA>      <NA>      <NA>      <NA>      <NA>      <NA> \n#    FIPSNO  CRESS_ID     BIR74     SID74   NWBIR74     BIR79 \n#      <NA>      <NA>      <NA>      <NA>      <NA>      <NA> \n#     SID79   NWBIR79 \n#      <NA>      <NA> \n# Levels: constant aggregate identity\n\nthat the geometry column is named geom. When we take out this column,\n\nnc$geom\n# Geometry set for 100 features \n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -84.3 ymin: 33.9 xmax: -75.5 ymax: 36.6\n# Geodetic CRS:  NAD27\n# First 5 geometries:\n# MULTIPOLYGON (((-81.5 36.2, -81.5 36.3, -81.6 3...\n# MULTIPOLYGON (((-81.2 36.4, -81.2 36.4, -81.3 3...\n# MULTIPOLYGON (((-80.5 36.2, -80.5 36.3, -80.5 3...\n# MULTIPOLYGON (((-76 36.3, -76 36.3, -76 36.3, -...\n# MULTIPOLYGON (((-77.2 36.2, -77.2 36.2, -77.3 3...\n\nwe see an object that has the following attributes\n\nattributes(nc$geom)\n# $n_empty\n# [1] 0\n# \n# $crs\n# Coordinate Reference System:\n#   User input: NAD27 \n#   wkt:\n# GEOGCRS[\"NAD27\",\n#     DATUM[\"North American Datum 1927\",\n#         ELLIPSOID[\"Clarke 1866\",6378206.4,294.978698213898,\n#             LENGTHUNIT[\"metre\",1]]],\n#     PRIMEM[\"Greenwich\",0,\n#         ANGLEUNIT[\"degree\",0.0174532925199433]],\n#     CS[ellipsoidal,2],\n#         AXIS[\"geodetic latitude (Lat)\",north,\n#             ORDER[1],\n#             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#         AXIS[\"geodetic longitude (Lon)\",east,\n#             ORDER[2],\n#             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#     USAGE[\n#         SCOPE[\"Geodesy.\"],\n#         AREA[\"North and central America: Antigua and Barbuda - onshore. Bahamas - onshore plus offshore over internal continental shelf only. Belize - onshore. British Virgin Islands - onshore. Canada onshore - Alberta, British Columbia, Manitoba, New Brunswick, Newfoundland and Labrador, Northwest Territories, Nova Scotia, Nunavut, Ontario, Prince Edward Island, Quebec, Saskatchewan and Yukon - plus offshore east coast. Cuba - onshore and offshore. El Salvador - onshore. Guatemala - onshore. Honduras - onshore. Panama - onshore. Puerto Rico - onshore. Mexico - onshore plus offshore east coast. Nicaragua - onshore. United States (USA) onshore and offshore - Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware, Florida, Georgia, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana, Maine, Maryland, Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana, Nebraska, Nevada, New Hampshire, New Jersey, New Mexico, New York, North Carolina, North Dakota, Ohio, Oklahoma, Oregon, Pennsylvania, Rhode Island, South Carolina, South Dakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, West Virginia, Wisconsin and Wyoming - plus offshore . US Virgin Islands - onshore.\"],\n#         BBOX[7.15,167.65,83.17,-47.74]],\n#     ID[\"EPSG\",4267]]\n# \n# $class\n# [1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n# \n# $precision\n# [1] 0\n# \n# $bbox\n#  xmin  ymin  xmax  ymax \n# -84.3  33.9 -75.5  36.6\n\nWhen we take the contents of the fourth list element, we obtain\n\nnc$geom[[4]] |> format(width = 60, digits = 5)\n# [1] \"MULTIPOLYGON (((-76.009 36.32, -76.017 36.338, -76.033 36...\"\n\nwhich is a (classed) list,\n\ntypeof(nc$geom[[4]])\n# [1] \"list\"\n\nwith attributes\n\nattributes(nc$geom[[4]])\n# $class\n# [1] \"XY\"           \"MULTIPOLYGON\" \"sfg\"\n\nand length\n\nlength(nc$geom[[4]])\n# [1] 3\n\nThe length indicates the number of outer rings: a multi-polygon can consist of more than one polygon. We see that most counties only have a single polygon:\n\nlengths(nc$geom)\n#   [1] 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n#  [31] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 1 1 1\n#  [61] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1\n#  [91] 2 1 1 1 2 1 1 1 1 1\n\nA multi-polygon is a list with polygons,\n\ntypeof(nc$geom[[4]])\n# [1] \"list\"\n\nand the first polygon of the fourth multi-polygon is again a list, because polygons have an outer ring possibly followed by multiple inner rings (holes)\n\ntypeof(nc$geom[[4]][[1]])\n# [1] \"list\"\n\nwe see that it contains only one ring, the exterior ring:\n\nlength(nc$geom[[4]][[1]])\n# [1] 1\n\nand we can print type, the dimension and the first set of coordinates by\n\ntypeof(nc$geom[[4]][[1]][[1]])\n# [1] \"double\"\ndim(nc$geom[[4]][[1]][[1]])\n# [1] 26  2\nhead(nc$geom[[4]][[1]][[1]])\n#       [,1] [,2]\n# [1,] -76.0 36.3\n# [2,] -76.0 36.3\n# [3,] -76.0 36.3\n# [4,] -76.0 36.4\n# [5,] -76.1 36.3\n# [6,] -76.2 36.4\n\nand we can now for instance change the latitude of the third coordinate by\n\nnc$geom[[4]][[1]][[1]][3,2] <- 36.5\n\n\n\n\n\nChambers, John. 2016. Extending R. CRC Press.\n\n\nWickham, Hadley. 2014. Advanced R, Second Edition. CRC Press.https://adv-r.hadley.nz/ ."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Index",
    "section": "",
    "text": "```\n\nReferences\n\n\nAlam, Moudud, Lars Ronnegard, and Xia Shen. 2019. Hglm: Hierarchical\nGeneralized Linear Models. https://CRAN.R-project.org/package=hglm.\n\n\nAlam, Moudud, Lars Rönnegård, and Xia Shen. 2015. “Fitting\nConditional and Simultaneous Autoregressive Spatial Models in\nHglm.” The R Journal 7 (2): 5–18. https://doi.org/10.32614/RJ-2015-017.\n\n\nAnselin, L. 1988. Spatial Econometrics: Methods and Models.\nKluwer Academic Publishers.\n\n\n———. 1995. “Local indicators of spatial\nassociation - LISA.” Geographical\nAnalysis 27 (2): 93–115.\n\n\n———. 1996. “The Moran Scatterplot as an\nESDA Tool to Assess Local Instability in Spatial\nAssociation.” In Spatial Analytical Perspectives on\nGIS, edited by M. M. Fischer, H. J. Scholten, and D.\nUnwin, 111–25. London: Taylor & Francis.\n\n\nAnselin, Luc. 2019. “A Local Indicator of Multivariate Spatial\nAssociation: Extending Geary’s c.” Geographical\nAnalysis 51 (2): 133–50. https://doi.org/10.1111/gean.12164.\n\n\nAnselin, Luc, Xun Li, and Julia Koschinsky. 2021.\n“GeoDa, from the Desktop to an Ecosystem for\nExploring Spatial Data.” Geographical Analysis. https://doi.org/10.1111/gean.12311.\n\n\nAppel, Marius. 2022. Gdalcubes: Earth Observation Data Cubes from\nSatellite Image Collections. https://github.com/appelmar/gdalcubes_R.\n\n\nAppel, Marius, and Edzer Pebesma. 2019. “On-Demand Processing of\nData Cubes from Satellite Image Collections with the Gdalcubes\nLibrary.” Data 4 (3): 92. https://www.mdpi.com/2306-5729/4/3/92.\n\n\nAppel, Marius, Edzer Pebesma, and Matthias Mohr. 2021. Cloud-Based\nProcessing of Satellite Image Collections in r Using STAC, COGs, and\non-Demand Data Cubes. https://r-spatial.org/r/2021/04/23/cloud-based-cubes.html.\n\n\nAssunção, R. M., and E. A. Reis. 1999. “A New Proposal to Adjust\nMoran’s I for Population\nDensity.” Statistics in Medicine 18: 2147–62.\n\n\nAvis, D., and J. Horton. 1985. “Remarks on the Sphere of Influence\nGraph.” In Discrete Geometry and Convexity, edited by J.\nE. Goodman, 323–27. New York: New York Academy of Sciences, New York.\n\n\nAybar, Cesar. 2022. Rgee: R Bindings for Calling the Earth Engine\nAPI. https://CRAN.R-project.org/package=rgee.\n\n\nBaddeley, Adrian, Ege Rubak, and Rolf Turner. 2015. Spatial Point\nPatterns: Methodology and Applications with r. Chapman; Hall/CRC.\n\n\nBaddeley, Adrian, Rolf Turner, and Ege Rubak. 2022. Spatstat:\nSpatial Point Pattern Analysis, Model- Fitting, Simulation, Tests.\nhttp://spatstat.org/.\n\n\nBates, Douglas, Martin Maechler, Ben Bolker, and Steven Walker. 2022.\nLme4: Linear Mixed-Effects Models Using Eigen and S4. https://github.com/lme4/lme4/.\n\n\nBates, Douglas, Martin Maechler, and Mikael Jagan. 2022. Matrix:\nSparse and Dense Matrix Classes and Methods. https://CRAN.R-project.org/package=Matrix.\n\n\nBaumann, Peter, Eric Hirschorn, and Joan Masó. 2017. “OGC Coverage\nImplementation Schema.” OGC Implementation Standard. https://docs.opengeospatial.org/is/09-146r6/09-146r6.html.\n\n\nBavaud, F. 1998. “Models for Spatial Weights: A Systematic\nLook.” Geographical Analysis 30: 153–71. https://doi.org/10.1111/j.1538-4632.1998.tb00394.x.\n\n\nBenjamin, Daniel J., James O. Berger, Johannesson Magnus, Brian A.\nNosek, Wagenmakers E-J, Richard Berk, Kenneth A. Bollen, et al. 2018.\n“Redefine Statistical Significance.” Nature Human\nBehaviour 2 (1): 6–10.\n\n\nBenjamini, Yoav, and Yosef Hochberg. 1995. “Controlling the False\nDiscovery Rate: A Practical and Powerful Approach to Multiple\nTesting.” Journal of the Royal Statistical Society. Series B\n(Methodological) 57 (1): 289–300. https://doi.org/10.1111/j.2517-6161.1995.tb02031.x.\n\n\nBenjamini, Yoav, and Daniel Yekutieli. 2001. “The control of the false discovery rate in multiple\ntesting under dependency.” The Annals of\nStatistics 29 (4): 1165–88. https://doi.org/10.1214/aos/1013699998.\n\n\nBesag, Julian. 1974. “Spatial Interaction and the Statistical\nAnalysis of Lattice Systems.” Journal of the Royal\nStatistical Society. Series B (Methodological) 36: pp. 192–236.\n\n\nBIPM, IEC, ILAC IFCC, IUPAP IUPAC, and OIML ISO. 2012. “The\nInternational Vocabulary of Metrology–Basic and General Concepts and\nAssociated Terms (VIM), 3rd Edn. JCGM 200: 2012.” JCGM (Joint\nCommittee for Guides in Metrology). https://www.bipm.org/en/publications/guides/.\n\n\nBivand, R. S. 2002. “Spatial Econometrics Functions in\nR: Classes and Methods.” Journal of Geographical\nSystems 4: 405–21.\n\n\nBivand, R. S., W. Müller, and M. Reder. 2009. “Power Calculations\nfor Global and Local Moran’s I.” Computational\nStatistics and Data Analysis 53: 2859–72.\n\n\nBivand, R. S., and B. A. Portnov. 2004. “Exploring Spatial Data\nAnalysis Techniques Using R: The Case of Observations with\nNo Neighbours.” In Advances in Spatial Econometrics:\nMethodology, Tools, Applications, edited by L. Anselin, R. J. G. M.\nFlorax, and S. J. Rey, 121–42. Berlin: Springer.\n\n\nBivand, Roger. 2017. “Revisiting the Boston Data Set\n— Changing the Units of Observation Affects Estimated Willingness to Pay\nfor Clean Air.” REGION 4 (1): 109–27. https://doi.org/10.18335/region.v4i1.107.\n\n\n———. 2020. Why Have CRS, Projections and Transformations\nChanged?https://rgdal.r-forge.r-project.org/articles/CRS_projections_transformations.html\n.\n\n\n———. 2021. CRAN Task View: Analysis of Spatial Data. https://cran.r-project.org/web/views/Spatial.html.\n\n\n———. 2022a. classInt: Choose Univariate Class Intervals. https://CRAN.R-project.org/package=classInt.\n\n\n———. 2022b. Spdep: Spatial Dependence: Weighting Schemes,\nStatistics. https://CRAN.R-project.org/package=spdep.\n\n\nBivand, Roger S. 2012. “After ’Raising the\nBar’: Applied Maximum Likelihood Estimation of Families of Models in\nSpatial Econometrics.” Estadística Española 54:\n71–88.\n\n\nBivand, Roger S, and Virgilio Gómez-Rubio. 2021. “Spatial Survival\nModelling of Business Re-Opening After Katrina: Survival Modelling\nCompared to Spatial Probit Modelling of Re-Opening Within 3, 6 or 12\nMonths.” Statistical Modelling 21 (1-2): 137–60. https://doi.org/10.1177/1471082X20967158.\n\n\nBivand, Roger S., Edzer Pebesma, and Virgilio Gomez-Rubio. 2013.\nApplied Spatial Data Analysis with R, Second\nEdition. Springer, NY. http://www.asdar-book.org/.\n\n\nBivand, Roger S., and Gianfranco Piras. 2015. “Comparing\nImplementations of Estimation Methods for Spatial Econometrics.”\nJournal of Statistical Software 63 (1): 1–36. https://doi.org/10.18637/jss.v063.i18.\n\n\nBivand, Roger S., Zhe Sha, Liv Osland, and Ingrid Sandvig Thorsen. 2017.\n“A Comparison of Estimation Methods for Multilevel Models of\nSpatially Structured Data.” Spatial Statistics. https://doi.org/10.1016/j.spasta.2017.01.002.\n\n\nBivand, Roger S., and David W. S. Wong. 2018. “Comparing\nImplementations of Global and Local Indicators of Spatial\nAssociation.” TEST 27 (3): 716–48. https://doi.org/10.1007/s11749-018-0599-x.\n\n\nBivand, Roger, Virgilio Gómez-Rubio, and Håvard Rue. 2015.\n“Spatial Data Analysis with r-INLA with Some Extensions.”\nJournal of Statistical Software, Articles 63 (20): 1–31. https://doi.org/10.18637/jss.v063.i20.\n\n\nBivand, Roger, Giovanni Millo, and Gianfranco Piras. 2021. “A\nReview of Software for Spatial Econometrics in R.”\nMathematics 9 (11). https://doi.org/10.3390/math9111276.\n\n\nBivand, Roger, Jakub Nowosad, and Robin Lovelace. 2021. spData:\nDatasets for Spatial Analysis. https://nowosad.github.io/spData/.\n\n\nBivand, Roger, and Gianfranco Piras. 2022. Spatialreg: Spatial\nRegression Analysis. https://CRAN.R-project.org/package=spatialreg.\n\n\nBlangiardo, Marta, and Michela Cameletti. 2015. Spatial and\nSpatio-Temporal Bayesian Models with r-INLA. John Wiley & Sons.\n\n\nBlangiardo, Marta, Michela Cameletti, Gianluca Baio, and Håvard Rue.\n2013. “Spatial and Spatio-Temporal Models with r-INLA.”\nSpatial and Spatio-Temporal Epidemiology 4: 33–49.\nhttps://doi.org/https://doi.org/10.1016/j.sste.2012.12.001.\n\n\nBoots, B., and A. Okabe. 2007. “Local Statistical Spatial\nAnalysis: Inventory and Prospect.” International Journal of\nGeographical Information Science 21 (4): 355–75. https://doi.org/10.1080/13658810601034267.\n\n\nBrazil Data Cube Team. 2021. Rstac: Client Library for\nSpatioTemporal Asset Catalog. https://github.com/brazil-data-cube/rstac.\n\n\nBreidt, F Jay, Jean D Opsomer, et al. 2017. “Model-Assisted Survey\nEstimation with Modern Prediction Techniques.” Statistical\nScience 32 (2): 190–205.\n\n\nBrody, Howard, Michael Russell Rip, Peter Vinten-Johansen, Nigel Paneth,\nand Stephen Rachman. 2000. “Map-Making and Myth-Making in\nBroad Street: The London Cholera\nEpidemic, 1854.” The Lancet 356 (9223): 64–68.\nhttps://doi.org/https://doi.org/10.1016/S0140-6736(00)02442-9.\n\n\nBrooks, Mollie E., Kasper Kristensen, Koen J. van Benthem, Arni\nMagnusson, Casper W. Berg, Anders Nielsen, Hans J. Skaug, Martin\nMaechler, and Benjamin M. Bolker. 2017. “glmmTMB Balances Speed and Flexibility Among\nPackages for Zero-Inflated Generalized Linear Mixed Modeling.”\nThe R Journal 9 (2): 378–400. https://journal.r-project.org/archive/2017/RJ-2017-066/index.html.\n\n\nBrown, Paul G. 2010. “Overview of SciDB: Large Scale\nArray Storage, Processing and Analysis.” In Proceedings of\nthe 2010 ACM SIGMOD International Conference\non Management of Data, 963–68. ACM.\n\n\nBrus, Dick J. 2021a. “Statistical Approaches for Spatial Sample\nSurvey: Persistent Misconceptions and New Developments.”\nEuropean Journal of Soil Science 72 (2): 686–703.\nhttps://doi.org/https://doi.org/10.1111/ejss.12988.\n\n\n———. 2021b. “Statistical Approaches for Spatial Sample Survey:\nPersistent Misconceptions and New Developments.” European\nJournal of Soil Science 72 (2): 686–703. https://doi.org/https://doi.org/10.1111/ejss.12988.\n\n\nBureau International des Poids et Mesures. 2006. The International\nSystem of Units (SI), 8th Edition. Organisation\nIntergouvernementale de la Convention du Mètre. https://www.bipm.org/en/publications/si-brochure/download.html.\n\n\nCaldas de Castro, Marcia, and Burton H. Singer. 2006. “Controlling\nthe False Discovery Rate: A New Application to Account for Multiple and\nDependent Tests in Local Statistics of Spatial Association.”\nGeographical Analysis 38 (2): 180–208. https://doi.org/10.1111/j.0016-7363.2006.00682.x.\n\n\nChambers, John. 2016. Extending R. CRC Press.\n\n\nChrisman, Nicholas. 2012. “A Deflationary Approach to Fundamental\nPrinciples in GIScience.” In Francis Harvey\n(Ed.) Are There Fundamental Principles in Geographic Information\nScience?, 42–64. CreateSpace, United States.\n\n\nClementini, Eliseo, Paolino Di Felice, and Peter van Oosterom. 1993.\n“A Small Set of Formal Topological Relationships Suitable for\nEnd-User Interaction.” In Advances in Spatial Databases,\nedited by David Abel and Beng Chin Ooi, 277–95. Berlin, Heidelberg:\nSpringer Berlin Heidelberg.\n\n\nCliff, A. D., and J. K. Ord. 1973. Spatial Autocorrelation.\nLondon: Pion.\n\n\n———. 1981. Spatial Processes. London: Pion.\n\n\nCliff, A., and J. K. Ord. 1972. “Testing for Spatial\nAutocorrelation Among Regression Residuals.” Geographical\nAnalysis 4: 267–84.\n\n\nCobb, George W., and David S. Moore. 1997. “Mathematics,\nStatistics and Teaching.” The American Mathematical\nMonthly 104: 801–23.http://www.jstor.org/stable/2975286\n.\n\n\nCressie, N. A. C. 1993. Statistics for Spatial Data. New\nYork:Wiley.\n\n\nCsardi, Gabor, and Tamas Nepusz. 2006. “The Igraph Software\nPackage for Complex Network Research.” InterJournal\nComplex Systems: 1695. https://igraph.org.\n\n\nDavies, Tilman, and David Bryant. 2013. “On Circulant Embedding\nfor Gaussian Random Fields in r.” Journal of Statistical\nSoftware, Articles 55 (9): 1–21. https://doi.org/10.18637/jss.v055.i09.\n\n\nDe Gruijter, Jaap, Dick J Brus, Marc FP Bierkens, and Martin Knotters.\n2006. Sampling for Natural Resource Monitoring. Springer\nScience & Business Media.\n\n\nDe Gruijter, JJ, and CJF Ter Braak. 1990. “Model-Free Estimation\nfrom Spatial Samples: A Reappraisal of Classical Sampling\nTheory.” Mathematical Geology 22 (4): 407–15.\n\n\nDiggle, P. J., and P. J. Ribeiro Jr. 2007. Model-Based\nGeostatistics. New York: Springer.\n\n\nDiggle, P. J., J. A. Tawn, and R. A. Moyeed. 1998. “Model-Based\nGeostatistics.” Applied Statistics, 299–350.\n\n\nDo, Van Huyen, Thibault Laurent, and Anne Vanhems. 2021.\n“Guidelines on Areal Interpolation Methods.” In\nAdvances in Contemporary Statistics and Econometrics: Festschrift in\nHonor of Christine Thomas-Agnan, edited by Abdelaati Daouia and\nAnne Ruiz-Gazen, 385–407. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-030-73249-3_20.\n\n\nDo, Van Huyen, Christine Thomas-Agnan, and Anne Vanhems. 2015a.\n“Accuracy of Areal Interpolation Methods for Count Data.”\nSpatial Statistics 14: 412–38. https://doi.org/10.1016/j.spasta.2015.07.005.\n\n\n———. 2015b. “Spatial Reallocation of Areal Data: A Review.”\nRev. Econ. Rég. Urbaine 1/2: 27–58. https://www.tse-fr.eu/sites/default/files/medias/doc/wp/mad/wp_tse_397_v2.pdf.\n\n\nDuncan, O. D., R. P. Cuzzort, and B. Duncan. 1961. Statistical\nGeography: Problems in Analyzing Areal Data. Glencoe, IL: Free\nPress.\n\n\nDunnington, Dewey. 2022. Ggspatial: Spatial Data Framework for\nGgplot2. https://CRAN.R-project.org/package=ggspatial.\n\n\nDunnington, Dewey, Edzer Pebesma, and Ege Rubak. 2022. S2: Spherical\nGeometry Operators Using the S2 Geometry Library.\n\n\nEddelbuettel, Dirk. 2013. Seamless r and c++ Integration with\nRcpp. Springer.\n\n\nEgenhofer, Max J., and Robert D. Franzosa. 1991. “Point-Set\nTopological Spatial Relations.” International Journal of\nGeographical Information Systems 5 (2): 161–74. https://doi.org/10.1080/02693799108927841.\n\n\nElhorst, J. Paul. 2010. “Applied Spatial Econometrics: Raising the\nBar.” Spatial Economic Analysis 5: 9–28.\n\n\nEvenden, Gerald I. 1990. Cartographic Projection Procedures for the\nUNIX Environment — a User’s Manual. http://download.osgeo.org/proj/OF90-284.pdf.\n\n\nEvers, Kristian, and Thomas Knudsen. 2017. Transformation Pipelines\nfor PROJ.4. https://www.fig.net/resources/proceedings/fig_proceedings/fig2017/papers/iss6b/ISS6B_evers_knudsen_9156.pdf.\n\n\nfile., See AUTHORS. 2022. Igraph: Network Analysis and\nVisualization. https://CRAN.R-project.org/package=igraph.\n\n\nFingleton, B. 1999. “Spurious spatial\nregression: Some Monte Carlo results with a spatial unit root and\nspatial cointegration.” Journal of Regional\nScience 9: 1–19.\n\n\nFisher, Ronald Aylmer et al. 1937. The Design of Experiments.\nThe Design of Experiments. 2nd Ed. Oliver & Boyd, Edinburgh\n& London.\n\n\nFlorax, Raymond J. G. M., Hendrik Folmer, and Sergio J. Rey. 2006.\n“A Comment on Specification Searches in Spatial Econometrics: The\nRelevance of Hendry’s Methodology: A Reply.” Regional Science\nand Urban Economics 36 (2): 300–308. https://doi.org/10.1016/j.regsciurbeco.2005.10.002.\n\n\nFlorax, Raymond J. G. M, Hendrik Folmer, and Sergio J Rey. 2003.\n“Specification Searches in Spatial Econometrics: The Relevance of\nHendry’s Methodology.” Regional Science and Urban\nEconomics 33 (5): 557–79. https://doi.org/10.1016/S0166-0462(03)00002-4.\n\n\nFreni-Sterrantino, Anna, Massimo Ventrucci, and Håvard Rue. 2018.\n“A Note on Intrinsic Conditional Autoregressive Models for\nDisconnected Graphs.” Spatial and Spatio-Temporal\nEpidemiology 26: 25–34. https://doi.org/https://doi.org/10.1016/j.sste.2018.04.002.\n\n\nGabriel, Edith, Barry Rowlingson, and Peter Diggle. 2013. “Stpp:\nAn r Package for Plotting, Simulating and Analyzing Spatio-Temporal\nPoint Patterns.” Journal of Statistical Software,\nArticles 53 (2): 1–29. https://doi.org/10.18637/jss.v053.i02.\n\n\nGaetan, Carlo, and Xavier Guyon. 2010. Spatial Statistics and\nModeling. New York: Springer.\n\n\nGalton, A. 2004. “Fields and Objects in Space, Time and\nSpace-Time.” Spatial Cognition and Computation 4.\n\n\nGarnier, Simon. 2021. Viridis: Colorblind-Friendly Color Maps for\nr. https://CRAN.R-project.org/package=viridis.\n\n\nGeary, R. C. 1954. “The Contiguity Ratio and Statistical\nMapping.” The Incorporated Statistician 5: 115–45.\n\n\nGerber, Florian, and Reinhard Furrer. 2015. “Pitfalls in the\nImplementation of Bayesian Hierarchical Modeling of Areal Count Data: An\nIllustration Using BYM and Leroux Models.” Journal of\nStatistical Software, Code Snippets 63 (1): 1–32. https://doi.org/10.18637/jss.v063.c01.\n\n\nGetis, A., and J. K. Ord. 1992. “The Analysis of Spatial\nAssociation by the Use of Distance Statistics.” Geographical\nAnalysis 24 (2): 189–206.\n\n\n———. 1996. “Local Spatial Statistics: An Overview.” In\nSpatial Analysis: Modelling in a GIS Environment, edited by P.\nLongley and M Batty, 261–77. Cambridge: GeoInformation International.\n\n\nGiraud, Timothée. 2022. Mapsf: Thematic Cartography. https://CRAN.R-project.org/package=mapsf.\n\n\nGómez-Rubio, V. 2019. “Spatial Data Analysis with INLA. Coding\nClub Uc3m Tutorial Series. Universidad Carlos III de Madrid.” https://codingclubuc3m.rbind.io/talk/2019-11-05/.\n\n\n———. 2020. Bayesian Inference with INLA. Boca Raton, FL: CRC\nPress.\n\n\nGómez-Rubio, Virgilio. 2020. Bayesian Inference with INLA. CRC\nPress.\n\n\nGómez-Rubio, Virgilio, Roger Bivand, and Håvard Rue. 2015. “A New\nLatent Class to Fit Spatial Econometrics Models with Integrated Nested\nLaplace Approximations.” Procedia Environmental Sciences\n27: 116–18. https://doi.org/https://doi.org/10.1016/j.proenv.2015.07.119.\n\n\nGoodchild, Michael F, and Nina Siu Ngan Lam. 1980. Areal\nInterpolation: A Variant of the Traditional Spatial Problem.\nDepartment of Geography, University of Western Ontario London, ON,\nCanada.\n\n\nGorelick, Noel, Matt Hancher, Mike Dixon, Simon Ilyushchenko, David\nThau, and Rebecca Moore. 2017. “Google Earth Engine:\nPlanetary-Scale Geospatial Analysis for Everyone.” Remote\nSensing of Environment 202: 18–27. https://doi.org/10.1016/j.rse.2017.06.031.\n\n\nGoulard, Michel, Thibault Laurent, and Christine Thomas-Agnan. 2017.\n“About Predictions in Spatial Autoregressive Models: Optimal and\nAlmost Optimal Strategies.” Spatial Economic Analysis 12\n(2-3): 304–25. https://doi.org/10.1080/17421772.2017.1300679.\n\n\nGräler, Benedikt, Edzer Pebesma, and Gerard Heuvelink. 2016.\n“Spatio-Temporal Interpolation using\ngstat.” The R Journal 8 (1): 204–18.\nhttps://doi.org/10.32614/RJ-2016-014.\n\n\nGreenberg, Jonathan Asher, and Matteo Mattiuzzi. 2020. gdalUtils:\nWrappers for the Geospatial Data Abstraction Library (GDAL)\nUtilities. https://CRAN.R-project.org/package=gdalUtils.\n\n\nHahsler, Michael, and Matthew Piekenbrock. 2022. Dbscan:\nDensity-Based Spatial Clustering of Applications with Noise (DBSCAN) and\nRelated Algorithms. https://github.com/mhahsler/dbscan.\n\n\nHalleck Vega, Solmaria, and J. Paul Elhorst. 2015. “The\nSLX Model.” Journal of Regional Science 55\n(3): 339–63. https://doi.org/10.1111/jors.12188.\n\n\nHand, David J. 2004. Measurement: Theory and Practice. A\nHodder Arnold Publication.\n\n\nHealy, Kieran. 2018. Data Visualization, a Practical\nIntroduction. Princeton University Press. http://socviz.co/index.html.\n\n\nHeaton, Matthew J., Abhirup Datta, Andrew O. Finley, Reinhard Furrer,\nJoseph Guinness, Rajarshi Guhaniyogi, Florian Gerber, et al. 2018.\n“A Case Study Competition Among Methods for Analyzing Large\nSpatial Data.” Journal of Agricultural, Biological and\nEnvironmental Statistics, December. https://doi.org/10.1007/s13253-018-00348-w.\n\n\nHendry, David F. 2006. “A Comment on ‘Specification Searches\nin Spatial Econometrics: The Relevance of Hendry’s\nMethodology’.” Regional Science and Urban\nEconomics 36 (2): 309–12. https://doi.org/10.1016/j.regsciurbeco.2005.10.001.\n\n\nHepple, Leslie W. 1976. “A Maximum Likelihood Model for\nEconometric Estimation with Spatial Series.” In Theory and\nPractice in Regional Science, edited by I. Masser, 90–104. London\nPapers in Regional Science. London: Pion.\n\n\nHerring, John et al. 2011. “Opengis Implementation\nStandard for Geographic Information-Simple Feature Access-Part 1: Common\nArchitecture [Corrigendum].”\n\n\nHerring, John R. 2010. “OpenGIS Implementation Standard for\nGeographic Information-Simple Feature Access-Part 2: SQL Option.”\nOpen Geospatial Consortium Inc. http://portal.opengeospatial.org/files/?artifact_id=25354.\n\n\n———. 2011. “OpenGIS Implementation Standard for Geographic\nInformation-Simple Feature Access-Part 1: Common Architecture.”\nOpen Geospatial Consortium Inc, 111. http://portal.opengeospatial.org/files/?artifact_id=25355.\n\n\nHersbach, Hans, Bill Bell, Paul Berrisford, Shoji Hirahara, András\nHorányi, Joaquín Muñoz-Sabater, Julien Nicolas, et al. 2020. “The\nEra5 Global Reanalysis.” Quarterly Journal of the Royal\nMeteorological Society 146 (730): 1999–2049. https://doi.org/https://doi.org/10.1002/qj.3803.\n\n\nHijmans, Robert J. 2022a. Raster: Geographic Data Analysis and\nModeling. https://rspatial.org/raster.\n\n\n———. 2022b. Terra: Spatial Data Analysis. https://rspatial.org/terra/.\n\n\nHufkens, Koen. 2020. Ecmwfr: Interface to ECMWF and CDS Data Web\nServices. https://github.com/bluegreen-labs/ecmwfr.\n\n\nIhaka, Ross, Paul Murrell, Kurt Hornik, Jason C. Fisher, Reto Stauffer,\nClaus O. Wilke, Claire D. McWhite, and Achim Zeileis. 2022.\nColorspace: A Toolbox for Manipulating and Assessing Colors and\nPalettes. https://CRAN.R-project.org/package=colorspace.\n\n\nIliffe, Jonathan, and Roger Lott. 2008. Datums and Map Projections\nfor Remote Sensing, GIS, and Surveying. Whittles Pub. CRC Press,\nScotland, UK.\n\n\nISO. 2004. Geographic Information – Simple Feature Access – Part 1:\nCommon Architecture.https://www.iso.org/standard/40114.html\n.\n\n\nJoo, Rocío, Matthew E. Boone, Thomas A. Clay, Samantha C. Patrick,\nSusana Clusella-Trullas, and Mathieu Basille. 2020. “Navigating\nThrough the R Packages for Movement.” Journal of\nAnimal Ecology 89 (1): 248–67. https://doi.org/https://doi.org/10.1111/1365-2656.13116.\n\n\nJoo, Rocío, Matthew E. Boone, Michael Sumner, and Mathieu Basille. 2021.\nCRAN Task View: Processing and Analysis of Tracking Data. https://cran.r-project.org/web/views/SpatioTemporal.html.\n\n\nJournel, Andre G, and Charles J Huijbregts. 1978. Mining\nGeostatistics. Academic press London.\n\n\nKarney, Charles FF. 2013. “Algorithms for Geodesics.”\nJournal of Geodesy 87 (1): 43–55. https://link.springer.com/content/pdf/10.1007/s00190-012-0578-z.pdf.\n\n\nKelejian, Harry, and Gianfranco Piras. 2017. Spatial\nEconometrics. London: Academic Press.\n\n\nKnudsen, Thomas, and Kristian Evers. 2017. Transformation Pipelines\nfor PROJ.4. https://meetingorganizer.copernicus.org/EGU2017/EGU2017-8050.pdf.\n\n\nKrainski, Elias T, Virgilio Gómez-Rubio, Haakon Bakka, Amanda Lenzi,\nDaniela Castro-Camilo, Daniel Simpson, Finn Lindgren, and Håvard Rue.\n2018. Advanced Spatial Modeling with Stochastic Partial Differential\nEquations Using r and INLA. CRC Press.\n\n\nKyriakidis, P. C. 2004. “A Geostatistical Framework for\nAreal-to-Point Spatial Interpolation.” Geographical\nAnalysis 36: 259–89.\n\n\nLaurent, Thibault, and Paula Margaretic. 2021. “Predictions in\nSpatial Econometric Models: Application to Unemployment Data.” In\nAdvances in Contemporary Statistics and Econometrics: Festschrift in\nHonor of Christine Thomas-Agnan, edited by Abdelaati Daouia and\nAnne Ruiz-Gazen, 409–26. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-030-73249-3_21.\n\n\nLeSage, J. P. 2014. “What Regional Scientists Need to Know about\nSpatial Econometrics.” Review of Regional Studies 44:\n13–32. https://journal.srsa.org/ojs/index.php/RRS/article/view/44.1.2.\n\n\nLeSage, James P., and Kelley R. Pace. 2009. Introduction to Spatial\nEconometrics. Boca Raton, FL: CRC Press.\n\n\nLi, Xun, and Luc Anselin. 2021. Rgeoda: R Library for Spatial Data\nAnalysis. https://CRAN.R-project.org/package=rgeoda.\n\n\n———. 2022. Rgeoda: R Library for Spatial Data Analysis. https://CRAN.R-project.org/package=rgeoda.\n\n\nLieshout, M. N. M. van. 2019. Theory of Spatial Statistics.\nBoca Raton, FL: Chapman; Hall/CRC.\n\n\nLott, Roger. 2015. “Geographic Information-Well-Known Text\nRepresentation of Coordinate Reference Systems.” Open Geospatial\nConsortium.http://docs.opengeospatial.org/is/12-063r5/12-063r5.html\n.\n\n\nLovelace, Robin, Richard Ellison, and Malcolm Morgan. 2022. Stplanr:\nSustainable Transport Planning. https://CRAN.R-project.org/package=stplanr.\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2019.\nGeocomputation with R. Chapman; Hall/CRC.https://geocompr.robinlovelace.net/\n.\n\n\nLu, Meng, Marius Appel, and Edzer Pebesma. 2018. “Multidimensional\nArrays for Analysing Geoscientific Data.” ISPRS International\nJournal of Geo-Information 7 (8): 313.\n\n\nMartin, D. 1989. “Mapping Population Data from Zone Centroid\nLocations.” Transactions of the Institute of British\nGeographers, New Series 14: 90–97.\n\n\nMartinetti, Davide, and Ghislain Geniaux. 2017. “Approximate\nLikelihood Estimation of Spatial Probit Models.” Regional\nScience and Urban Economics 64: 30–45. https://doi.org/https://doi.org/10.1016/j.regsciurbeco.2017.02.002.\n\n\nMcCulloch, Charles E., and Shayle R. Searle. 2001. Generalized,\nLinear, and Mixed Models. New York: Wiley.\n\n\nMcMillen, D. P. 2013. Quantile Regression for Spatial Data.\nHeidelberg: Springer-Verlag.\n\n\nMcMillen, Daniel P. 2003. “Spatial Autocorrelation or Model\nMisspecification?” International Regional Science Review\n26: 208–17.\n\n\nMennis, Jeremy. 2003. “Generating Surface Models of Population\nUsing Dasymetric Mapping.” The Professional Geographer\n55 (1): 31–42.\n\n\nMeyer, Hanna, and Edzer Pebesma. 2020. “Predicting into Unknown\nSpace? Estimating the Area of Applicability of Spatial Prediction\nModels.” https://arxiv.org/abs/2005.07939.\n\n\nMillo, Giovanni, and Gianfranco Piras. 2012. “splm: Spatial Panel Data Models in\nR.” Journal of Statistical Software 47 (1):\n1–38.\n\n\nMoran, P. A. P. 1948. “The Interpretation of Statistical\nMaps.” Journal of the Royal Statistical Society, Series B\n(Methodological) 10 (2): 243–51.\n\n\nMoreno, Mel, and Mathieu Basille. 2018. Drawing Beautiful Maps\nProgrammatically with r, Sf and Ggplot2 — Part 1: Basics. https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html.\n\n\nMur, Jesús, and Ana Angulo. 2006. “The Spatial Durbin Model and\nthe Common Factor Tests.” Spatial Economic Analysis 1\n(2): 207–26. https://doi.org/10.1080/17421770601009841.\n\n\nNeuwirth, Erich. 2022. RColorBrewer: ColorBrewer Palettes. https://CRAN.R-project.org/package=RColorBrewer.\n\n\nObe, Regina O, and Leo S Hsu. 2015. PostGIS in Action. Manning\nPublications Co.\n\n\nOkabe, A., T. Satoh, T. Furuta, A. Suzuki, and K. Okano. 2008.\n“Generalized Network Voronoi Diagrams: Concepts, Computational\nMethods, and Applications.” International Journal of\nGeographical Information Science 22 (9): 965–94. https://doi.org/10.1080/13658810701587891.\n\n\nOlsson, Gunnar. 1970. “Explanation, Prediction, and Meaning\nVariance: An Assessment of Distance Interaction Models.”\nEconomic Geography 46: 223–33. https://doi.org/10.2307/143140.\n\n\nOrd, J. K. 1975. “Estimation Methods for\nModels of Spatial Interaction.” Journal of the\nAmerican Statistical Association 70 (349): 120–26.\n\n\nOrd, J. K., and A. Getis. 2001. “Testing for Local Spatial\nAutocorrelation in the Presence of Global Autocorrelation.”\nJournal of Regional Science 41 (3): 411–32.\n\n\nPace, RK, and JP LeSage. 2008. “A Spatial Hausman\nTest.” Economics Letters 101: 282–84.\n\n\nPapadopoulos, Stavros, Kushal Datta, Samuel Madden, and Timothy Mattson.\n2016. “The Tiledb Array Data Storage Manager.”\nProceedings of the VLDB Endowment 10 (4): 349–60.\n\n\nPebesma, Edzer. 2004. “Multivariable Geostatistics in\nS: The Gstat Package.” Computers &\nGeosciences 30: 683–91.\n\n\n———. 2012. “spacetime: Spatio-Temporal\nData in R.” Journal of Statistical Software\n51 (7): 1–30. https://www.jstatsoft.org/v51/i07/.\n\n\n———. 2018. “Simple Features for R:\nStandardized Support for Spatial Vector Data.”\nThe R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2021. CRAN Task View: Handling and Analyzing Spatio-Temporal\nData. https://cran.r-project.org/web/views/SpatioTemporal.html.\n\n\nPebesma, Edzer, and Benedikt Graeler. 2022. Gstat: Spatial and\nSpatio-Temporal Geostatistical Modelling, Prediction and\nSimulation. https://github.com/r-spatial/gstat/.\n\n\nPebesma, Edzer, Thomas Mailund, Tomasz Kalinowski, and Iñaki Ucar. 2022.\nUnits: Measurement Units for r Vectors. https://github.com/r-quantities/units/.\n\n\nPinheiro, Jose C., and Douglas M. Bates. 2000. Mixed-Effects Models\nin S and S-Plus. New York: Springer.\n\n\nPiras, Gianfranco, and Ingmar R. Prucha. 2014. “On the Finite\nSample Properties of Pre-Test Estimators of Spatial Models.”\nRegional Science and Urban Economics 46: 103–15. https://doi.org/10.1016/j.regsciurbeco.2014.03.002.\n\n\nPlate, Tony, and Richard Heiberger. 2016. Abind: Combine\nMultidimensional Arrays. https://CRAN.R-project.org/package=abind.\n\n\nRaim, A. M., S. H. Holan, J. R. Bradley, and C. K. Wikle. 2021.\n“Spatio-Temporal Change of Support Modeling with r.”\nComputational Statistics 36: 749–80. https://doi.org/https://doi.org/10.1007/s00180-020-01029-4\n.\n\n\nRaim, Andrew M., Scott H. Holan, Jonathan R. Bradley, and Christopher K.\nWikle. 2020. Stcos: Space-Time Change of Support. https://github.com/holans/ST-COS.\n\n\nRaoult, Baudouin, Cedric Bergeron, Angel López Alós, Jean-Noël Thépaut,\nand Dick Dee. 2017. “Climate Service Develops User-Friendly Data\nStore.” ECMWF Newsletter 151: 22–27.\n\n\nRipley, B. D. 1981. Spatial Statistics. New York: Wiley.\n\n\n———. 1988. Statistical Inference for Spatial Processes.\nCambridge: Cambridge University Press.\n\n\nRue, Havard, Finn Lindgren, and Elias Teixeira Krainski. 2022. INLA:\nFull Bayesian Analysis of Latent Gaussian Models Using Integrated Nested\nLaplace Approximations.\n\n\nSauer, Jeffery, Taylor Oshan, Sergio Rey, and Levi John Wolf. 2021.\n“The Importance of Null Hypotheses: Understanding Differences in\nLocal Moran’s Ii Under\nHeteroskedasticity.” Geographical Analysis.\nhttps://doi.org/https://doi.org/10.1111/gean.12304.\n\n\nSchabenberger, O., and C. A. Gotway. 2005. Statistical Methods for\nSpatial Data Analysis. Boca Raton/London: Chapman & Hall/CRC.\n\n\nScheider, Simon, Benedikt Gräler, Edzer Pebesma, and Christoph Stasch.\n2016. “Modeling Spatiotemporal Information Generation.”\nInternational Journal of Geographical Information Science 30\n(10): 1980–2008. https://doi.org/10.1080/13658816.2016.1151520.\n\n\nSchlather, Martin. 2011. “Construction of Covariance Functions and\nUnconditional Simulation of Random Fields.” In Porcu, e.,\nMontero, j.m. And Schlather, m., Space-Time Processes and Challenges\nRelated to Environmental Problems. New York: Springer.\n\n\nSchlesinger, Thomas, and Manuel J. A. Eugster. 2013. Osmar:\nOpenStreetMap and r. http://osmar.r-forge.r-project.org/.\n\n\nSchramm, Matthias, Edzer Pebesma, Milutin Milenković, Luca Foresta,\nJeroen Dries, Alexander Jacob, Wolfgang Wagner, et al. 2021. “The\nopenEO API–Harmonising the Use\nof Earth Observation Cloud Services Using Virtual Data Cube\nFunctionalities.” Remote Sensing 13 (6). https://doi.org/10.3390/rs13061125.\n\n\nShe, Bing, Xinyan Zhu, Xinyue Ye, Wei Guo, Kehua Su, and Jay Lee. 2015.\n“Weighted Network Voronoi Diagrams for Local Spatial\nAnalysis.” Computers, Environment and Urban Systems 52:\n70–80. https://doi.org/https://doi.org/10.1016/j.compenvurbsys.2015.03.005.\n\n\nSmith, T. E., and K. L. Lee. 2012. “The\neffects of spatial autoregressive dependencies on inference in ordinary\nleast squares: a geometric approach.” Journal of\nGeographical Systems 14 (January): 91–124. https://doi.org/10.1007/s10109-011-0152-x.\n\n\nSmith, Tony E. 2009. “Estimation Bias in Spatial Models with\nStrongly Connected Weight Matrices.” Geographical\nAnalysis 41 (3): 307–32. https://doi.org/10.1111/j.1538-4632.2009.00758.x.\n\n\nSokal, R. R, N. L. Oden, and B. A. Thomson. 1998. “Local Spatial\nAutocorrelation in a Biological Model.” Geographical\nAnalysis 30: 331–54.\n\n\nStasch, Christoph, Simon Scheider, Edzer Pebesma, and Werner Kuhn. 2014.\n“Meaningful Spatial Prediction and Aggregation.”\nEnvironmental Modelling & Software 51: 149–65. https://doi.org/10.1016/j.envsoft.2013.09.006.\n\n\nStoyan, Dietrich, Francisco J. Rodríguez-Cortés, Jorge Mateu, and\nWilfried Gille. 2017. “Mark Variograms for Spatio-Temporal Point\nProcesses.” Spatial Statistics 20: 125–47.\nhttps://doi.org/https://doi.org/10.1016/j.spasta.2017.02.006.\n\n\nSuesse, Thomas. 2018. “Marginal Maximum Likelihood Estimation of\nSAR Models with Missing Data.” Computational Statistics &\nData Analysis 120: 98–110. https://doi.org/https://doi.org/10.1016/j.csda.2017.11.004.\n\n\nTennekes, Martijn. 2018. “tmap:\nThematic Maps in R.” Journal of Statistical\nSoftware 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\n———. 2022. Tmap: Thematic Maps. https://github.com/r-tmap/tmap.\n\n\nTiefelsdorf, M. 2002. “The Saddlepoint Approximation of\nMoran’s I and Local Moran’s Ii Reference\nDistributions and Their Numerical Evaluation.” Geographical\nAnalysis 34: 187–206.\n\n\nTobler, W. R. 1970. “A Computer Movie Simulating Urban Growth in\nthe Detroit Region.” Economic Geography 46: 234–40. https://doi.org/10.2307/143141.\n\n\n———. 1979. “Smooth Pycnophylactic Interpolation for Geographical\nRegions.” Journal of the American Statistical\nAssociation 74: 519–30.\n\n\nUCAR. 2014. UDUNITS 2.2.26 Manual. https://www.unidata.ucar.edu/software/udunits/udunits-current/doc/udunits/udunits2.html.\n\n\n———. 2020. The NetCDF User’s Guide. https://www.unidata.ucar.edu/software/netcdf/docs/user_guide.html.\n\n\nUmlauf, Nikolaus, Daniel Adler, Thomas Kneib, Stefan Lang, and Achim\nZeileis. 2015. “Structured Additive Regression Models: An\nR Interface to BayesX.” Journal of\nStatistical Software 63 (21): 1–46. http://www.jstatsoft.org/v63/i21/.\n\n\nUmlauf, Nikolaus, Thomas Kneib, Stefan Lang, and Achim Zeileis. 2022.\nR2BayesX: Estimate Structured Additive Regression Models with\nBayesX. https://CRAN.R-project.org/package=R2BayesX.\n\n\nUpton, G., and B. Fingleton. 1985. Spatial Data Analysis by Example:\nPoint Pattern and Qualitative Data. New York: Wiley.\n\n\nvan der Meer, Lucas, Lorena Abad, Andrea Gilardi, and Robin Lovelace.\n2022. Sfnetworks: Tidy Geospatial Networks. https://CRAN.R-project.org/package=sfnetworks.\n\n\nVeach, Eric, Jesse Rosenstock, Eric Engle, Robert Snedegar, Julien\nBasch, and Tom Manshreck. 2020. “S2 Geometry.”\nWebsite. https://s2geometry.io/.\n\n\nVer Hoef, Jay M, and Noel Cressie. 1993. “Multivariable Spatial\nPrediction.” Mathematical Geology 25 (2): 219–40.\n\n\nVranckx, M., T. Neyens, and C. Faes. 2019. “Comparison of\nDifferent Software Implementations for Spatial Disease Mapping.”\nSpatial and Spatio-Temporal Epidemiology 31: 100302. https://doi.org/10.1016/j.sste.2019.100302.\n\n\nWagner, Martin, and Achim Zeileis. 2019. “Heterogeneity and\nSpatial Dependence of Regional Growth in the EU: A\nRecursive Partitioning Approach.” German Economic Review\n20 (1): 67–82. https://doi.org/10.1111/geer.12146.\n\n\nWall, M. M. 2004. “A Close Look at the Spatial Structure Implied\nby the CAR and SAR Models.” Journal\nof Statistical Planning and Inference 121: 311–24.\n\n\nWaller, Lance A., and Carol A. Gotway. 2004. Applied Spatial\nStatistics for Public Health Data. Hoboken, NJ: John Wiley &\nSons.\n\n\nWhittle, P. 1954. “On Stationary Processes in\nthe Plane.” Biometrika 41 (3-4): 434–49. https://doi.org/10.1093/biomet/41.3-4.434.\n\n\nWickham, Hadley. 2014a. Advanced R, Second\nEdition. CRC Press.https://adv-r.hadley.nz/ .\n\n\n———. 2014b. “Tidy Data.” Journal of Statistical\nSoftware 59 (1).https://www.jstatsoft.org/article/view/v059i10\n.\n\n\n———. 2016. Ggplot2: Elegant Graphics for Data Analysis.\nSpringer.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy\nD’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019.\n“Welcome to the Tidyverse.” Journal of Open Source\nSoftware 4 (43): 1686. https://joss.theoj.org/papers/10.21105/joss.01686.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen,\nKohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey\nDunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using\nthe Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, and Garret Grolemund. 2017. R for Data\nScience. O’Reilly. http://r4ds.had.co.nz/.\n\n\nWikle, Christopher K, Andrew Zammit-Mangion, and Noel Cressie. 2019.\nSpatio-Temporal Statistics with r. CRC Press.\n\n\nWilhelm, Stefan, and Miguel Godinho de Matos. 2013. “Estimating Spatial Probit Models in R.”\nThe R Journal 5 (1): 130–43. https://doi.org/10.32614/RJ-2013-013.\n\n\nWilke, Claus O. 2019. Fundamentals of Data Visualization.\nO’Reilly Media, Inc. https://serialmentor.com/dataviz/.\n\n\nWood, S. N. 2017. Generalized Additive Models: An Introduction with\nr. 2nd ed. Chapman; Hall/CRC.\n\n\nWood, Simon. 2022. Mgcv: Mixed GAM Computation Vehicle with\nAutomatic Smoothness Estimation. https://CRAN.R-project.org/package=mgcv.\n\n\nZeileis, Achim, Jason C. Fisher, Kurt Hornik, Ross Ihaka, Claire D.\nMcWhite, Paul Murrell, Reto Stauffer, and Claus O. Wilke. 2020.\n“colorspace: A Toolbox for\nManipulating and Assessing Colors and Palettes.” Journal of\nStatistical Software 96 (1): 1–49. https://doi.org/10.18637/jss.v096.i01."
  }
]